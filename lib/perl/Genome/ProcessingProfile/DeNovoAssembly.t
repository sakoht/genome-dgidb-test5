#!/usr/bin/env perl

BEGIN {
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
}

use strict;
use warnings;

use above "Genome";

use Test::More;

use_ok('Genome::ProcessingProfile::DeNovoAssembly') or die;

# Create fail - no seq platform
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'velvet one-button',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/o seq platform',
);
# Create fail - no assembler
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/o assembler',
);
# Create fail - invalid assembler
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'consed',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/ invalid assembler',
);
# Create fail - invalid coverage
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'velvet one-button',
        assembler_version => '7.0.57-64',
        coverage => -1,
    ),
    'Failed as expected - create w/ invalid coverage',
);
# Create fail - invalid assembler/platform combo
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'newbler',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/ invalid assembler and seq platform combo',
);
# Create fail - no assembler version
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'velvet one-button',
    ),
    'Failed as expected - create w/o assembler version',
);
# Create fail - invalid assembler params
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'velvet one-button',
        assembler_version => '7.0.57-64',
        assembler_params => '-wrong params',
    ),
    'Failed as expected - create w/ invalid assembler params',
);
# Create fail - calculated assembler params
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'velvet one-button',
        assembler_version => '7.0.57-64',
        assembler_params => '-ins_length 260',
    ),
    'Failed as expected - create w/ calculated assembler params',
);

# all this model needs to do is return something for inst data
my %inst_data_params = ( run_name => 'XXXXXX', subset_name => 1 );
my @instrument_data = ( Genome::InstrumentData::Solexa->__define__(%inst_data_params), Genome::InstrumentData::Solexa->__define__(%inst_data_params), );

# assemblers and stages
my $pps_and_stages = {
    'allpaths de-novo-assemble' => [
        [
            'process_instrument_data',
            [qw/ Genome::Model::Event::Build::DeNovoAssembly::ProcessInstrumentData /],
            \@instrument_data,
        ],
        [
            'assemble', 
            [qw/ Genome::Model::Event::Build::DeNovoAssembly::Assemble Genome::Model::Event::Build::DeNovoAssembly::PostAssemble Genome::Model::Event::Build::DeNovoAssembly::Report /],
            [ 1 ],
        ],
    ],
    'velvet one-button' => [
        [ 
            'process_instrument_data',
            [qw/ Genome::Model::Event::Build::DeNovoAssembly::PrepareInstrumentData /],
            [ 1 ],
        ],
        [
            'assemble', 
            [qw/ Genome::Model::Event::Build::DeNovoAssembly::Assemble Genome::Model::Event::Build::DeNovoAssembly::PostAssemble Genome::Model::Event::Build::DeNovoAssembly::Report /],
            [ 1 ],
        ],
    ],
};
for my $assembler ( keys %$pps_and_stages ) {
    my $pp = Genome::ProcessingProfile::DeNovoAssembly->__define__(
        assembler_name => $assembler,
        post_assemble => 'blah',
    );
    ok($pp, "$assembler test pp") or die;
    my $model = Genome::Model::DeNovoAssembly->__define__(name => '__TEST_MODEL__', processing_profile => $pp, instrument_data => \@instrument_data);
    my $build = Genome::Model::Build::DeNovoAssembly->__define__(model => $model);
    my $events = $pp->_generate_events_for_build($build);
    for ( my $i = 0; $i < @$events; $i++ ) {
        my $stage = $pps_and_stages->{$assembler}->[$i];
        my $event = $events->[$i];
        my $stage_name = $event->{name};
        is($stage_name, $stage->[0], "$stage_name name matches");
        my %stage_classes = map { $_->class => 1 } @{$event->{events}};
        my @stage_classes = sort keys %stage_classes;
        is_deeply(\@stage_classes, $stage->[1], "$assembler $stage_name job classes");
        my $stage_objects_method = $stage_name.'_objects';
        my @stage_objects = $pp->$stage_objects_method($model);
        is_deeply(\@stage_objects, $stage->[2], "$assembler $stage_name objects");
        is((@{$event->{events}}), (@{$stage->[1]} * @{$stage->[2]}), "$assembler $stage_name event count");
    }
}

done_testing();
exit;

