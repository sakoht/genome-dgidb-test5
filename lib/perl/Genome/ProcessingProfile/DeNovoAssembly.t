#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";

use Carp 'confess';
use Data::Dumper;
use Genome::Model::DeNovoAssembly::Test;
use Test::More;

$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
ok($ENV{UR_USE_DUMMY_AUTOGENERATED_IDS}, 'Dummy ids') or die;
$ENV{UR_DBI_NO_COMMIT} = 1;
ok($ENV{UR_DBI_NO_COMMIT}, 'DBI no commit') or die;

use_ok('Genome::ProcessingProfile::DeNovoAssembly') or die;

# Create fail - no seq platform
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        assembler_name => 'velvet',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/o seq platform',
);
# Create fail - invalid seq platform
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => '3730',
        assembler_name => 'velvet',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/ invalid seq platform',
);
# Create fail - no assembler
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/o assembler',
);
# Create fail - invalid assembler
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_name => 'consed',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/ invalid assembler',
);
# Create fail - invalid coverage
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_name => 'velvet',
        assembler_version => '7.0.57-64',
        coverage => -1,
    ),
    'Failed as expected - create w/ invalid coverage',
);
# Create fail - invalid assembler/platform combo
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_name => 'newbler',
        assembler_version => '7.0.57-64',
    ),
    'Failed as expected - create w/ invalid assembler and seq platform combo',
);
# Create fail - no assembler version
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_name => 'velvet',
    ),
    'Failed as expected - create w/o assembler version',
);
# Create fail - invalid assembler params
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_name => 'velvet',
        assembler_version => '7.0.57-64',
        assembler_params => '-wrong params',
    ),
    'Failed as expected - create w/ invalid assembler params',
);
# Create fail - calculated assembler params
ok(
    !Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'DNA Test',
        sequencing_platform => 'solexa',
        assembler_name => 'velvet',
        assembler_version => '7.0.57-64',
        assembler_params => '-ins_length 260',
    ),
    'Failed as expected - create w/ calculated assembler params',
);

# Valid create
my %valid_params = Genome::Model::DeNovoAssembly::Test->processing_profile_params_for_assembler_and_platform(
    assembler_name => 'velvet', 
    sequencing_platform => 'solexa',
);
ok(%valid_params, 'Got valid pp params');
my $pp = Genome::ProcessingProfile::DeNovoAssembly->create(%valid_params);
ok($pp, 'Create DNA pp') or die;
my %operation_params = (
    assembler => { hash_sizes => [qw/ 31 33 35 /], },
    read_trimmer => { trim_length => 10 },
);
for my $operation ( keys %operation_params ) {
    my $method = $operation.'_params_as_hash';
    my %params = $pp->$method;
    is_deeply(\%params, $operation_params{$operation}, $operation.' params');
}

# Stages
my @stages = $pp->stages;
is_deeply(\@stages, [qw/ assemble /], 'Stages');
my @stage_classes = $pp->assemble_job_classes;
is_deeply(
    \@stage_classes, 
    [ 
        (map { 
            'Genome::Model::Event::Build::DeNovoAssembly::'.$_.'::Velvet'
        } (qw/ PrepareInstrumentData Assemble PostAssemble /)),
        'Genome::Model::Event::Build::DeNovoAssembly::Report',
    ], 
    'Stage classes'
);

# Assembler, Read Trimmer and Read Filter classes
is($pp->class_for_assembler, 'Genome::Model::Tools::Velvet::OneButton', 'Assembler class');
#is($pp->class_for_read_filter, '??');
is($pp->class_for_read_trimmer, 'Genome::Model::Tools::FastQual::Trimmer::ByLength', 'Read trimmer class');

done_testing();
exit;

#$HeadURL$
#$Id$
