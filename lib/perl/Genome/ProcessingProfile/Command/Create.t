#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above "Genome";

use Test::More tests => 38;

use_ok('Genome::ProcessingProfile::Command::Create') or die;
ok(Genome::ProcessingProfile::Command::Create->sub_command_classes) or die;
is(Genome::ProcessingProfile::Command::Create->_sub_commands_from, 'Genome::Model', 'subcommands from');
is(
    Genome::ProcessingProfile::Command::Create->_sub_commands_inherit_from, 
    'Genome::ProcessingProfile::Command::Create::Base',
    'subcommands inherit from',
);
is(Genome::ProcessingProfile::Command::Create->_target_base_class, 'Genome::ProcessingProfile', 'target base class');

test_command_subclass();
test_processing_profile_class();

# make sure it has subclasses
ok(
    Genome::ProcessingProfile::Command::Create->sub_command_classes,
    'Sub command classes',
);

# Create a in memory create command for testing
class Genome::ProcessingProfile::Tester {
    is => 'Genome::ProcessingProfile',
    has_param => [ 
        sequencing_platform => { 
            is => 'Text',
            doc => 'The sequencing_platform of this profile',
        },
        dna_source => {
            is => 'Text',
            default_value => 'genomic',
            valid_values => [qw/ genomic metagenomic /],
            doc => 'The dna source of this profile',
        },
        roi => {
            is => 'Text',
            is_optional => 1,
            doc => 'This param may be undefined.',
        },
        append_event_steps => {
            is => 'Text',
            is_optional => 1,
        },
        some_options => {
            is => 'Text',
            doc => 'Test is_many params',
            is_many => 1,
            is_optional => 1,
        },
    ],
};

class Genome::ProcessingProfile::Command::Create::Tester {
    is => 'Genome::ProcessingProfile::Command::Create::Base',
    has => [ 
        sequencing_platform => { 
            is => 'Text',
            doc => 'The sequencing_platform of this profile',
        },
        dna_source => {
            is => 'Text',
            default_value => 'genomic',
            valid_values => [qw/ genomic metagenomic /],
            doc => 'The dna source of this profile',
        },
        roi => {
            is => 'Text',
            is_optional => 1,
            doc => 'This param may be undefined.',
        },
        append_event_steps => {
            is => 'Text',
            is_optional => 1,
        },
        some_options => {
            is => 'Text',
            is_many => 1,
            is_optional => 1,
        },
    ],
};
Genome::ProcessingProfile::Command::Create::Tester->dump_status_messages(1);
#Genome::ProcessingProfile::Command::Create->_overload_target_class_name('Genome::ProcessingProfile::Command::Create::Tester');
no warnings 'redefine';
eval "sub Genome::ProcessingProfile::Command::Create::Tester::_target_class_name { 'Genome::ProcessingProfile::Tester' }";
use warnings;
is(Genome::ProcessingProfile::Command::Create::Tester->_target_class_name, 'Genome::ProcessingProfile::Tester', 'target class is Genome::ProcessingProfile::Tester');

test_based_on_param_value_overrides_default_value();

# Create a pp
my %params = (
    name => '__TEST__PP__',
    sequencing_platform => 'solexa',
    dna_source => 'genomic',
    roi => 'mouse',
    append_event_steps => undef,
);
ok(Genome::ProcessingProfile::Command::Create::Tester->execute(%params), "Create tester pp");
my $pp = Genome::ProcessingProfile::Tester->get();
ok($pp, 'Got freshly created tester pp');

# Try to create again
my $creator = Genome::ProcessingProfile::Command::Create::Tester->create(%params);
ok(!$creator->execute, 'Failed as expected - tried to create same processing profile again');

#< Based on >#
# success
$creator = Genome::ProcessingProfile::Command::Create::Tester->create(
    name => 'Tester for ROI UNDEF',
    based_on => $pp,
    roi => 'UNDEF',
);
ok($creator, 'create w/ based on');
ok($creator->execute, 'execute - create new pp w/ based on, but changed roi to UNDEF');
ok($creator->created_processing_profile, "created processing profile stored on create command");
isa_ok($creator->created_processing_profile, "Genome::ProcessingProfile::Tester", "newly created processing profile is the correct type");
is($creator->created_processing_profile->roi, undef, 'roi should be undefined');

# w/o changing anything (fails)
$creator = Genome::ProcessingProfile::Command::Create::Tester->create(
    name => 'FAILS',
    based_on => $pp,
);
ok($creator, 'create w/ based on but no changes');
ok(!$creator->execute, 'Failed as expected - tried to base on pp w/o changing params');

# test is-many params
%params = (
    name => '__TEST__PP__IS_MANY',
    sequencing_platform => 'solexa',
    dna_source => 'genomic',
    roi => 'mouse',
    append_event_steps => undef,
    some_options => ['option1','option2'],
);
ok(Genome::ProcessingProfile::Command::Create::Tester->execute(%params), "Create tester pp");
$pp = Genome::ProcessingProfile::Tester->get(name => "__TEST__PP__IS_MANY");
my @options = $pp->some_options;
is_deeply(\@options, ['option1','option2'], 'Processing profile with is_many param got a list of options');
ok($pp, 'Got pp with is_many option');

# create the processing profile that is based on the above
my $create_alternate_cmd = Genome::ProcessingProfile::Command::Create::Tester->create(
    based_on => $pp,
    name => 'alternate_test_based_on_param_value_overrides_default_value',
    roi => 'alternate_test_based_on_param_value_overrides_default_value', # just to make it unique
);

ok($create_alternate_cmd->execute(), "created new processing profile");
my $alternate_pp = $create_alternate_cmd->created_processing_profile;
ok($alternate_pp, 'got created_processing_profile');
@options = $alternate_pp->some_options;
is_deeply(\@options, ['option1','option2'], 'Processing profile with is_many param got a list of options');
isnt($alternate_pp->roi, $pp->roi, "Successfully overrode roi option");

sub test_command_subclass {
    my $class = 'Genome::ProcessingProfile::Command::Create';
    for my $subclass ('Foo', 'Foo::Bar') {
        my $class_name = join('::', $class, $subclass);
        is($class->_command_subclass($class_name), $subclass, '_command_subclass works for subclass (' . $subclass . ')');
    }
}

sub test_processing_profile_class {
    my $class = 'Genome::ProcessingProfile::Command::Create';
    for my $subclass ('Foo', 'Foo::Bar') {
        my $class_name = join('::', $class, $subclass);
        my $expected_processing_profile_class = join('::', 'Genome::ProcessingProfile', $subclass);
        is($class->_processing_profile_class($class_name), $expected_processing_profile_class, '_processing_profile_class works for subclass (' . $subclass . ')');
    }
}

sub test_based_on_param_value_overrides_default_value {
    my $transaction = UR::Context::Transaction->begin;

    local $@ = '';
    eval {
        my $meta = UR::Object::Type->get('Genome::ProcessingProfile::Tester');
        ok($meta, 'got "Genome::ProcessingProfile::Tester" class object');

        # We are testing that a default value is not used when basing on an existing profile
        # so we need to make sure that the following assumptions are changed out from
        # underneath us.
        my $dna_source_property = $meta->properties(property_name => 'dna_source');
        ok($dna_source_property, 'got dna_source property');
        my $dna_source = 'metagenomic';
        ok($dna_source_property->{default_value}, 'dna_source has default value');
        my $default_dna_source = $dna_source_property->{default_value};
        ok($default_dna_source ne $dna_source, 'make sure our dna_source is not the default value');

        # create the source processing profile that the second will be based on
        my $create_cmd = Genome::ProcessingProfile::Command::Create::Tester->create(
            name => 'test_based_on_param_value_overrides_default_value',
            roi => 'test_based_on_param_value_overrides_default_value', # just to make it unique
            dna_source => $dna_source,
            sequencing_platform => 'solexa',
            append_event_steps => undef,
        );
        ok($create_cmd->execute(), "created new processing profile");
        my $source_pp = $create_cmd->created_processing_profile;
        ok($source_pp, 'got created_processing_profile');

        # create the processing profile that is based on the above
        my $create_alternate_cmd = Genome::ProcessingProfile::Command::Create::Tester->create(
            based_on => $source_pp,
            name => 'alternate_test_based_on_param_value_overrides_default_value',
            roi => 'alternate_test_based_on_param_value_overrides_default_value', # just to make it unique
        );
        ok($create_alternate_cmd->execute(), "created new processing profile");
        my $alternate_pp = $create_alternate_cmd->created_processing_profile;
        ok($alternate_pp, 'got created_processing_profile');

        # make sure it got alternate_pp's dna_source not the default value for dna_source
        isnt($alternate_pp->dna_source, $default_dna_source, "alternate_pp's dna_source should not match the default value");
        is($alternate_pp->dna_source, $source_pp->dna_source, "alternate_pp's dna_source matches source_pp");
    };
    print "ERROR: $@\n" if ($@);

    $transaction->rollback;
}
