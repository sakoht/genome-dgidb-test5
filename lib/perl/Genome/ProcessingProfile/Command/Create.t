#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above "Genome";

use Test::More;

use_ok('Genome::ProcessingProfile::Command::Create') or die;

test_command_subclass();
test_processing_profile_class();

# make sure it has subclasses
ok(
    Genome::ProcessingProfile::Command::Create->sub_command_classes,
    'Sub command classes',
);

# Create a in memory create command for testing
class Genome::ProcessingProfile::Tester {
    is => 'Genome::ProcessingProfile',
    has_param => [ 
        sequencing_platform => { 
            is => 'Text',
            doc => 'The sequencing_platform of this profile',
        },
        dna_source => {
            is => 'Text',
            default_value => 'genomic',
            valid_values => [qw/ genomic metagenomic /],
            doc => 'The dna source of this profile',
        },
        roi => {
            is => 'Text',
            is_optional => 1,
            doc => 'This param may be undefined.',
        },
        append_event_steps => {
            is => 'Text',
            is_optional => 1,
        },
    ],
};

class Genome::ProcessingProfile::Command::Create::Tester {
    is => 'Genome::ProcessingProfile::Command::Create::Base',
    has => [ 
        sequencing_platform => { 
            is => 'Text',
            doc => 'The sequencing_platform of this profile',
        },
        dna_source => {
            is => 'Text',
            default_value => 'genomic',
            valid_values => [qw/ genomic metagenomic /],
            doc => 'The dna source of this profile',
        },
        roi => {
            is => 'Text',
            is_optional => 1,
            doc => 'This param may be undefined.',
        },
        append_event_steps => {
            is => 'Text',
            is_optional => 1,
        },
    ],
};
Genome::ProcessingProfile::Command::Create::Tester->dump_status_messages(1);
sub Genome::ProcessingProfile::Command::Create::Tester::_target_class_name { return 'Genome::ProcessingProfile::Tester' };

# Create a pp
my %params = (
    name => '__TEST__PP__',
    sequencing_platform => 'solexa',
    dna_source => 'genomic',
    roi => 'mouse',
    append_event_steps => undef,
);
ok(Genome::ProcessingProfile::Command::Create::Tester->execute(%params), "Create tester pp");
my $pp = Genome::ProcessingProfile::Tester->get();
ok($pp, 'Got freshly created tester pp');

# Try to create again
my $creator = Genome::ProcessingProfile::Command::Create::Tester->create(%params);
ok(!$creator->execute, 'Failed as expected - tried to create same processing profile again');

#< Based on >#
# success
$creator = Genome::ProcessingProfile::Command::Create::Tester->create(
    name => 'Tester for ROI UNDEF',
    based_on => $pp->id,
    roi => 'UNDEF',
);
ok($creator, 'create w/ based on');
ok($creator->execute, 'execute - create new pp w/ based on, but changed roi to UNDEF');

# w/o changing anything (fails)
$creator = Genome::ProcessingProfile::Command::Create::Tester->create(
    name => 'FAILS',
    based_on => 'id='.$pp->id,
);
ok($creator, 'create w/ based on but no changes');
ok(!$creator->execute, 'Failed as expected - tried to base on pp w/o changing params');

done_testing();

sub test_command_subclass {
    my $class = 'Genome::ProcessingProfile::Command::Create';
    for my $subclass ('Foo', 'Foo::Bar') {
        my $class_name = join('::', $class, $subclass);
        is($class->_command_subclass($class_name), $subclass, '_command_subclass works for subclass (' . $subclass . ')');
    }
}

sub test_processing_profile_class {
    my $class = 'Genome::ProcessingProfile::Command::Create';
    for my $subclass ('Foo', 'Foo::Bar') {
        my $class_name = join('::', $class, $subclass);
        my $expected_processing_profile_class = join('::', 'Genome::ProcessingProfile', $subclass);
        is($class->_processing_profile_class($class_name), $expected_processing_profile_class, '_processing_profile_class works for subclass (' . $subclass . ')');
    }
}
