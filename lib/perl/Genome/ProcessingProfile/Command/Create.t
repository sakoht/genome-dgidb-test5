#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above "Genome";

use Test::More;

# Use, make sure it has subclasses
use_ok('Genome::ProcessingProfile::Command::Create') or die;
ok(
    Genome::ProcessingProfile::Command::Create->sub_command_classes,
    'Sub command classes',
);

# Create a in memory create command for testing
class Genome::ProcessingProfile::Tester {
    is => 'Genome::ProcessingProfile',
    has_param => [ 
        sequencing_platform => { 
            is => 'Text',
            doc => 'The sequencing_platform of this profile',
        },
        dna_source => {
            is => 'Text',
            default_value => 'genomic',
            valid_values => [qw/ genomic metagenomic /],
            doc => 'The dna source of this profile',
        },
        roi => {
            is => 'Text',
            is_optional => 1,
            doc => 'This param may be undefined.',
        },
        append_event_steps => {
            is => 'Text',
            is_optional => 1,
        },
    ],
};

class Genome::ProcessingProfile::Command::Create::Tester {
    is => 'Genome::ProcessingProfile::Command::Create',
    has => [ 
        sequencing_platform => { 
            is => 'Text',
            doc => 'The sequencing_platform of this profile',
        },
        dna_source => {
            is => 'Text',
            default_value => 'genomic',
            valid_values => [qw/ genomic metagenomic /],
            doc => 'The dna source of this profile',
        },
        roi => {
            is => 'Text',
            is_optional => 1,
            doc => 'This param may be undefined.',
        },
        append_event_steps => {
            is => 'Text',
            is_optional => 1,
        },
    ],
};

# Create a pp
my %params = (
    name => '__TEST__PP__',
    sequencing_platform => 'solexa',
    dna_source => 'genomic',
    roi => 'mouse',
    append_event_steps => undef,
);
ok(Genome::ProcessingProfile::Command::Create::Tester->execute(%params), "Create tester pp");
my $pp = Genome::ProcessingProfile::Tester->get();
ok($pp, 'Got freshly created tester pp');

# Try to create again
my $creator = Genome::ProcessingProfile::Command::Create::Tester->create(%params);
ok(!$creator->execute, 'Failed as expected - tried to create same processing profile again');

#< Based on >#
# success
ok(
    Genome::ProcessingProfile::Command::Create::Tester->execute(
        name => 'Tester for ROI UNDEF',
        based_on => $pp->id,
        roi => 'UNDEF',
    ),
    'Create new tester pp w/ based on, but changed roi to UNDEF'
);

# invalid based on pp
$creator = Genome::ProcessingProfile::Command::Create::Tester->create(
    name => 'FAILS',
    based_on => 'no way this pp exists',
);
ok(!$creator, 'Failed as expected - tried to base on pp that does not exist');

# w/o changing anything (fails)
$creator = Genome::ProcessingProfile::Command::Create::Tester->create(
    name => 'FAILS',
    based_on => $pp->id
);
ok(!$creator->execute, 'Failed as expected - tried to base on pp w/o changing params');

# pp w/o params (fails) 
#  make fake calsses
#  create a one first so we can get it in the create module
#  try to create again, using based on
class Genome::ProcessingProfile::TesterNoParams {
    is => 'Genome::ProcessingProfile',
};
class Genome::ProcessingProfile::Command::Create::TesterNoParams {
    is => 'Genome::ProcessingProfile::Command::Create',
};
ok(
    Genome::ProcessingProfile::Command::Create::TesterNoParams->execute(
        name => 'PP W/O Params I',
    ),
    "Create tester w/o params pp"
);
my $pp_no_params = Genome::ProcessingProfile::TesterNoParams->get();
ok($pp_no_params, 'Got tester w/o params pp');
ok(
    ! Genome::ProcessingProfile::Command::Create::TesterNoParams->execute(
        name => 'FAILS',
        based_on => $pp_no_params->id,
    ),
    'Failed as expected - tried to base on pp w/o changing params'
);

done_testing();
exit;

