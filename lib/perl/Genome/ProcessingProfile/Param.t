#!/usr/bin/env perl

use strict;
use warnings;

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above "Genome";
use Test::More;

use_ok('Genome::ProcessingProfile');
use_ok('Genome::ProcessingProfile::Param');

my $value_class_name = "Genome::Sys::User";
my $text_class_name = "UR::Value::Text";
class Genome::ProcessingProfile::Test {
    is => 'Genome::ProcessingProfile',
    has_param => [
        user => {
            is => $value_class_name,
            is_optional => 1,
        },
    ],
};
my $pp_meta = Genome::ProcessingProfile::Test->__meta__;
ok($pp_meta, 'got meta object for test pp subclass');

# FIXME Mock a user object here instead
my $user = Genome::Sys::User->get('bdericks@genome.wustl.edu');
ok($user, 'got user');

# Make a processing profile, providing a user object during construction
$DB::single=1;
my $pp = Genome::ProcessingProfile::Test->create(
    name => 'test',
    user => $user,
);
ok($pp, 'created test processing profile by providing user directly');

my @params = $pp->params;
is(scalar(@params), 1, "Got one parameter from the processing profile");
my $user_param = shift @params;
ok($user_param, "Got user from newly created processing profile");
ok($user_param->value_obj, 'value_obj is defined');
ok(ref $user_param->value_obj, 'value_obj is an object');
is($user_param->value_obj->class, $value_class_name, "Class of value_obj is a $value_class_name");
is($user_param->value_obj->id, $user->id, 'value_obj id matches user id, as expected');
is($user_param->value_obj, $user, "value_obj accessor returns the correct object");

# Make a processing profile with no user and create the user param directly, as an object
my $pp2 = Genome::ProcessingProfile::Test->create(
    name => 'test2',
);
ok($pp2, 'created test processing profile without providing user');

my $name = "user";
my $param = Genome::ProcessingProfile::Param->create(
    processing_profile_id => $pp2->id,
    name => $name,
    value_class_name => $value_class_name,
    value_id => 'bdericks@genome.wustl.edu',
);

isa_ok($param,'Genome::ProcessingProfile::Param');
ok($param, "created param with value_class_name $value_class_name");
is($param->name,$name,'name accessor');
ok($param->value_obj, 'value_obj is defined');
ok(ref $param->value_obj, 'value_obj is an object');
is($param->value_obj->class, $value_class_name, "Class of value_obj is a $value_class_name");
is($param->value_obj->id, $user->id, 'value_obj id matches user id, as expected');

# Make a processing profile with no user and create the user param directly, as a text string
my $pp3 = Genome::ProcessingProfile::Test->create(
    name => 'test3',
);
ok($pp3, 'created second test processing profile without providing user');

my $param2 = Genome::ProcessingProfile::Param->create(
    processing_profile_id => $pp3->id,
    name => $name,
    value_class_name => $text_class_name,
    value_id => 'bdericks@genome.wustl.edu',
);

isa_ok($param2,'Genome::ProcessingProfile::Param');
is($param2->name,$name,'name accessor');
ok($param2, "created param with value_class_name $text_class_name");
ok($param2->value_id, 'value_id is defined');
ok(!ref $param2->value_id, 'value_id is not an object');
is($param2->value_id, $user->id, 'value_id matches user id, as expected');

# Make a processing profile with no user and create the user param directly, as a text string where value_class_name must be inferred
my $pp4 = Genome::ProcessingProfile::Test->create(
    name => 'test4',
);
ok($pp4, 'created second test processing profile without providing user');

my $param3 = Genome::ProcessingProfile::Param->create(
    processing_profile_id => $pp4->id,
    name => $name,
    value_id => 'bdericks@genome.wustl.edu',
);

isa_ok($param3,'Genome::ProcessingProfile::Param');
is($param3->name,$name,'name accessor');
ok($param3, "created param with value_class_name $text_class_name");
ok($param3->value_id, 'value_id is defined');
ok(!ref $param3->value_id, 'value_id is not an object');
is($param3->value_id, $user->id, 'value_id matches user id, as expected');

done_testing();
