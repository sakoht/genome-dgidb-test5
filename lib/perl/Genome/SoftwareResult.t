#!/usr/bin/env perl
use strict;
use warnings;
use Test::More tests => 15; 

use above 'Genome';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

###

class Genome::Bar { };

###

class Genome::Foo {
    is => 'Genome::SoftwareResult',
    has_param => [
        p1 => { is => 'Text' },
        p2 => { is => 'Number' },
        p3 => { is => 'Genome::Bar' },
    ],
    has_input => [
        i1 => { is => 'Text' },
        i2 => { is => 'Number' },
        i3 => { is => 'Genome::Bar' },
    ],
    has_metric => [
        # not yet supported
        m1 => { is => 'Text' },
        m2 => { is => 'Number' },
        m3 => { is => 'Genome::Bar' },
    ],
};

sub Genome::Foo::resolve_module_version { 
    $DB::single = 1;
    shift->Genome::SoftwareResult::resolve_module_version(@_)
}

###

use_ok('Genome::SoftwareResult');

my $template = 'Genome-SoftwareResult-'. Genome::Sys->username .'-XXXX';
my $tmp_dir = File::Temp::tempdir($template,CLEANUP => 1);

my $b = Genome::Bar->create(id => -1234);
ok($b, "made an object to be used as an input and a param");

my $f = Genome::Foo->get_or_create(
    p1 => "hello",
    p2 => 123,
    p3 => $b,
    i1 => "hello",
    i2 => 123,
    i3 => $b,
    m1 => "hello",
    m2 => 123,
    #m3 => $b,
    output_dir => $tmp_dir,
);
ok($f, "made a software result");

is($f->p1, 'hello', 'p1 text matches');
is($f->p2, 123, 'p2 number matches');
is($f->p3, $b, 'p3 object matches');
is($f->i1, 'hello', 'i1 text matches');
is($f->i2, 123, 'i2 number matches');
is($f->i3, $b, 'i3 object matches');
is($f->m1, 'hello', 'm1 text matches');
is($f->m2, 123, 'm2 number matches');
#is($f->m3, $b, 'm3 object matches');
is($f->output_dir, $tmp_dir, "output dir matches");

$ENV{UR_DBI_MONITOR_DML} = 1;
eval { UR::Context->commit; };

ok(!$@, "no exception during commit!")
    or diag("exception: $@");

my $prev_id = $f->id;
for ($f->params, $f->inputs, $f) {
    $_->unload;
}

my $f2 = Genome::Foo->get_or_create(
    p1 => "hello",
    p2 => 123,
    p3 => $b,
    i1 => "hello",
    i2 => 123,
    i3 => $b,
    #m1 => "hello",
    #m2 => 123,
    #m3 => $b,
    output_dir => $tmp_dir,
);

ok($f2, "got a software result on the second call");
is($f2->id, $prev_id, "the id matches that of the first one");


