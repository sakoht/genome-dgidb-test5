#!/usr/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use_ok('Genome::Model') or die;

class Genome::ProcessingProfile::Test {
    is => 'Genome::ProcessingProfile',
};
ok(Genome::ProcessingProfile::Test->__meta__, 'got meta object for test processing profile subclass') or die;

class Genome::Model::Test {
    is => 'Genome::Model',
};
ok(Genome::Model::Test->__meta__, 'got meta object for test model subclass') or die;

class Genome::Model::Build::Test {
    is => 'Genome::Model::Build',
};
ok(Genome::Model::Build::Test->__meta__, 'got meta object for test build subclass') or die;

my $observer = Genome::Model::Event::Build->add_observer(
    aspect => 'event_status',
    note => 'build_success',
    callback => sub {
        my ($self, $property_name, $old_value, $new_value) = @_;
        my $build = $self->build;
        my $model = $build->model;
        my @to_models = $model->to_models;
        map { $_->build_requested(1) } @to_models;
        return 1;
    }
);
ok($observer, 'successfully created observer for build');

my @observers = UR::Observer->get(
    note => 'build_success',
    aspect => 'event_status',
    subject_class_name => 'Genome::Model::Event::Build',
);
ok(@observers == 1, 'got one observer back, as expected');

my $subject = Genome::Taxon->create(
    name => 'test taxon',
);
ok($subject, 'created test subject');

my $pp = Genome::ProcessingProfile::Test->create(
    name => 'test pp',
);
ok($pp, 'created test processing profile object');

my $model = Genome::Model::Test->create(
    name => 'test model',
    processing_profile => $pp,
    subject => $subject,
);
ok($model, 'created test model object');

my $downstream_model = Genome::Model::Test->create(
    name => 'downstream model',
    processing_profile => $pp,
    subject => $subject,
);
ok($downstream_model, 'created downstream model');

my $rv = $downstream_model->add_input(
    name => 'input model',
    value => $model,
);
ok($rv, 'successfully added input to downstream model');

my @inputs = $downstream_model->inputs;
ok(@inputs == 1, 'found expected number of inputs on downstream model');
ok($inputs[0]->value->isa('Genome::Model'), 'input is a model');
ok($inputs[0]->value->id eq $model->id, 'input is upstream model');

my $build = Genome::Model::Build::Test->create(
    model => $model,
);
ok($build, 'successfully created build');

$build->status('Succeeded');
is($build->status, 'Succeeded', 'changed build status to Succeeded');
is($downstream_model->build_requested, 1, 'downstream model has build requested');

done_testing();



