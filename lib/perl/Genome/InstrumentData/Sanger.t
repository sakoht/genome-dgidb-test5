#!/usr/bin/env perl

use strict;
use warnings;

use above 'Genome';

use Test::More;

BEGIN {
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
}

use_ok('Genome::InstrumentData::Sanger') or die;

my $sanger_inst_data = Genome::InstrumentData::Sanger->create(
    run_name => '1jan00.000amaa',
);
ok($sanger_inst_data, 'create sanger inst data');

my $disk_allocation = Genome::Disk::Allocation->create(
    disk_group_name => 'info_alignments',
    allocation_path => '__SANGER__TEST__ALLOC__',
    kilobytes_requested => 10_000,
    owner_class_name => $sanger_inst_data->class,
    owner_id => $sanger_inst_data->id,
);
ok($disk_allocation, 'created mock disk allocation') or die;

# real gsc read
my $trace_name = 'HMPB-aad13a05.b1';
my @reads = GSC::Sequence::Read->get(
    trace_name => $trace_name,
);
ok($reads[0], 'got gsc read') or die;

# read iterator
#ok($sanger_inst_data->_get_read_iterator, 'read iterator before overload');
class ReadIterator {};
sub ReadIterator::increment_count {
    $_[0]->{_cnt}++;
}
sub ReadIterator::next {
    my $self = shift;
    my $cnt = $self->increment_count;
    return $reads[$cnt];
}
my $read_iterator = ReadIterator->create();
ok($read_iterator, 'created read iterator');

my $path = $sanger_inst_data->full_path;
print "$path\n";
is($path, $disk_allocation->absolute_path, 'full path from allocation') or die;

# touch scf to see if it gets replaced
my $scf = $path.'/'.$trace_name.'.gz';
my $scf_fh = Genome::Sys->open_file_for_writing($scf);
ok($scf_fh, "opened $trace_name fh") or die;
$scf_fh->print("STUFF\n");
$scf_fh->close;
my $scf_sz = -s $scf;
cmp_ok($scf_sz, '>', 1, "$trace_name has size");

# dump traces to disk allocation dir
no warnings;
*Genome::InstrumentData::Sanger::_get_read_iterator= sub{ return $read_iterator; };
use warnings;
ok($sanger_inst_data->dump_to_file_system, 'dump to file system');
isnt(-s $scf, $scf_sz, "redumped $trace_name");

done_testing();
exit;

