#!/usr/bin/env perl

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Temp;
use Genome::Sample;

$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = "1";
$ENV{UR_DBI_NO_COMMIT} = "1";

my $s = Genome::Sample->get(2824113551);
ok($s, 'loaded sample data');

my $library_name = "Pooled_Library-2010-02-10_2";

my $dummy_id = UR::DataSource->next_dummy_autogenerated_id -1;

my $reference_build = Genome::Model::Build::ImportedReferenceSequence->get(name => "NCBI-human-build36");
my $source_data_file = '/gsc/var/cache/testsuite/data/Genome-InstrumentData-Command-Import-Genotype/SCENA_p_TCGAb29and30_SNP_N_GenomeWideSNP_6_A02_569132.small.genotype';
my $library = Genome::Library->get(name => $library_name);
my $sample = Genome::Sample->get(id => $library->sample_id);
my $sample_name = $sample->name;
ok($sample, "found sample $sample_name")
    or die "exiting because the sample does not exist";

my $tmp_dir = File::Temp::tempdir('Genome-InstrumentData-Commnd-Import-Genotype-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $tmp_allocation = Genome::Disk::Allocation->__define__(
    id => '-123459',
    disk_group_name => 'info_alignments',
    group_subdirectory => 'test',
    mount_path => '/tmp/mount_path',
    allocation_path => 'genotype_data/imported/-830001',
    id => '-123459',
    kilobytes_requested => 100000,
    kilobytes_used => 0,
    owner_id => $dummy_id-100,
    owner_class_name => 'Genome::InstrumentData::Imported',
);

no warnings;
*UR::Context::commit = sub { return 1 }; # NO_COMMIT not respected by G:M:C:Services:Build:Run
*Genome::Report::Email::send_report = sub{ return 1; }; # so we don't get emails
*Genome::Disk::Allocation::absolute_path = sub { return $tmp_dir };
*Genome::Disk::Allocation::reallocate = sub { 1 };
*Genome::Disk::Allocation::deallocate = sub { 1 };
use warnings;

isa_ok($tmp_allocation,'Genome::Disk::Allocation'); 

# Fails
my $cmd = Genome::InstrumentData::Command::Import::Genotype->create(
    library => $library,
    source_data_file => $source_data_file,
    allocation =>  $tmp_allocation,
    define_model => 1,
    sequencing_platform => "unit test industries",
);
ok(!$cmd->execute, "attempt to create command w/o reference is an error"); 
$cmd->delete;

$cmd = Genome::InstrumentData::Command::Import::Genotype->create(
    source_data_file => $source_data_file,
    allocation =>  $tmp_allocation,
    define_model => 1,
    reference_sequence_build => $reference_build,
    sequencing_platform => "unit test industries",
);
ok(!$cmd->execute, "attempt to create command w/o sample or library is an error"); 
$cmd->delete;

# Success
$cmd = Genome::InstrumentData::Command::Import::Genotype->create(
    library => $library,
    source_data_file => $source_data_file,
    allocation =>  $tmp_allocation,
    define_model => 1,
    reference_sequence_build => $reference_build,
    sequencing_platform => "unit test industries",
);
ok($cmd, "constructed an import command");
my @errors = $cmd->__errors__;
is(scalar(@errors),0, "no errors in cmd");
ok($cmd->execute, "execution was successful");

my $i = Genome::InstrumentData::Imported->get(
    sample_name => $sample_name, 
    library_id => $library->id,
    import_format => 'genotype file',
);

my $disk = Genome::Disk::Allocation->get(owner_class_name => $i->class, owner_id => $i->id, id => -123459);

ok($disk, "found an allocation owned by the new instrument data");

my $owner_class = $disk->owner_class_name;

is($owner_class, "Genome::InstrumentData::Imported", "allocation belongs to  G::I::Imported");

is($disk->owner_id, $i->id, "allocation owner ID matches imported instrument data id");

ok(-e $i->data_directory, "output directory is present");

is($i->library_id,$library->id,"library_id matches");

my $genotype_file = $i->disk_allocations->absolute_path ."/". $sample_name . ".genotype";

ok(-s $genotype_file, "Found properly named genotype file.");

done_testing(14);
exit;

