#!/usr/bin/env perl
use strict;
use warnings;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = "1";
$ENV{UR_DBI_NO_COMMIT} = "1";
use above "Genome";
use Test::More tests => 25;
use File::Temp;
use Genome::Sample;

my $s = Genome::Sample->get(2824113551);

ok($s, 'loaded sample data');

my $library_name = "Pooled_Library-2010-02-10_2";

my $dummy_id = UR::DataSource->next_dummy_autogenerated_id -1;

my $reference_build = Genome::Model::Build::ImportedReferenceSequence->get(name => "NCBI-human-build36");
my $source_data_file = '/gsc/var/cache/testsuite/data/Genome-InstrumentData-Command-Import-Genotype/SCENA_p_TCGAb29and30_SNP_N_GenomeWideSNP_6_A02_569132.small.genotype';
my $library = Genome::Library->get(name => $library_name);
my $sample = Genome::Sample->get(id => $library->sample_id);
my $sample_name = $sample->name;
ok($sample, "found sample $sample_name")
    or die "exiting because the sample does not exist";

my $tmp_dir = File::Temp::tempdir('Genome-InstrumentData-Commnd-Import-Genotype-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $tmp_allocation = Genome::Disk::Allocation->__define__(
                                                           id => '-123459',
                                                           disk_group_name => 'info_alignments',
                                                           group_subdirectory => 'test',
                                                           mount_path => '/tmp/mount_path',
                                                           allocation_path => 'genotype_data/imported/-830001',
                                                           allocator_id => '-123459',
                                                           kilobytes_requested => 100000,
                                                           kilobytes_used => 0,
                                                           owner_id => $dummy_id-100,
                                                           owner_class_name => 'Genome::InstrumentData::Imported',
                                                       );

no warnings;
*Genome::Disk::Allocation::absolute_path = sub { return $tmp_dir };
*Genome::Disk::Allocation::reallocate = sub { 1 };
*Genome::Disk::Allocation::deallocate = sub { 1 };
use warnings;

isa_ok($tmp_allocation,'Genome::Disk::Allocation'); 

my $cmd = Genome::InstrumentData::Command::Import::Genotype->create(
    library_name => $library_name,
    sample_name => $sample_name,
    source_data_file => $source_data_file,
    allocation =>  $tmp_allocation,
    define_model => 1,
    sequencing_platform => "unit test industries",
);
ok(!$cmd->execute, "attempt to create command w/o reference is an error"); 

$cmd = Genome::InstrumentData::Command::Import::Genotype->create(
    library_name => $library_name,
    sample_name => $sample_name,
    source_data_file => $source_data_file,
    allocation =>  $tmp_allocation,
    define_model => 1,
    reference_sequence_build => $reference_build,
    sequencing_platform => "unit test industries",
);
ok($cmd, "constructed an import command");
my @errors = $cmd->__errors__;
is(scalar(@errors),0, "no errors in cmd");
ok($cmd->execute, "execution was successful");

my $i = Genome::InstrumentData::Imported->get(
    sample_name => $sample_name, 
    library_id => $library->id,
    import_format => 'genotype file',
);
ok($i->delete, 'deleted instrument data');

# now make it again! this time, with command line style argv
my $exit_code = Genome::InstrumentData::Command::Import::Genotype->_execute_with_shell_params_and_return_exit_code(
    "--library-name=$library_name",
    "--sample-name=$sample_name",
    "--source-data-file=$source_data_file",
    "--allocation=".$tmp_allocation->id,
    "--reference-sequence-build=" .$reference_build->name,
    "--sequencing-platform='unit test industries'",
);
is($exit_code, 0, "executed command with shell style args");
$i = Genome::InstrumentData::Imported->get(
    sample_name => $sample_name, 
    library_id => $library->id,
    import_format => 'genotype file',
);
ok($i, "found Imported instrument data")
    or die "Did not find Imported Instrument Data using sample_name = $sample_name";

my $disk = Genome::Disk::Allocation->get(owner_class_name => $i->class, owner_id => $i->id, allocator_id => -123459);

ok($disk, "found an allocation owned by the new instrument data");

my $owner_class = $disk->owner_class_name;

is($owner_class, "Genome::InstrumentData::Imported", "allocation belongs to  G::I::Imported");

is($disk->owner_id, $i->id, "allocation owner ID matches imported instrument data id");

ok(-e $i->data_directory, "output directory is present");

is($i->library_id,$library->id,"library_id matches");

my $genotype_file = $i->disk_allocations->absolute_path ."/". $sample_name . ".genotype";

ok(-s $genotype_file, "Found properly named genotype file.");


my $library2 = Genome::Library->get(name=>'Pooled_Library-2010-01-06_1');
my $sample_name2 = $library2->sample_name;


my $tmp_allocation2 = Genome::Disk::Allocation->__define__(
                                                           id => '-123460',
                                                           disk_group_name => 'info_alignments',
                                                           group_subdirectory => 'test',
                                                           mount_path => '/tmp/mount_path',
                                                           allocation_path => 'genotype_data/imported/-830002',
                                                           allocator_id => '-123460',
                                                           kilobytes_requested => 100000,
                                                           kilobytes_used => 0,
                                                           owner_id => $dummy_id-101,
                                                           owner_class_name => 'Genome::InstrumentData::Imported',
                                                       );

no warnings;
*Genome::Disk::Allocation::absolute_path = sub { return $tmp_dir };

$cmd = Genome::InstrumentData::Command::Import::Genotype->create(
    sample_name => $sample_name2,
    source_data_file => $source_data_file,
    allocation =>  $tmp_allocation2,
    define_model => 1,
    reference_sequence_build => $reference_build,
    sequencing_platform => "unit test industries",
);

ok($cmd, "constructed an import command"); 
@errors = $cmd->__errors__; 
is(scalar(@errors),0, "no errors in cmd"); 
ok($cmd->execute, "execution was successful");

$i = Genome::InstrumentData::Imported->get(  
    library_name => $sample_name2 . "-microarraylib",
    import_format => 'genotype file',
);
ok($i, "found Imported instrument data")
    or die "Did not find Imported Instrument Data using library_name = $sample_name-microarraylib";

$disk = Genome::Disk::Allocation->get(owner_class_name => $i->class, owner_id => $i->id, allocator_id => -123460);

ok($disk, "found an allocation owned by the new instrument data");

$owner_class = $disk->owner_class_name;

is($owner_class, "Genome::InstrumentData::Imported", "allocation belongs to  G::I::Imported");

is($disk->owner_id, $i->id, "allocation owner ID matches imported instrument data id");

ok(-e $i->data_directory, "output directory is present");

$genotype_file = $i->disk_allocations->absolute_path ."/". $sample_name . ".genotype";

ok(-s $genotype_file, "Found properly named genotype file.");
