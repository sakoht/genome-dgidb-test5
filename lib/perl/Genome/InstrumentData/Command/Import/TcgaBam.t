#!/usr/bin/env perl

use strict;
use warnings;

use above "Genome";

use Test::More;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}

$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = "1";
$ENV{UR_DBI_NO_COMMIT} = "1";

use_ok('Genome::InstrumentData::Command::Import::TcgaBam') or die;

UR::DataSource->next_dummy_autogenerated_id;
do {
    $UR::DataSource::last_dummy_autogenerated_id = int($UR::DataSource::last_dummy_autogenerated_id / 10);
} until length($UR::DataSource::last_dummy_autogenerated_id) < 9;
diag('Dummy ID: '.$UR::DataSource::last_dummy_autogenerated_id);
cmp_ok(length($UR::DataSource::last_dummy_autogenerated_id), '<',  9, 'dummy id is shorter than 9 chars');

my $tcga_name = "TCGA-AB-2804-03B-01W-0728-08";

my $cmd = Genome::InstrumentData::Command::Import::TcgaBam->create(
    target_region       => 'none',
    tcga_name           => $tcga_name,  
    import_source_name  => 'Broad',
    original_data_path  => '/gsc/var/cache/testsuite/data/Genome-InstrumentData--Command-Import-Bam/test.bam',
    reference_sequence_build_id => 101947881,
);
ok($cmd, "create");
$cmd->dump_status_messages(1);
ok($cmd->execute,"execute");

my $i_d = $cmd->_inst_data;
ok($i_d, 'created instrument data');
is($i_d->sequencing_platform, 'solexa', 'platform');
is($i_d->original_data_path, '/gsc/var/cache/testsuite/data/Genome-InstrumentData--Command-Import-Bam/test.bam', 'original data path');
is($i_d->user_name, Genome::Sys->username, "user name is correct");
ok($i_d->description,"description was created: ".$i_d->description);
ok($i_d->import_date, "date is set");
ok($i_d->is_paired_end, "is_paired_end is set");
is($i_d->read_count,2742092, "read_count is set");
is($i_d->fragment_count, 5484184,"fragment_count is set");
is($i_d->read_length, 50,"read_length is set");
is($i_d->base_count,274209200, "base_count is set to 274209200");
ok(-s $i_d->archive_path, "bam exists");

my $model = $cmd->_model;
ok($model, 'created model');
like($model->name, qr/TCGA-AB-2804-03B-01W-0728-08.refalign/, 'model name');
is($model->build_requested, 1, 'requested build');
is_deeply([$model->instrument_data], [$i_d], 'model inst data');

done_testing();
exit;

