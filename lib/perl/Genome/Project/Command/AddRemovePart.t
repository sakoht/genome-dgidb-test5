#! /gsc/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above 'Genome';

use Data::Dumper 'Dumper';
use Test::More;

use_ok('Genome::Project::Command::Add::Part') or die;
use_ok('Genome::Project::Command::Remove::Part') or die;

my $project = Genome::Project->create(name => '__TEST_PROJECT__');
ok($project, 'create project');
my $user = $project->parts(role => 'creator')->entity;
ok($user, 'got creator');

# add 
my $cmd = Genome::Project::Command::Add::Part->create(
    projects => [ $project ],
    class_name => 'Genome::Project',
    value => 'name=__TEST_PROJECT__',
    role => 'self',
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
my @entities = map { $_->entity } $project->parts(entity_class_name => 'Genome::Project', role => 'self');
is_deeply(\@entities, [$project], 'add project');
#ok(UR::Context->commit, 'commit');

# add value
$cmd = Genome::Project::Command::Add::Part->create(
    projects => [ $project ],
    value => 10,
    label => 'priority',
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@entities = map { $_->entity } $project->parts(entity_class_name => 'UR::Value', label => 'priority');
is_deeply(\@entities, [UR::Value->get(10)], 'add value for priority');
#ok(UR::Context->commit, 'commit');

# re add value
$cmd = Genome::Project::Command::Add::Part->create(
    projects => [ $project ],
    value => 10,
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@entities = sort { $a->id cmp $b->id } $project->entities;
is(@entities, 3, 're-add value');
#ok(UR::Context->commit, 'commit');

# remove value
$cmd = Genome::Project::Command::Remove::Part->create(
    projects => [ $project ],
    value => 10,
    label => 'priority',
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@entities = map { $_->entity } $project->parts(entity_class_name => 'UR::Value', label => 'priority');
ok(!@entities, 'remove value 10 for priority');
#ok(UR::Context->commit, 'commit');

# re add ur::object
$cmd = Genome::Project::Command::Remove::Part->create(
    projects => [ $project ],
    class_name => 'UR::Value',
    value => 10,
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@entities = sort { $a->id cmp $b->id } $project->entities;
is(@entities, 2, 're-remove value');
#ok(UR::Context->commit, 'commit');

# remove w/o finding object added
$cmd = Genome::Project::Command::Remove::Part->create(
    projects => [ $project ],
    class_name => 'Genome::Project',
    value => 'name=__TEST_PROJECT__',
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@entities = map { $_->entity } $project->parts(entity_class_name => 'Genome::Project', role => 'self');
is_deeply(\@entities, [$project], 'did not remove project w/o role');
#ok(UR::Context->commit, 'commit');

# remove object 
$cmd = Genome::Project::Command::Remove::Part->create(
    projects => [ $project ],
    class_name => 'Genome::Project',
    value => 'name=__TEST_PROJECT__',
    role => 'self',
);
ok($cmd, 'create add part command');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@entities = map { $_->entity } $project->parts(entity_class_name => 'Genome::Project', role => 'self');
ok(!@entities, 'remove project');
#ok(UR::Context->commit, 'commit');

done_testing();
exit;

