#!/usr/bin/env perl

use strict;
use warnings;

use above "Genome";
use Command;
use Test::More;

use MIME::Base64;
use Data::Dumper;


$ENV{TEST_MODE} = 1;
$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

plan tests => 4;


my $nom = Genome::Nomenclature->get(name => 'WUTGI');


my $t = UR::Context::Transaction->begin();
my $obj1 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(good_data()),
    subclass_name   => 'Genome::Sample'
);
ok($obj1, 'creating import command object');
cmp_ok($obj1->execute(), '==', 6, 'executing with good input');
$t->rollback();


$t = UR::Context::Transaction->begin();
my $obj2 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(bad_column_data()),
    subclass_name   => 'Genome::Sample'
);
eval { $obj2->execute(); };
ok($@,"executing with an invalid column in data");
$t->rollback();


$t = UR::Context::Transaction->begin();
my $obj3 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(bad_enum_data()),
    subclass_name   => 'Genome::Sample'
);
cmp_ok($obj3->execute(), '==', 5, 'executing with one bad record (enum)');


exit;



sub good_data {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,72,200,"male"
test_sample1,60,140,"female"
_DATA_
}

sub bad_column_data {
    return << "_DATA_";
sample,favorite_color,height,weight,sex
test_sample0,red,72,200,"male"
test_sample1,blue,60,140,"female"
_DATA_
}

sub bad_enum_data {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,72,200,"dude"
test_sample1,60,140,"female"
_DATA_
}



