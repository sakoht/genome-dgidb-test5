#!/usr/bin/env perl

use strict;
use warnings;

use above "Genome";
use Command;
use Test::More;
plan tests => 8;

use MIME::Base64;
use Data::Dumper;


$ENV{TEST_MODE} = 1;
$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;


my $nom = make_fake_nomenclature();

my $obj1 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(good_data()),
    subclass_name   => 'Genome::Sample',
    project_name    => 'myFakeProject0'
);
ok($obj1, 'creating import command object');
cmp_ok($obj1->execute(), '==', 6, 'executing with good input');
ok(Genome::Project->get(name => 'myFakeProject0'), 'project was created');


my $obj2 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(bad_column_data()),
    subclass_name   => 'Genome::Sample',
    project_name    => 'myFakeProject1'
);
eval { $obj2->execute(); };
ok($@,"executing with an invalid column in data (should die)");
diag($@);


my $obj3 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(bad_enum_data()),
    subclass_name   => 'Genome::Sample',
    project_name    => 'myFakeProject2'
);
cmp_ok($obj3->execute(), '==', 5, 'executing with one bad enum value');


my $obj4 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(non_unique_data()),
    subclass_name   => 'Genome::Sample',
    project_name    => 'myFakeProject3'
);
eval { $obj4->execute(); };

ok($@, 'executing with nonunique records (should die)');
diag($@);


my $obj5 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(bad_real_data()),
    subclass_name   => 'Genome::Sample',
    project_name    => 'myFakeProject4'
);
cmp_ok($obj5->execute(), '==', 5, 'executing with one bad real value');


my $obj6 = Genome::Subject::Command::Import->create(
    nomenclature_id => $nom->id,
    content         => MIME::Base64::encode_base64(good_data_with_na()),
    subclass_name   => 'Genome::Sample',
    project_name    => 'myFakeProject5'
);
cmp_ok($obj6->execute(), '==', 6, 'executing with good data and one NA');


exit;



sub good_data {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,72,200,"male"
test_sample1,60,140,"female"
_DATA_
}

sub good_data_with_na {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,"NA",200,"male"
test_sample1,60,140,"female"
_DATA_
}

sub bad_column_data {
    return << "_DATA_";
sample,favorite_color,height,weight,sex
test_sample0,red,72,200,"male"
test_sample1,blue,60,140,"female"
_DATA_
}

sub bad_enum_data {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,72,200,"dude"
test_sample1,60,140,"female"
_DATA_
}

sub non_unique_data {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,72,200,"male"
test_sample1,60,140,"female"
test_sample0,12,345,"female"
_DATA_
}

sub bad_real_data {
    return << "_DATA_";
sample,height,weight,sex
test_sample0,"tall",200,"male"
test_sample1,60,140,"female"
_DATA_
}

sub make_fake_nomenclature {

    my $n = Genome::Nomenclature->create( 
        name => 'TEST_NOMENCLATURE',
        empty_equivalent => 'NA'
    );

    Genome::Nomenclature::Field->create(
        name => 'height',
        type => 'real',
        nomenclature_id => $n->id
    );
    Genome::Nomenclature::Field->create(
        name => 'weight',
        type => 'real',
        nomenclature_id => $n->id
    );
    my $enum_field = Genome::Nomenclature::Field->create(
        name => 'sex',
        type => 'enumerated',
        nomenclature_id => $n->id,
    );
    Genome::Nomenclature::Field::EnumValue->create( nomenclature_field_id => $enum_field->id, value => 'male');
    Genome::Nomenclature::Field::EnumValue->create( nomenclature_field_id => $enum_field->id, value => 'female');

    return $n;
}

