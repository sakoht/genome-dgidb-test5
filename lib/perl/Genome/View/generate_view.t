#!/usr/bin/env perl


$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

use Data::Dumper;
use above 'Genome';
use Test::More;
plan => 3;

# same as Genome/InstrumentData.t :\
my $i = Genome::InstrumentData->get(2338813239); 
ok($i, 'found the record using for testing...ugh.');

my $v = $i->create_view( perspective => 'status', toolkit => 'xml' );
ok($v, 'create status xml view for instrument data');

$SIG{'__WARN__'} = sub {
    my ($msg) = @_;
    if ($msg =~ /Deep recursion/) {
        BAIL_OUT('Oh no the recursion is deep up in here!');
    }
    return 1;
};

my $c = $v->content;
ok($c, 'getting content from the view');


done_testing();


# why this test? because:
#
# started failing here - /gsc/scripts/opt/genome/snapshots/stable/genome-902/lib/perl
#
#commit a1c373f3514547c418e0a7c77677c9b62c6d03b1
#Author: Anthony Brummett <abrummet@genome.wustl.edu>
#Date:   Thu Apr 7 12:36:50 2011 -0500
#
#    Change the begavior of 'load' observers with autosubclassing objects
#    
#    Previously, the intent was to send a 'load' signal when the abstract parent
#    gets loaded, figure out the correct subclass, then send an 'unload' for the
#    parent, then send a 'load' for the child
#    
#    That wasn't what was happening, and it was causing infinite recursion with
#    certain Views when an encompassing view could have its generate_content()
#    triggered when an aspect's sub-view loads objects.
#    
#    The new behavior is to only send the 'load' signal for the subclassed
#    thing, and never send signals for the abstract, parent class thing
#



