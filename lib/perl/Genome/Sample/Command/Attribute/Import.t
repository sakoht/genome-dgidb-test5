#!/gsc/bin/perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";

use constant NUM_SAMPLES => 5;

use Test::More tests => 10 + NUM_SAMPLES*5;

use_ok('Genome::Sample::Command::Attribute::Import');

my @test_samples;

my $test_individual = Genome::Individual->create(
    name => 'GS_attribute_test_individual.1',
    common_name => 'GSAiti1',
);
isa_ok($test_individual, 'Genome::Individual');

for(1..NUM_SAMPLES) {
    my $test_sample = Genome::Sample->create(
        name => 'GS_attribute_import_test.' . $_,
        common_name => 'GSAit' . $_,
        source => $test_individual,
    );
    isa_ok($test_sample, 'Genome::Sample', 'created test sample ' . $_);
    push @test_samples, $test_sample;
}

#first test--straight by-id sample update
my $delimiter = Genome::Sample::Command::Attribute::Import->__meta__->property('delimiter')->default_value;
my $line_separator = "\n";

my $data_file_1 = Genome::Utility::FileSystem->create_temp_file_path;

my $data_string_1 = join($delimiter, 'sample_id', 'test_attribute_1a', 'test_attribute_1b') . $line_separator;
for my $sample (@test_samples) {
    $data_string_1 .= join($delimiter, $sample->id, 'test_value_1', 'test_value_' . $sample->id) . $line_separator;
}

Genome::Utility::FileSystem->write_file($data_file_1, $data_string_1);

my $import_command_1 = Genome::Sample::Command::Attribute::Import->create(
    file => $data_file_1,
);
isa_ok($import_command_1, 'Genome::Sample::Command::Attribute::Import', 'created import command 1');
ok($import_command_1->execute, 'executed import command 1');

for my $sample (@test_samples) {
    my $attribute = $sample->attributes(name => 'test_attribute_1a');
    isa_ok($attribute, 'Genome::Sample::Attribute', 'test_attribute_1a for sample ' . $sample->id);
    is($attribute->value, 'test_value_1', 'has expected value');
}

#second test--update all samples for an individual by-id
my $data_file_2 = Genome::Utility::FileSystem->create_temp_file_path;

my $data_string_2 = join($delimiter, 'individual_id', 'test_attribute_2a') . $line_separator;
$data_string_2 .= join($delimiter, $test_individual->id, 'test_value_2') . $line_separator;

Genome::Utility::FileSystem->write_file($data_file_2, $data_string_2);

my $import_command_2 = Genome::Sample::Command::Attribute::Import->create(
    file => $data_file_2,
);
isa_ok($import_command_2, 'Genome::Sample::Command::Attribute::Import', 'created import command 2');
ok($import_command_2->execute, 'executed import command 2');

for my $sample (@test_samples) {
    my $attribute = $sample->attributes(name => 'test_attribute_2a');
    isa_ok($attribute, 'Genome::Sample::Attribute', 'test_attribute_2a for sample ' . $sample->id);
    is($attribute->value, 'test_value_2', 'has expected value');
}

#third and fourth tests removed since names are no longer unique

#fifth test--wrong number of columns in data row
my $data_file_5 = Genome::Utility::FileSystem->create_temp_file_path;

my $data_string_5 = join($delimiter, 'individual_id', 'test_attribute_5a', 'test_attribute_5b') . $line_separator;
$data_string_5 .= join($delimiter, $test_individual->id, 'test_value_5a') . $line_separator;

Genome::Utility::FileSystem->write_file($data_file_5, $data_string_5);

my $import_command_5 = Genome::Sample::Command::Attribute::Import->create(
    file => $data_file_5,
);
isa_ok($import_command_5, 'Genome::Sample::Command::Attribute::Import', 'created import command 5');
my $ok = eval { $import_command_5->execute(); };

ok(($@ || !$ok), 'failed executing import command 5 as expected (column count mismatch)');

#sixth test--unknown id
my $data_file_6 = Genome::Utility::FileSystem->create_temp_file_path;

my $data_string_6 = join($delimiter, 'unknown_id', 'test_attribute_6a') . $line_separator;
$data_string_6 .= join($delimiter, 'unknown_id!', 'test_value_6a') . $line_separator;

Genome::Utility::FileSystem->write_file($data_file_6, $data_string_6);

my $import_command_6 = Genome::Sample::Command::Attribute::Import->create(
    file => $data_file_6,
);
isa_ok($import_command_6, 'Genome::Sample::Command::Attribute::Import', 'created import command 6');
$ok = eval { $import_command_6->execute };
ok(($@ || !$ok), 'failed executing import command 6 as expected (unknown id)');
