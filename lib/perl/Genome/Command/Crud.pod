=pod

=head1 Name

Genome::Command::Crud

=head1 Synopsis

Automatic generation of CRUD (create, list (read), update and delete) subcommands for a UR objects.

=head1 Setup Classes and Perl Script To Run Commands

=head2 Relationship.pm

package Person::Relationship;

use UR;

class Person::Relationship {
    is  => 'UR::Object',
    id_by => [
        person_id => { is => 'Number', implied_by => 'person', },
        related_id => { is => 'Number', implied_by => 'related' },
        name => { is => 'Text', },
    ],
    has => [
        person => { is => 'Person', id_by => 'person_id', },
        related => { is => 'Person', id_by => 'related_id' },
    ],
};

1;

__END__

=head2 Person.pm

package Person;

use UR;

class Person {
    is => 'UR::Object',
    has => [
        name => {
            is => 'Text',
            doc => 'The name of the person',
        },
        relationships => { 
            is => 'Person::Relationship',
            is_many => 1,
            is_optional => 1,
            reverse_as => 'person',
            doc => 'This person\'s relationships', 
        },
        friends => { 
            is => 'Person',
            is_many => 1,
            is_optional => 1,
            is_mutable => 1,
            via => 'relationships', 
            to => 'related',
            where => [ name => 'friend' ],
            doc => 'Friends of this person', 
        },
    ],
};

1;

__END__

=head2 person.pl

#! /gsc/bin/perl

use strict;
use warnings;

use UR;
use Genome::Command::Crud;
use Person;

class Person::Command {
    is => 'Command::Tree',
};

Genome::Command::Crud->init_sub_commands(
    # These options are explained below in 'Crud Config'
    target_class => 'Person',
    target_name => 'person',
    target_name_pl => 'people',
);

Person::Command->execute_with_shell_params_and_exit();

__END__

=head1 Command Structure

Each function will get a command. Under update, each property will get a command. If the relationship of the property is 'has many', there will be an add and remove command for the property.

$ person.pl --help
Sub-commands for person.pl:
 create       a thing             
 list         things               
 update  ...  properties on things 

$ person.pl update ---help
Sub-commands for person.pl update:
 friends  ...  add/remove friends     
 name          The name of the person 

$ person.pl update friends --help
Sub-commands for person.pl update friends:
 add       friend to people   
 remove    friend from people 

=head1 Crud Config

=head2 Main

=over 2

=item *
B<target_class> (required): The class of the objects to create CRUD commands.

=item *
B<target_name> (optional): The space separated name of the objects. Default is to convert the class name. Target class 'My::Thing' would be 'my thing'.

=item *
B<target_name_pl> (optional): The plural name of the objects. Default is to pluralize the target name convert the class name. Tagert name 'my thing' would be 'my things.'

=back

=head2 Command Universal

=over 2

=item *
B<do_not_init>: Do not initialize the command.

=back

=head2 Update

=over 2

=item *
B<include_only> (optional): Only include these properties.

=item *
B<only_if_null> (optional): Only allow updating of a property if it is null.

=back


