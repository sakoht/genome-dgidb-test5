BEGIN{
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use warnings;
use strict;

use Test::More; 
use above "Genome";

use_ok('Genome::Sample') or die;
use_ok('Genome::Model::GenotypeMicroarray') or die;
use_ok('Genome::Model::ReferenceAlignment') or die;
use_ok('Genome::InstrumentData::Imported') or die;

# Create test sample
my $sample = create_test_sample();
ok($sample, 'Made test sample');
isa_ok($sample, 'Genome::Sample');

# Create genotype test data
my $genotype_data = create_test_genotype_data($sample);
ok($genotype_data, 'Made test genotype data');
isa_ok($genotype_data, 'Genome::InstrumentData::Imported');

# Create ref seq build, used to make genotype model and ref align model
my $ref_seq_build = create_ref_seq_build($sample->taxon);
ok($ref_seq_build, 'Made test ref seq build');

# Create test genotype model
my $genotype_model = create_genotype_model($sample, $ref_seq_build);
ok($genotype_model, 'Made test genotype model');
isa_ok($genotype_model, 'Genome::Model::GenotypeMicroarray');
is($genotype_model->subject, $sample, 'test genotype model subject matches expected');

# Add genotype data to test model
add_instrument_data_to_model($genotype_model, $genotype_data);
ok((grep { $genotype_data->id eq $_ } $genotype_model->instrument_data_ids), 'instrument data assigned to model');

# Create test ref align model
my $ref_align_model = create_ref_align_model($sample, $ref_seq_build);
ok($ref_align_model, 'created test ref align model');
isa_ok($ref_align_model, 'Genome::Model::ReferenceAlignment');
is($ref_align_model->subject, $sample, 'ref align model has expected subject');
is($ref_align_model->subject_id, $genotype_model->subject_id, 'ref align and genotype models use same subject');

# Make sure check fails 
$genotype_data->import_format('bam');
my $genotype_check = eval { $sample->check_genotype_data($genotype_data) };
ok(!$genotype_check, 'genotype data failed check, as expected');
ok($sample->error_message =~ /Instrument data is not a \'genotype file\'/, 'got expected error message');  
$genotype_data->import_format('genotype file');
$genotype_check = eval { $sample->check_genotype_data($genotype_data) };
ok($genotype_check, 'genotype data passed check');

# Make sure check fails when sample id is changed
my $sample_2 = create_test_sample();
my $orig_library_id = $genotype_data->library_id;
my $library = create_library_from_sample($sample_2);
$genotype_data->library_id($library->id);
$genotype_check = eval { $sample->check_genotype_data($genotype_data) };
ok(!$genotype_check, 'genotype data failed check, as expected');
ok($sample->error_message =~ /Instrument data does not come from sample/, 'got expected error message');

# Change the sample back
$genotype_data->library_id($orig_library_id);
$genotype_check = eval { $sample->check_genotype_data($genotype_data) };
ok($genotype_check, 'genotype data passed check');

# Set default genotype data
my $set_rv = eval { $sample->set_default_genotype_data($genotype_data->id) };
ok($set_rv, 'Successfully set default genotype data');
is($sample->default_genotype_data_id, $genotype_data->id, 'sample default genotype data is expected value');
ok($ref_align_model->build_requested, 'build requested set on ref align model');

done_testing();

sub create_test_taxon {
    return Genome::Taxon->create(
        name => 'test taxon',
        species_name => 'human',
    );
}

sub create_test_sample {
    my $taxon = create_test_taxon();
    return Genome::Sample->create(
        name => 'test sample',
        taxon_id => $taxon->id,
    );
}

sub create_ref_align_pp {
    return Genome::ProcessingProfile::ReferenceAlignment->create(
        name => 'test pp',
        sequencing_platform => 'solexa',
        dna_type => 'genomic dna',
        read_aligner_name => 'bwa',
    );
}

sub create_ref_seq_build {
    my $taxon = shift;
    my $pp = Genome::ProcessingProfile::ImportedReferenceSequence->create(name => 'test ref seq pp');
    return unless $pp;

    my $model = Genome::Model::ImportedReferenceSequence->create(
        processing_profile_id => $pp->id,
        subject_id => $taxon->id,
        subject_class_name => $taxon->class,
        name => 'test ref seq build',
    );
    return unless $model;

    my $build = Genome::Model::Build::ImportedReferenceSequence->create(
        model_id => $model->id,
    );
    return $build;
}

sub create_ref_align_model {
    my ($sample, $ref_seq_build) = @_;

    my $pp = create_ref_align_pp();
    return unless $pp;

    return Genome::Model::ReferenceAlignment->create(
        subject_id => $sample->id,
        subject_class_name => $sample->class,
        name => 'test ref align model',
        reference_sequence_build_id => $ref_seq_build->id,
        processing_profile_id => $pp->id,
        auto_assign_inst_data => 1,
    );
}

sub make_genotype_pp {
    my %params = (
        instrument_type => 'infinium',
    );

    my @pp = Genome::ProcessingProfile::GenotypeMicroarray->get(%params);
    return $pp[-1] if @pp;

    return Genome::ProcessingProfile::GenotypeMicroarray->create(
        %params,
        name => 'test genotype pp',
    );
}

sub create_genotype_model {
    my ($sample, $ref_seq_build) = @_;
    my $pp = make_genotype_pp();
    return unless $pp;

    my $model = Genome::Model::GenotypeMicroarray->create(
        reference_sequence_build_id => $ref_seq_build->id,
        processing_profile_id => $pp->id,
        name => 'test genotype model',
        subject_id => $sample->id,
        subject_class_name => $sample->class,
    );
    return $model;
}

sub add_instrument_data_to_model {
    my ($model, $instrument_data) = @_;
    my $input = Genome::Model::Input->create(
        name => 'instrument_data',
        value_id => $instrument_data->id,
        value_class_name => $instrument_data->class,
        model_id => $model->id
    );
    return defined $input;
}

sub create_library_from_sample {
    my $sample = shift;
    return Genome::Library->create(
        sample_id => $sample->id,
        name => 'test library',
    );
}

sub create_test_genotype_data {
    my $sample = shift;
    return unless $sample;

    my $library = create_library_from_sample($sample);
    return unless $library;

    return Genome::InstrumentData::Imported->create(
        sequencing_platform => 'infinium',
        library_id => $library->id,
    );
}



