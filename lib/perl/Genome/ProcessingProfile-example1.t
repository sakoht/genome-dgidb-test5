#!/usr/bin/env perl

use strict;
use warnings;

use Test::More tests => 18;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above "Genome";
use Genome::Model;
use Genome::Model::Build;

# used for everything below which requires a name
my $tname = "test-new-processing-profile";

# create a new sample
my $s = Genome::Sample->create(name => $tname);
ok($s, "made a sample on which to test");

# create new imported instrument data
my $i = Genome::InstrumentData::Imported->create(
    sample_name => $s->name, 
    sample_id => $s->id,
    original_data_path => '/tmp/foo'
);
ok($i, "made instrument data for the sample");

# define a processing profile subclass for this pipeline
class Genome::ProcessingProfile::Foo {
    is => 'Genome::ProcessingProfile',
    has_param => [
        p1 => { doc => 'param 1' },
        p2 => { doc => 'param 2' },
    ]
};

# these key methods in the class are configured to just log that they've been run...
my ($init_model,$init_build,$execute_build) = (0,0,0);
sub Genome::ProcessingProfile::Foo::_initialize_model { $init_model = pop; 1; };
sub Genome::ProcessingProfile::Foo::_initialize_build { $init_build = pop; 1; };
sub Genome::ProcessingProfile::Foo::_execute_build { $execute_build = $_[1]; 1; };

ok(Genome::ProcessingProfile::Foo->can("get"), "defined a new class of processing profile");
ok(Genome::Model::Foo->can('get'), "the corresponding model class auto generates");
ok(Genome::Model::Build::Foo->can('get'), "the corresponding build class auto generates");

# make an initial processing profile with a given set of parameter values 
my $p = Genome::ProcessingProfile::Foo->create(
    name => $tname,
    p1 => 'value1', 
    p2 => 'value2'
);
ok($p, "made a new processing profile");

# define a model of the sample with that profile
# $p->add_model($sample) == $sample->add_model($p) == Genome::Model->create(subject => $s, processing_profile => $p);
my $m = $p->add_model(
    name                => $tname,
    subject_id          => $s->id,
    subject_class_name  => $s->class,
    subject_type        => 'sample_name',
    subject_name        => $s->name,
);
ok($m, "made a new model");
isa_ok($m,'Genome::Model::Foo',"the model is of the correct subclass");
is($init_model,$m,"model is initialized");

# add instrument data
my $a = $m->add_instrument_data_assignment(
    instrument_data => $i,
    filter_desc => '',
);
ok($a, "assigned instrument data to the model");

# add other input
my $n = $m->add_input(name => "foo", value_class_name => "UR::Value", value_id => "123");
ok($n, "added a misc input to the model");

# verify both inputs
my @mi = $m->inputs;
is(scalar(@mi),2, "found two model inputs");

# create a build
my $b = $m->add_build(data_directory => '/tmp/foo');
ok($b, "created a new build");
is($init_build,$b,"build created (initialized)");

# start it, which in our case will run it completely...
$DB::single = 1;
ok($b->start(server_dispatch => 'inline', job_dispatch => 'inline'), "build started");

# examine the build
is($execute_build,$b,"the build execution logic ran");
is($b->status,'Succeeded',"the build status is Succeeded");
ok(-d $b->data_directory, "the data directory " . $b->data_directory . " is present");

