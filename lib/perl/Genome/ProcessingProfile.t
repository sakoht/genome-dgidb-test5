#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above "Genome";

use Test::More;

use_ok('Genome::ProcessingProfile') or die;

class Genome::ProcessingProfile::Tester {
    is => 'Genome::ProcessingProfile::Staged',
    has_param => [
        assembler => { 
            is => 'Text',
            valid_values => [qw/ abyss soap velvet /],
        },
        assembler_params => {
            is => 'Text',
            is_optional => 1,
        },
    ],
};

# Prepare
class Genome::ProcessingProfile::Tester::Prepare {
    is => 'Genome::Model::Event',
};
sub Genome::ProcessingProfile::Tester::stages {
     return (qw/ prepare assemble /);
}
sub Genome::ProcessingProfile::Tester::prepare_job_classes {
     return (qw/ 
         Genome::ProcessingProfile::Tester::Prepare
         /);
}

# Assemble
class Genome::ProcessingProfile::Tester::PreAssemble {
    is => 'Genome::Model::Event',
};
class Genome::ProcessingProfile::Tester::Assemble {
    is => 'Genome::Model::Event',
};
class Genome::ProcessingProfile::Tester::PostAssemble {
    is => 'Genome::Model::Event',
};
sub Genome::ProcessingProfile::Tester::prepare_objects { return 1; }
sub Genome::ProcessingProfile::Tester::assemble_job_classes {
     return (qw/ 
         Genome::ProcessingProfile::Tester::PreAssemble 
         Genome::ProcessingProfile::Tester::Assemble 
         Genome::ProcessingProfile::Tester::PostAssemble 
         /);
}
sub Genome::ProcessingProfile::Tester::assemble_objects { return 1; }

# SUBCLASS/TYPE NAME RESOLVERS
is(
    Genome::ProcessingProfile::Tester->_resolve_type_name_for_class,
    'tester',
    '_resolve_type_for_subclass_name Genome::ProcessingProfile::Tester => tester',
);
is(
    Genome::ProcessingProfile->_resolve_type_name_for_class,
    undef, 
    '_resolve_type_for_subclass_name Genome::ProcessingProfile => undef ',
);
is(
    Genome::ProcessingProfile->_resolve_subclass_name_for_type_name('tester'),
    'Genome::ProcessingProfile::Tester',
    '_resolve_subclass_name_for_type_name tester => Genome::ProcessingProfile::Tester'
);

# CREATE
my $pp = Genome::ProcessingProfile->create(
    name => '__TEST__PP__',
    type_name => 'tester',
    assembler => 'soap',
);
ok($pp, 'create');
isa_ok($pp, 'Genome::ProcessingProfile::Tester');
is($pp->type_name, 'tester', 'Checking type_name (tester)');
is_deeply([ sort $pp->params_for_class ], [ sort qw/ append_event_steps assembler assembler_params /], 'params_for_class');
is($pp->assembler, 'soap', 'assembler');

# FAILED CREATE
my $rv = eval { # type name/subclass mismatch
    Genome::ProcessingProfile::Tester->create(
        name => '__TEST__PP__CREATE__FAIL__',
        type_name => 'not tester',
    )
};
diag($@);
ok(!$rv, "Failed as expected - create w/ invalid type name => 'not tester'");

$rv = eval { # type name unresolvable
    Genome::ProcessingProfile->create(
        name => '__TEST__PP__CREATE__FAIL__',
        assembler => 'soap',
    );
};
diag($@);
ok(!$rv, 'Create failed - can\'t resolve type_name');

ok( # w/o assembler
    !Genome::ProcessingProfile::Tester->create(
        name => '__TEST__PP__CREATE__FAIL__',
    ),
    'Failed as expected - tried to create w/o assembler',
);

ok( # w/ invalid assembler (valid values)
    !Genome::ProcessingProfile::Tester->create(
        name => '__TEST__PP__CREATE__FAIL__',
        assembler => 'invalid',
    ),
    'Failed as expected - tried to create w/ invalid assembler',
);

ok( # duplicate name and params (name is checked first)
    !Genome::ProcessingProfile::Tester->create(
        name => '__TEST__PP__',
        assembler => 'soap',
        assembler_params => 'some params',
    ),
    'Create failed as expected - pp with same name'
);

ok( # duplicate params 
    !Genome::ProcessingProfile::Tester->create(
        name => '__TEST__PP__CREATE__FAIL__',
        assembler => 'soap',
    ),
    'Create failed as expected - pp with new name and identical params',
);

ok( # duplicate params w/ undef params
    !Genome::ProcessingProfile::Tester->create(
        name => '__TEST__PP__CREATE__FAIL__',
        assembler => 'soap',
        assembler_params => undef,
    ),
    'Failed as expected - create w/ new name and identical params, one undef',
);

done_testing();
exit;

