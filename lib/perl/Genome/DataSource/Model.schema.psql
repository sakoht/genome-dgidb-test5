DROP SCHEMA IF EXISTS model CASCADE;
CREATE SCHEMA model AUTHORIZATION genome;

SELECT set_config('search_path', current_setting('search_path') || ',model', false);
ALTER USER genome SET search_path FROM current;

CREATE TABLE model.processing_profile (
    id            varchar(32) NOT NULL,
    type_name     varchar(255),
    name          varchar(255),
    subclass_name varchar(255),
    PRIMARY KEY (id)
);
CREATE INDEX processing_profile_subclass_index ON model.processing_profile(subclass_name);
CREATE INDEX processing_profile_name_index ON model.processing_profile(name);

CREATE TABLE model.processing_profile_param ( 
    processing_profile_id varchar(32) NOT NULL REFERENCES model.processing_profile(id),
    param_name            varchar(100) NOT NULL,
    param_value           varchar(1000) NOT NULL,
    PRIMARY KEY (processing_profile_id, param_name, param_value)
);

CREATE TABLE model.model (
    id                         varchar(32) NOT NULL,
    name                       varchar(255) NOT NULL,
    sample_name                varchar(255),
    processing_profile_id      varchar(32) NOT NULL REFERENCES model.processing_profile(id),
    data_directory             varchar(1000),
    comparable_normal_model_id integer,
    current_running_build_id   varchar(32),
    last_complete_build_id     varchar(32),
    user_name                  varchar(64),
    creation_date              timestamp(6),
    auto_assign_inst_data      boolean,
    auto_build_alignments      boolean,
    subject_id                 varchar(32) NOT NULL REFERENCES subject.subject(subject_id),
    subject_class_name         varchar(500) NOT NULL,
    keep                       boolean DEFAULT false,
    build_granularity_unit     varchar(20),
    build_granularity_value    integer,
    limit_inputs_to_id         varchar(1000),
    is_default                 boolean,
    subclass_name              varchar(255),
    auto_build                 boolean,
    build_requested            boolean,
    PRIMARY KEY (id)
);
CREATE INDEX model_name_index ON model.model(name);
CREATE INDEX model_processing_profile_index ON model.model(processing_profile_id);
CREATE INDEX model_subclass_index ON model.model(subclass_name);
CREATE INDEX model_subject_index ON model.model(subject_class_name, subject_id);
CREATE INDEX model_subject_id_index ON model.model(subject_id);

CREATE TABLE model.model_input (
    model_id         varchar(32) NOT NULL REFERENCES model.model(id),
    value_class_name varchar(255) NOT NULL,
    value_id         varchar(1000) NOT NULL,
    name             varchar(255) NOT NULL,
    filter_desc      varchar(100),
    PRIMARY KEY (model_id, value_class_name, value_id, name)
);
CREATE INDEX model_input_value_class_index ON model.model_input(value_class_name);
CREATE INDEX model_input_model_id_index ON model.model_input(model_id);
CREATE INDEX model_input_value_id_name_index ON model.model_input(value_id, name);

CREATE TABLE model.model_link (
    to_model_id   varchar(32) NOT NULL REFERENCES model.model(id),
    from_model_id varchar(32) NOT NULL REFERENCES model.model(id),
    role          varchar(56) NOT NULL DEFAULT 'member',
    PRIMARY KEY (to_model_id, from_model_id)
);

CREATE TABLE model.build (
    id                varchar(32) NOT NULL,
    model_id          varchar(32) NOT NULL REFERENCES model.model(id),
    data_directory    varchar(1000),
    software_revision varchar(1000),
    subclass_name     varchar(255),
    PRIMARY KEY (id)
);
CREATE INDEX build_directory_index ON model.build(data_directory);
CREATE INDEX build_model_index ON model.build(model_id);

CREATE TABLE model.build_input (
    build_id         varchar(32) NOT NULL REFERENCES model.build(id),
    value_class_name varchar(255) NOT NULL,
    value_id         varchar(1000) NOT NULL,
    name             varchar(255) NOT NULL,
    filter_desc      varchar(100),
    PRIMARY KEY (build_id, value_class_name, value_id, name)
);

CREATE TABLE model.build_link (
    to_build_id   varchar(32) NOT NULL REFERENCES model.build(id),
    from_build_id varchar(32) NOT NULL REFERENCES model.build(id),
    role          varchar(56) NOT NULL,
    PRIMARY KEY (to_build_id, from_build_id)
);

CREATE TABLE model.build_metric (
    build_id     varchar(32) NOT NULL REFERENCES model.build(id),
    metric_name  varchar(100) NOT NULL,
    metric_value varchar(1000) NOT NULL,
    PRIMARY KEY (build_id, metric_name, metric_value)
);
CREATE INDEX metric_build_id_metric_name_index ON model.build_metric(build_id, metric_name);

CREATE TABLE model.event (
    id                   varchar(32) NOT NULL,
    model_id             varchar(32),
    run_id               varchar(32),
    event_type           varchar(255) NOT NULL,
    event_status         varchar(255),
    lsf_job_id           varchar(64),
    date_scheduled       timestamp(6),
    date_completed       timestamp(6),
    user_name            varchar(64),
    ref_seq_id           varchar(64), 
    retry_count          integer,
    parent_event_id      varchar(32),
    prior_event_id       varchar(32), 
    status_detail        varchar(200),
    build_id             varchar(32),
    instrument_data_id   varchar(32),
    workflow_instance_id integer,
    PRIMARY KEY (id)
);
CREATE INDEX event_build_id_index ON model.event(build_id);
CREATE INDEX event_status_index ON model.event(event_status);
CREATE INDEX event_type_model_id_index ON model.event(event_type, model_id);
CREATE INDEX event_inst_data_index ON model.event(instrument_data_id);
CREATE INDEX event_model_id_index ON model.event(model_id);
CREATE INDEX event_prior_event_index ON model.event(prior_event_id);
CREATE INDEX event_ref_seq_index ON model.event(ref_seq_id);
CREATE INDEX event_parent_event_index ON model.event(parent_event_id);
CREATE INDEX event_run_id_index ON model.event(run_id);
CREATE INDEX event_user_name_index ON model.event(user_name);

CREATE TABLE model.event_input (
    event_id    varchar(32) NOT NULL REFERENCES model.event(id),
    param_name  varchar(100) NOT NULL,
    param_value varchar(1000) NOT NULL,
    PRIMARY KEY (event_id, param_name, param_value)
);

CREATE TABLE model.event_metric (
    event_id     varchar(32) NOT NULL REFERENCES model.event(id),
    metric_name  varchar(100) NOT NULL,
    metric_value varchar(1000),
    PRIMARY KEY (event_id, metric_name)
);

CREATE TABLE model.event_output (
    event_id    varchar(32) NOT NULL REFERENCES model.event(id),
    param_name  varchar(100) NOT NULL,
    param_value varchar(1000) NOT NULL,
    PRIMARY KEY (event_id, param_name, param_value)
);

CREATE TABLE model.model_group (
    id        varchar(32) NOT NULL,
    name      varchar(255) NOT NULL,
    user_name varchar(64),
    PRIMARY KEY (id)
);
CREATE INDEX model_group_name_index ON model.model_group(name);

CREATE TABLE model.model_group_bridge (
    group_id varchar(32) NOT NULL REFERENCES model.model_group(id),
    model_id varchar(32) NOT NULL REFERENCES model.model(id),
    PRIMARY KEY (group_id, model_id)
);

CREATE TABLE model.feature_list (
    id                varchar(32) NOT NULL,
    name              varchar(200) NOT NULL,
    source            varchar(64),
    format            varchar(64) NOT NULL,
    reference_id      varchar(32) REFERENCES model.build(id),
    subject_id        varchar(32) REFERENCES subject.subject(subject_id),
    file_id           bigint,
    file_content_hash varchar(32) NOT NULL,
    content_type      varchar(255),
    description       varchar(255),
    PRIMARY KEY (id),
    UNIQUE (name)
);
CREATE INDEX feature_list_name_index ON model.feature_list(name);
