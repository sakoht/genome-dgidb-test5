BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Temp;

# Test package for CSV files
package Genome::Data::Adaptor::Csv;
use base 'Genome::Data::Adaptor';

sub parse_next_from_file {
    my $self = shift;
    my $fh = $self->_get_fh;
    my $line = $fh->getline;
    return unless $line;
    chomp $line;
    my ($name, $seq) = split(',', $line);
    return Genome::Data::Sequence->create(sequence_name => $name, sequence => $seq);
}

sub write_to_file {
    my ($self, $seq) = @_;
    my $fh = $self->_get_fh;
    $fh->print(join(',', $seq->sequence_name(), $seq->sequence()) . "\n");
    return 1;
}

# Test package for TSV files
package Genome::Data::Adaptor::Tsv;
use base 'Genome::Data::Adaptor';

sub parse_next_from_file {
    my $self = shift;
    my $fh = $self->_get_fh;
    my $line = $fh->getline;
    return unless $line;
    chomp $line;
    my ($name, $seq) = split("\t", $line);
    return Genome::Data::Sequence->create(sequence_name => $name, sequence => $seq);
}

sub write_to_file {
    my ($self, $seq) = @_;
    my $fh = $self->_get_fh;
    $fh->print(join("\t", $seq->sequence_name(), $seq->sequence()) . "\n");
    return 1;
}

# And now the test actually starts!
package main;

use_ok('Genome::Data::Converter') or die;
use_ok('Genome::Data::Adaptor') or die;
use_ok('Genome::Data::Sequence') or die;

# Make sure test data exists, set up output files
my $test_data_dir = '/gsc/var/cache/testsuite/data/Genome-Data/';
ok(-d $test_data_dir, "test data dir exists at $test_data_dir") or die;

my $test_csv = $test_data_dir . 'test.csv';
ok(-e $test_csv, "test csv file exists at $test_csv") or die;

my $test_output_dir = '/gsc/var/cache/testsuite/running_testsuites/';
ok(-d $test_output_dir, "test output dir exists at $test_output_dir") or die;

my $output_fh = File::Temp->new(DIR => $test_output_dir, TEMPLATE => "genome-data-converter-test-tsv-XXXXXX");
my $output_file = $output_fh->filename;
unlink $output_file;

# Make converter
my $obj = eval {
    Genome::Data::Converter->create(
        from_file => $test_csv,
        from_format => 'csv',
        to_file => $output_file,
        to_format => 'tsv',
        foo => 'bar',
    );
};
my $error = $@;
ok($@ =~ 'Extra parameters', 'converter create fails when given extra params');

$obj = Genome::Data::Converter->create(
    from_file => $test_csv,
    from_format => 'csv',
    to_file => $output_file,
    to_format => 'tsv',
);
ok($obj, 'successfully made converter object');

# Check accessors
is($obj->from_format, 'csv', 'from_format accessor works');
is($obj->from_file, $test_csv, 'from_file accessor works');
is($obj->to_format, 'tsv', 'to_format accessor works');
is($obj->to_file, $output_file, 'to_file accessor works');

# Make sure reader/writer can be created
ok($obj->_from_reader(), 'able to resolve reader for existing csv file');
ok($obj->_to_writer(), 'able to resolve writer for target file');

# Convert everything
ok($obj->convert_all, "successfully converted all lines in $test_csv into new format in $output_file");
$obj->_to_writer->data_adaptor->_get_fh->close; # To flush output to the file

# Make readers for both files, makes sure sequences match up between the two
my $csv_reader = Genome::Data::IO::Reader->create(
    file => $test_csv,
    format => 'csv',
);
ok($csv_reader, 'created csv reader');

my $tsv_reader = Genome::Data::IO::Reader->create(
    file => $output_file,
    format => 'tsv'
);
ok($tsv_reader, 'created tsv reader');

while (my $csv_seq = $csv_reader->next()) {
    my $tsv_seq = $tsv_reader->next();
    ok($tsv_seq, 'got tsv seq');
    ok($tsv_seq->sequence_name eq $csv_seq->sequence_name, "sequence name for both sequences is " . $csv_seq->sequence_name);
    ok($tsv_seq->sequence eq $csv_seq->sequence, "sequence string for both sequences is the same");
}

ok(!$csv_reader->next(), 'csv reader exhausted');
ok(!$tsv_reader->next(), 'tsv reader exhausted');

done_testing();



