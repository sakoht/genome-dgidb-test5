#!/gsc/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use_ok('Genome::Data::Variant::AnnotatedVariant') or die;

my $obj = eval { Genome::Data::Variant::AnnotatedVariant->create(foo => 'bar') };
my $error = $@;
ok($error =~ /Extra parameters/, 'create fails when given extra parameters');

my $chrom = 1;
my $start = 1234;
my $end = 1234;
my $id = "rs1234";
my $reference_allele = 'A';
my @alt_alleles = qw(C G TA);
my $qual = 0.00;
my %annotation1;
%annotation1 = (
    gene_name => "foo",
    transcript_name => "bar",
    trv_type => "coding",
    c_position => "c.234A>T",
    amino_acid_change => "p.R34T",
    ucsc_cons => "0.02",
    domain => "bad",
    all_domains => [qw(domain1 domain2 bad)],
);
my %annotation2; 
%annotation2 = (
    gene_name => "foo",
    transcript_name => "bar2",
    trv_type => "coding",
    c_position => "c.234A>T",
    amino_acid_change => "p.R34T",
    ucsc_cons => "0.02",
    domain => "bad",
    all_domains => [qw(domain1 domain2 bad domain3)],
);
$obj = Genome::Data::Variant::AnnotatedVariant->create(
    chrom => $chrom,
    start => $start,
    end => $end,
    id => $id,
    reference_allele => $reference_allele,
    alt_alleles => \@alt_alleles,
    qual => $qual,
    transcript_annotations => [\%annotation1, \%annotation2],
);

ok($obj, 'created object');
ok($obj->isa('Genome::Data::Variant::AnnotatedVariant'), 'object is a Genome::Data::Variant::AnnotatedVariant');

is($obj->chrom, $chrom, 'chrom matches');
is($obj->start, $start, 'start matches');
is($obj->end, $end, 'end matches');
is($obj->id, $id, 'id matches');
is($obj->reference_allele, $reference_allele, 'reference_allele matches');
is($obj->alt_alleles->[0], $alt_alleles[0], 'first alt allele matches');
is($obj->alt_alleles->[1], $alt_alleles[1], 'second alt allele matches');
is($obj->alt_alleles->[2], $alt_alleles[2], 'third alt allele matches');
is($obj->qual, $qual, 'qual matches');

is($obj->transcript_annotations->[0]->{transcript_name}, "bar", 'first transcript name matches');
is($obj->transcript_annotations->[1]->{transcript_name}, "bar2", 'second transcript name matches');

done_testing();
