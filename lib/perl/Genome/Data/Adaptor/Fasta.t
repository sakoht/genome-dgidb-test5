BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Temp;

use_ok('Genome::Data::Adaptor') or die;
use_ok('Genome::Data::Adaptor::Fasta') or die;

# Test data setup
my $test_data_dir = '/gsc/var/cache/testsuite/data/Genome-Data/';
ok(-d $test_data_dir, "test data dir exists at $test_data_dir") or die;

my $test_fasta = $test_data_dir . 'test.fasta';
ok(-e $test_fasta, "test fasta file exists at $test_fasta") or die;

my $test_output_dir = '/gsc/var/cache/testsuite/running_testsuites/';
ok(-d $test_output_dir, "test output dir exists at $test_output_dir") or die;

my $output_fh = File::Temp->new(
    TEMPLATE => 'data-adaptor-fasta-XXXXXX',
    DIR => $test_output_dir,
);
my $output_file = $output_fh->filename;

# Create adaptor object
my $read_adaptor = Genome::Data::Adaptor::Fasta->create(
    file => $test_fasta,
    mode => 'r',
);
ok($read_adaptor, 'created adaptor object');

# Check initial state of adaptor
is($read_adaptor->sequence_number, 0, 'sequence number starts at 0');
is($read_adaptor->current_sequence, undef, 'no current sequence');

# Parse sequences
my $count = 0;
my @seqs;
while (my $sequence = $read_adaptor->parse_next_from_file) {
    $count++;
    ok($sequence->isa('Genome::Data::Sequence'), 'created sequence object');
    is($read_adaptor->current_sequence->sequence_name, $sequence->sequence_name, 'current sequence name matches expected');
    is($read_adaptor->sequence_number, $count, 'sequence count matches expected');
    push @seqs, $sequence;
}

my $total_sequences = 5; # Number of sequences in test.fasta
is($read_adaptor->sequence_number, $total_sequences, 'number of parsed sequences matches expected');

# Write sequences to temp file
my $write_adaptor = Genome::Data::Adaptor::Fasta->create(
    file => $output_file,
    mode => 'w',
);
ok($write_adaptor, 'created fasta adaptor in write mode');

for my $sequence (@seqs) {
    $write_adaptor->write_to_file($sequence);
    ok($write_adaptor->current_sequence->sequence_name eq $sequence->sequence_name, 'current sequence matches expected');
}

is($write_adaptor->sequence_number, $total_sequences, 'number of written sequences matches expected');

# Now, read the just-written sequences and make sure they match originals
my $another_read_adaptor = Genome::Data::Adaptor::Fasta->create(
    file => $output_file,
    mode => 'r',
);
ok($another_read_adaptor, 'successfully created another read adaptor for fasta');

my @new_seqs;
while (my $sequence = $another_read_adaptor->parse_next_from_file) {
    push @new_seqs, $sequence;
}

while (my $new_seq = shift @new_seqs) {
    my $old_seq = shift @seqs;
    ok($old_seq, 'got original sequence ' . $old_seq->sequence_name);
    is($old_seq->sequence_name, $new_seq->sequence_name, 'sequence name matches');
    is($old_seq->sequence, $new_seq->sequence, 'sequence strings match');
}

done_testing();






