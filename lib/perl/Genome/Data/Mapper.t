#!/gsc/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

# Create test package so we can instantiate
package Genome::Data::Mapper::Test;
use base 'Genome::Data::Mapper';

# Test Genome::Data types
package Genome::Data::TestVariant1;
use base 'Genome::Data';

sub create {
    my $class = shift;
    my $self = {};
    bless ($self, $class);
    return $self;
}

package Genome::Data::TestVariant2;
use base 'Genome::Data';

sub create {
    my $class = shift;
    my $self = {};
    bless ($self, $class);
    return $self;
}

#Package that contains test logic
package main;

use_ok('Genome::Data::Mapper') or die;

# Test create method

my $obj = eval {
    Genome::Data::Mapper::Test->create()
};

my $error = $@;
ok($error =~ /required from and to formats/, 'failed to create Mapper without specifying from- and to-formats');

my $obj = eval {
    Genome::Data::Mapper::Test->create('Genome::Data::TestVariant1',
                                       'Genome::Data::TestVariant2')
};

ok($obj, 'created object successfully');
ok($obj->isa('Genome::Data::Mapper::Test'), 'object is a Genome::Data::Mapper::Test');
ok($obj->isa('Genome::Data::Mapper'), 'object is a Genome::Data::Mapper');

done_testing();
