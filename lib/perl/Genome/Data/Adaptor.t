#!/gsc/bin/perl

use strict;
use warnings;

use File::Temp;
use Test::More;
use above "Genome";

# Create test package so we can instantiate 
package Genome::Data::Adaptor::Test;
use base 'Genome::Data::Adaptor';

# Package that contains test logic
package main;

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use_ok('Genome::Data::Adaptor') or die;

# Test files
my $test_dir = '/gsc/var/cache/testsuite/running_testsuites/';
ok(-d $test_dir, "test data dir exists at $test_dir") or die;

my $temp_fh = File::Temp->new(TEMPLATE => 'adaptor-test-XXXXXX', DIR => $test_dir);
my $temp_file = $temp_fh->filename;
ok(-e $temp_file, "temp file exists at $temp_file") or die;

my $missing_fh = File::Temp->new(TEMPLATE => 'adaptor-test-XXXXXX', DIR => $test_dir);
my $missing_file = $missing_fh->filename;
$missing_fh->close;
unlink $missing_file;

# Creating test object
my $test_obj = {};
bless($test_obj, 'Genome::Data::Adaptor');
ok($test_obj->isa('Genome::Data::Adaptor'), 'created test object of type Genome::Data::Adaptor') or die;

# Testing file method
ok(!$test_obj->file(), 'file accessor returns undef, as expected');

my $rv = eval { $test_obj->file($missing_file) };
my $error = $@;
ok($error =~ /No file found/, 'trying to set file to nonexistant paths fails, as expected');

$rv = $test_obj->file($temp_file);
ok($rv eq $temp_file, 'return value matches input file');
ok($test_obj->file() eq $temp_file, 'accessor returns expected file');

# Testing access_mode method
ok(!$test_obj->access_mode, 'access mode not yet set');
$rv = $test_obj->access_mode('r');
is($rv, 'r', 'access_mode accessor returns expected value');
$rv = eval { $test_obj->access_mode('w') };
$error = $@;
ok($error =~ /Can only set mode once/, 'trying to reset mode fails, as expected');

# Testing parse_next_from_file method
$rv = eval { $test_obj->parse_next_from_file };
$error = $@;
ok($error =~ /not implemented/, 'calling parse_next_from_file on Genome::Data::Adaptor fails, as expected');

# Testing write_to_file method
$rv = eval { $test_obj->write_to_file };
$error = $@;
ok($error =~ /not implemented/, 'calling write_to_file on Genome::Data::Adaptor fails, as expected');

# Testing _get_fh method
$rv = $test_obj->_get_fh;
ok($rv->isa('IO::File'), 'got back a file handle');

$test_obj->{_file} = $missing_file;
ok($test_obj->_get_fh, '_get_fh still succeeds when file set to nonexistant path due to caching');

delete $test_obj->{_fh};
$rv = eval { $test_obj->_get_fh };
$error = $@;
ok($error =~ /Could not create file handle/, 'creating file handle with missing file fails');

# Testing create method
my $obj = eval {
    Genome::Data::Adaptor::Test->create()
};
$error = $@;
ok($error =~ /requires a file/, 'failed to create Adaptor without specifying a file');

$obj = eval {
    Genome::Data::Adaptor::Test->create(
        file => $missing_file,
    )
};
$error = $@;
ok($error =~ /No file found/, 'failed to create Adaptor without a valid file');
$obj = eval {
    Genome::Data::Adaptor::Test->create(
        file => $temp_file,
    )
};
ok($obj, 'created object successfully');
ok($obj->isa('Genome::Data::Adaptor::Test'), 'object is a Genome:Data::Adaptor::Test');
ok($obj->isa('Genome::Data::Adaptor'), 'object is a Genome::Data::Adaptor');
is($obj->access_mode, 'r', 'access mode defaults to r');

done_testing();






