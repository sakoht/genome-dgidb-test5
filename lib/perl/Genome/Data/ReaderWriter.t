use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Temp;

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

# Test packages, useful for creating dummy objects
package Genome::Data::TestReader;
use base 'Genome::Data::ReaderWriter';

sub access_mode { return 'test' };

package Genome::Data::Adaptor::Test;
use base 'Genome::Data::Adaptor';

# Test logic below!
package main;

use_ok('Genome::Data::ReaderWriter') or die;
use_ok('Genome::Data::Adaptor') or die;

# Test file and dir setup
my $test_dir = '/gsc/var/cache/testsuite/running_testsuites/';
ok(-d $test_dir, "test dir exists at $test_dir") or die;

my $temp_fh = File::Temp->new(
    TEMPLATE => 'reader-writer-XXXXXX',
    DIR => $test_dir,
);
my $temp_file = $temp_fh->filename;

my $missing_fh = File::Temp->new(
    TEMPLATE => 'reader-writer-XXXXXX',
    DIR => $test_dir,
);
my $missing_file = $missing_fh->filename;
$missing_fh->close;
unlink $missing_file;

# Make dummy reader object
my $test_reader_obj = {};
bless($test_reader_obj, 'Genome::Data::TestReader');
ok($test_reader_obj, 'created test object');
ok($test_reader_obj->isa('Genome::Data::TestReader'), 'test object is a test reader');
ok($test_reader_obj->isa('Genome::Data::ReaderWriter'), 'test object is also a reader writer');

# Test _infer_adaptor_class_from_format
my $rv = eval { $test_reader_obj->_infer_adaptor_class_from_format() };
my $error = $@;
ok($error =~ /Not given format/, 'fail to infer class without format, as expected');

$rv = eval { $test_reader_obj->_infer_adaptor_class_from_format('Blah') };
$error = $@;
ok($error =~ /is not a Genome::Data::Adaptor/, 'providing format that does not correspond to a class fails as expected');

$rv = $test_reader_obj->_infer_adaptor_class_from_format('Test');
is($rv, 'Genome::Data::Adaptor::Test', 'inferred class matches expected value');

# Test _init_adaptor method
$rv = eval { $test_reader_obj->_init_adaptor(undef, 'Test') };
$error = $@;
ok($error =~ /requires a file/, 'fail to init adaptor when not given a file, as expected');

$rv = eval { $test_reader_obj->_init_adaptor($temp_file, 'Blah') };
$error = $@;
ok($error =~ /is not a Genome::Data::Adaptor/, 'fail to init adaptor when given crappy format');

$rv = eval { $test_reader_obj->_init_adaptor($temp_file) };
$error = $@;
ok($error =~ /Not given format/, 'fail to init adaptor when not given format');

$rv = $test_reader_obj->_init_adaptor($temp_file, 'Test');
ok($rv, '_init_adaptor returned an adaptor');
ok($rv->isa('Genome::Data::Adaptor'), 'returned object is an adaptor');
ok($rv->isa('Genome::Data::Adaptor::Test'), 'returned object is the test adaptor class');

# Test data adaptor accessor
$rv = $test_reader_obj->data_adaptor();
ok($rv->isa('Genome::Data::Adaptor::Test'), 'accessor returns data adaptor object');

# Test access_mode method
$rv = $test_reader_obj->access_mode();
is($rv, 'test', 'access mode is test, as expected');

# Test create method
my $obj = eval { Genome::Data::TestReader->create() };
$error = $@;
ok($error =~ /No file provided/, 'fail to create test reader without a file, as expected');

$obj = eval { Genome::Data::TestReader->create(file => $temp_file) };
$error = $@;
ok($error =~ /No format provided/, 'fail to create test reader without a format');

$obj = eval { Genome::Data::TestReader->create(file => $temp_file, format => 'Test') };
ok($obj, 'created object successfully');
ok($obj->isa('Genome::Data::TestReader'), 'created object is a TestReader');
ok($obj->isa('Genome::Data::ReaderWriter'), 'created object is a ReaderWriter');

done_testing();
