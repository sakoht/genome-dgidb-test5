#!/usr/bin/env perl
use strict;
use warnings;

use above "Genome";

use Data::Dumper 'Dumper';
use Test::More;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

use_ok('Genome::PopulationGroup') or die;

my $pg = make_test_pop_group();
ok($pg, 'created pg');
isa_ok($pg, 'Genome::PopulationGroup');
isa_ok($pg, 'Genome::Subject');
is($pg->subject_type, 'population group', 'subject type is population group');

my $indiv = make_test_individual();
ok($indiv, 'made test indiv');
isa_ok($indiv, 'Genome::Individual');
ok($pg->add_members($indiv), 'added members to group');

my @members = $pg->members;
ok(@members == 1, 'only found one member of group, as expected');
ok($members[0]->id eq $indiv->id, 'only member is test individual');

$pg->add_members($indiv);
@members = $pg->members;
ok(@members == 1, 'only found one member of group after trying to add same individual twice');

my $other_indiv = make_test_individual();
ok($other_indiv, 'got test indiv');
isa_ok($other_indiv, 'Genome::Individual');
ok($pg->add_members($other_indiv), 'added another individual to group');
@members = $pg->members;
ok(@members == 2, 'found two individual in pop group, as expected');

my $other_pg = make_test_pop_group(members => [$indiv, $other_indiv]);
ok($other_pg, 'made another pop group');
my @other_members = $other_pg->members;
ok(@other_members == 2, 'both individuals added to new group');
ok($other_pg->member_hash eq $pg->member_hash, 'member hashes of two groups match');

my @others = $other_pg->existing_population_groups_with_hash($other_pg->member_hash);
ok(@others == 1, 'found one other group with the same hash');
ok($others[0]->id eq $pg->id, 'other group with the same member hash is test group, as expected');

$other_pg->remove_members($other_indiv);
@other_members = $other_pg->members;
ok(@other_members == 1, 'removed one individual from group');
ok($other_pg->member_hash ne $pg->member_hash, 'member hashes no longer match, as expected');

my $commit = eval{ UR::Context->commit; };
ok($commit, 'commit');

done_testing();
exit();

sub make_test_pop_group {
    my %params = @_;
    my $pg = Genome::PopulationGroup->create(
        name => 'Genome Center',
        description => 'The peeps of the WashU GC',
        %params,
    );
    return $pg;
}

sub make_test_individual {
    my $i = Genome::Individual->create(
        name => 'test indiv',
        description => 'test indiv',
    );
    return $i;
}
