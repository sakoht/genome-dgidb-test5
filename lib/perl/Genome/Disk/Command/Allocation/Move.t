#!/usr/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use_ok('Genome::Disk::Command::Allocation::Move') or die;
use_ok('Genome::Disk::Allocation') or die;

my $volume = Genome::Disk::Volume->create(
    hostname => 'test',
    physical_path => 'test',
    mount_path => '/gscmnt/foo',
    disk_status => 'active',
    can_allocate => 1,
    total_kb => 1000,
    unallocated_kb => 1000,
);
ok($volume, 'created test volume');

my $other_volume = Genome::Disk::Volume->create(
    hostname => 'test',
    physical_path => 'test',
    mount_path => '/gscmnt/bar',
    disk_status => 'active',
    can_allocate => 1,
    total_kb => 1000,
    unallocated_kb => 1000,
);
ok($other_volume, 'created another test volume');

my $allocation = Genome::Disk::Allocation->create(
    disk_group_name => 'info_apipe',
    allocation_path => 'command/allocation/deallocate/test',
    kilobytes_requested => 100,
    owner_class_name => 'UR::Value',
    owner_id => 'test',
);
ok($allocation, 'created test allocation');

my $cmd = Genome::Disk::Command::Allocation::Move->create(
    allocations => [$allocation],
    target_volume => $other_volume,
);
ok($cmd, 'created move command successfully');
ok($cmd->execute, 'executed command');

is($allocation->volume->id, $other_volume->id, 'allocation successfully moved to other volume');

done_testing();



