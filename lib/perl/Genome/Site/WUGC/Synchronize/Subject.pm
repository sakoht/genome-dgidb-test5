package Genome::Site::WUGC::Synchronize::Subject;

use strict;
use warnings;
use Genome;
use Carp 'confess';

my $low = 10_000;
my $high = 100_000;
UR::Context->object_cache_size_highwater($high);
UR::Context->object_cache_size_lowwater($low);

class Genome::Site::WUGC::Synchronize::Subject {
    is => 'Genome::Command::Base',
    has_optional => [
        report_file => {
            is => 'FilePath',
            doc => 'If provided, extra information is recorded in this file'
        },
        show_cache => {
            is => 'Boolean',
            default => 0,
            doc => 'If set, a report of cached objects is periodically printed',
        },
        _report => {
            is_transient => 1,
            doc => 'Contains hashref to report generated by the execution of this tool',
        },
    ],
};

# Maps new classes to old classes. Abstract classes should not be included here because 
# it can lead to some attributes not being copied over.
sub objects_to_sync {
    return (
        #'Genome::InstrumentData::454' => 'Genome::Site::WUGC::InstrumentData::454',
        #'Genome::InstrumentData::Sanger' => 'Genome::Site::WUGC::InstrumentData::Sanger',
        'Genome::InstrumentData::Solexa' => 'Genome::Site::WUGC::InstrumentData::Solexa',
        #'Genome::Individual' => 'Genome::Site::WUGC::Individual',
        #'Genome::PopulationGroup' => 'Genome::Site::WUGC::PopulationGroup',
        #'Genome::Taxon' => 'Genome::Site::WUGC::Taxon',
        #'Genome::Sample' => 'Genome::Site::WUGC::Sample',
    );
}

# For each pair of classes above, determine which objects exist in both the old and new schemas and
# copy the old objects into the new schema and report the new objects that don't exist in the old schema
sub execute {
    my $self = shift;

    # Stores copied and missing IDs for each type
    my %report;

    my %types = $self->objects_to_sync;
    for my $new_type (sort keys %types) {
        my $old_type = $types{$new_type};

        $self->status_message("\nSyncing $new_type and $old_type");

        my $new_meta = $new_type->__meta__;
        confess "Could not get meta object for $new_type" unless $new_meta;
        my $new_attributes = $self->get_class_attributes($new_meta);
        confess "Could not get attributes for $new_type" unless $new_attributes;

        $self->status_message("Creating iterators...");
        my $new_iterator = $new_type->create_iterator;
        my $old_iterator = $old_type->create_iterator;

        my $created_objects = 0;
        my $seen_objects = 0;

        # The rows in the old/new tables have the same IDs. UR sorts these objects by their
        # IDs internally, so simply iterating over old/new objects and checking the IDs is
        # enough to determine if an object is missing.
        $self->status_message("Iterating over all objects and copying as needed");
        my $new_object = $new_iterator->next;
        my $old_object = $old_iterator->next;

        while ($new_object or $old_object) {
            $seen_objects++;
            my $object_created = 0;
            my $new_id = $new_object->id if $new_object;
            my $old_id = $old_object->id if $old_object;

            # Old iterator exhausted, record IDs of objects in new table but not in the old. In the case of
            # instrument data, this means the data may have been expunged. In other cases, apipe may need to know.
            if ($new_object and not $old_object) {
                push @{$report{$new_type}{'missing'}}, $new_id;
            }
            # New iterator exhausted, so copy any old objects still remaining.
            elsif ($old_object and not $new_object) {
                $self->copy_object($old_object, $new_type, $new_attributes);
                $created_objects++;
                $object_created = 1;
                push @{$report{$new_type}{'copied'}}, $old_id;
                $old_object = $old_iterator->next;
            }
            else {
                # If IDs are equal, iterate both old and new and continue
                if ($new_id eq $old_id) {
                    $new_object = $new_iterator->next;
                    $old_object = $old_iterator->next;
                }
                # If new ID is less than old ID, then we are missing an old object (since the iterator skipped over several)
                elsif ($new_id lt $old_id) {
                    push @{$report{$new_type}{'missing'}}, $new_id;
                    $new_object = $new_iterator->next;
                }
                # Old ID is less than new ID, so a new object needs to be created
                else {
                    $self->copy_object($old_object, $new_type, $new_attributes);
                    $created_objects++;
                    $object_created = 1;
                    push @{$report{$new_type}{'copied'}}, $old_id;
                    $old_object = $old_iterator->next;
                }
            }
            
            print STDERR "Looked at $seen_objects objects, created $created_objects\r";

            if ($object_created) {
                if ($created_objects % 1000 == 0) {
                    confess 'Could not commit!' unless UR::Context->commit;
                    # TODO Add unload logic here to clear out cache
                }

                # It's sometimes useful to see what's in the UR object cache
                if ($self->show_cache) {
                    for my $type (sort keys %$UR::Context::all_objects_loaded) {
                        my $count = scalar keys %{$UR::Context::all_objects_loaded->{$type}};
                        $self->status_message("$type : $count");
                    }
                }
            }
        }
        print STDERR "\n";
    }

    # If requested, write a file that contains the info in the report hash
    if (defined $self->report_file) {
        $self->status_message("Generating report");
        if (-e $self->report_file) {
            unlink $self->report_file;
            $self->status_message("Removing existing report at " . $self->report_file);
        }

        my $fh = IO::File->new($self->report_file, 'w');
        if ($fh) {
            for my $type (sort keys %report) {
                $fh->print("*** Type $type ***\n");
                for my $operation (qw/ copied missing /) {
                    $fh->print(ucfirst $operation . "\n");
                    $fh->print(join("\n", @{$report{$type}{$operation}}) . "\n");
                }
            }
            $fh->close;
        }
        else {
            $self->warning_message("Could not create file handle for report file " . $self->report_file . ", not generating report");
        }
    }
    
    $self->_report(\%report);

    return 1;
}

# Get property names for all properties of the supplied class
sub get_class_attributes {
    my ($self, $meta) = @_;
    my @attributes = grep { $_ !~ /^_/ } map { $_->property_name } $meta->properties;
    return \@attributes;
}

# Given an object, a class, and a list of properties of the new class, create a new object
sub copy_object {
    my ($self, $original_object, $new_object_class, $new_object_attributes) = @_;
    
    # TODO Is there a better way to do this?
    my $method_base = lc $new_object_class;
    $method_base =~ s/::/_/g;

    # Some objects require that certain criteria be met before a new object is created
    my $valid_method_name = $method_base . '_is_valid';
    if ($self->can($valid_method_name)) {
        return 1 unless $self->$valid_method_name($original_object);
    }

    # Some classes may require extra parameters be passed to create or some attributes from the original
    # object be overridden.
    my $extra_method_name = $method_base . '_extra_params';
    my %extra_params;
    if ($self->can($extra_method_name)) {
        %extra_params = $self->$extra_method_name($original_object);
    }

    my %attributes;
    for my $new_attribute (@$new_object_attributes) {
        $attributes{$new_attribute} = $original_object->{$new_attribute} if defined $original_object->{$new_attribute}
    }

    # TODO Need to figure out a way to create the object without indirect properties, and then create indirect properities
    # (such as attributes) manually afterward, which keeps UR from having to do a lot of work to create them automatically.
    my $object = eval { $new_object_class->create(%attributes, id => $original_object->id, %extra_params) };
    confess "Could not create new object of type $new_object_class based on object of type " .
        $original_object->class . " with id " . $original_object->id . ":\n$!" unless $object;

    return 1;
}

# These methods check if the original object is valid. If not, a new object is not created
sub genome_instrumentdata_sanger_is_valid {
    my ($self, $old_object) = @_;
    return 0 unless defined $old_object->library_id or defined $old_object->library_name or defined $old_object->library_summary_id;

    my %params;
    if (defined $old_object->library_id) {
        $params{id} = $old_object->library_id;
    }
    elsif (defined $old_object->library_name) {
        $params{name} = $old_object->library_name;
    }
    else {
        $params{id} = $old_object->library_summary_id;
    }
    
    my $library = Genome::Library->get(%params);
    return 0 unless $library;

    return 1;
}

# These methods add extra parameters to object creation, depending on class
sub genome_populationgroup_extra_params {
    my ($self, $old_object) = @_;
    my @member_ids = map { $_->id } $old_object->members;
    my %extra;
    $extra{member_ids} = \@member_ids;
    return %extra;
}

sub genome_sample_extra_params {
    my ($self, $old_object) = @_;
    my @attributes = $old_object->attributes;
    my %extra;
    for my $attribute (@attributes) {
        $extra{$attribute->name} = $attribute->value;
    }

    # Unload UR::Object::View::Aspect, which for whatever reason accumulates during sync and
    # can cause the cache to be filled with unprunable objects
    UR::Object::View::Aspect->unload;

    return %extra;
}

sub genome_instrumentdata_sanger_extra_params { 
    my ($self, $old_object) = @_;
    my %extra = $self->genome_instrumentdata_extra_params($old_object);
    # Sanger instrument data can resolve a library in lots of different ways, try them all here
    # and record the library name and library id.
    unless (exists $extra{library_id}) {
        my $library;
        if (defined $old_object->library_name) {
            $library = Genome::Library->get(name => $old_object->library_name);
        }
        elsif (defined $old_object->library_summary_id) {
            $library = Genome::Library->get($old_object->library_summary_id);
        }
        confess 'Could not determine library for sanger instrument data ' . $old_object->id unless $library;

        $extra{library_name} = $library->name;
        $extra{library_id} = $library->id;
    }
    return %extra;
}

sub genome_instrumentdata_454_extra_params { 
    my ($self, $old_object) = @_;
    my %extra = $self->genome_instrumentdata_extra_params($old_object);
    delete $extra{full_path} if exists $extra{full_path};

    # TODO Need to talk to Scott about how to go about dumping SFF files. Currently, this info is stored in a
    # LIMS table and dumped to the filesystem as an SFF file on demand, see Genome::InstrumentData::454->sff_file.
    # The sff_file method uses GSC::* objects and will need to be moved to Genome/Site/WUGC. To accomplish this, 
    # we can either dump all SFF files from the db and add the dumping logic here in the sync tool, or we can forego
    # the mass dumping and do it manually as needed (it would still be done here as the data is synced).
    
    return %extra;
}

sub genome_instrumentdata_solexa_extra_params { shift->genome_instrumentdata_extra_params(shift) };

sub genome_instrumentdata_extra_params {
    my ($self, $old_object) = @_;
    my @attributes = $old_object->attributes;
    my %extra;
    for my $attribute (@attributes) {
        # If a sample parameter is included in create, UR will attempt to go from sample to library (via
        # all the indirect properties defined on instrument data). Since a sample has multiple libraries,
        # trying to resolve a single library will fail. Library id is included for all instrument data,
        # there's no need to include sample data.
        next if grep { $attribute->property_name eq $_ } qw/ sample_name sample_id /;
        $extra{$attribute->property_name} = $attribute->value;
    }

    # Subclass name should be Genome::InstrumentData::*, not Genome::Site::WUGC::InstrumentData*
    my $subclass_name = $old_object->subclass_name;
    $subclass_name =~ s/Site::WUGC:://;
    $extra{subclass_name} = $subclass_name;

    return %extra;
}

1;

