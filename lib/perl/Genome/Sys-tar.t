#!/usr/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Archive::Tar;
use File::Basename;

use_ok('Genome::Sys') or die;

# Set up test data

my $test_base_dir = '/gsc/var/cache/testsuite/running_testsuites';
$ENV{TMPDIR} = $test_base_dir;

my $test_dir = Genome::Sys->create_temp_directory;
ok(-d $test_dir, "created test directory at $test_dir");

my $other_test_dir = Genome::Sys->create_temp_directory;
ok(-d $other_test_dir, "created another test directory at $other_test_dir");

my @files = qw/ a.out b.out c.out d.blah e.blah /;
for my $file (@files) {
    my $path = join('/', $test_dir, $file);
    system("touch $path");
    ok(-e $path, "created test file at $path");
}

# Test tarring

my $pattern = join('/', $test_dir, '*.out');
my $tar_path = join('/', $other_test_dir, 'test.tar');
my $rv = Genome::Sys->tar(
    tar_path => $tar_path, 
    input_directory => $test_dir, 
    input_pattern => "*.out"
);
ok(-e $tar_path, "created tar file at $tar_path");

my $output = `tar -tf $tar_path`;
my @tar_files = map { chomp $_; basename($_) } split("\n", $output);
for my $file (@files) {
    if ($file =~ /\.out$/) {
        ok((grep { $file eq $_ } @tar_files), "file $file exists in tarball, as expected");
    }
    else {
        ok(not(grep { $file eq $_ } @tar_files), "file $file is not in tarball, as expected");
    }
}

# Now test untarring

$rv = Genome::Sys->untar(
    tar_path => $tar_path, 
    target_directory => $other_test_dir,
    delete_tar => 1
);
ok($rv, "successfully executed untar");
ok(!-e $tar_path, 'tar file has been deleted');
for my $file_path (glob("$other_test_dir/*")) {
    my $file = basename($file_path);
    ok((grep { $_ eq $file } @files), "file $file found in original list of test files");
    ok($file =~ /\.out$/, "file has expected suffix");
}

done_testing();




