#!/usr/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use_ok('Genome::Sys::User::Role') or die;
use_ok('Genome::Sys::User::RoleMember') or die;
use_ok('Genome::Sys::User') or die;

no warnings 'redefine';
*Genome::Sys::current_user_is_admin = sub { return 1 };
use warnings;

my $test_role_name = 'testing123';

my $role = Genome::Sys::User::Role->create(
    name => $test_role_name,
);
ok($role, 'able to create role with just a name');

# Create dupliate, make sure it returns an error from __errors__
my $duplicate_role = eval {
    Genome::Sys::User::Role->create(
        name => $test_role_name,
    )
};
my $error = $@;
ok(!$duplicate_role, 'not able to create duplicate role');
ok($error =~ /Another role with name $test_role_name already exists/, 'got expected error');

# Create test user
my $user = Genome::Sys::User->create(
    email => 'testing1234@example.com',
    name => 'testing 1234',
);
ok($user, 'created test user');

# Try to add user to test role
my $rv = $role->add_user($user);
ok($rv, 'add user method returned success');

my $bridge = Genome::Sys::User::RoleMember->get(
    role => $role,
    user => $user,
);
ok($bridge, 'retrieved bridge entity');

# Try to delete role when a user is using it
$rv = eval { $role->delete };
$error = $@;
ok($error, 'could not delete role when it has users, as expected');
ok($error =~ /Cannot delete user role $test_role_name/, 'error message matches expected pattern');

# Remove role from user
$rv = $bridge->delete;
ok($rv, 'user/role bridge object delete returned success');
ok($bridge->isa('UR::DeletedRef'), 'deleted bridge entity is a UR::DeletedRef, as expected');

# Attempt to delete the role again
$rv = $role->delete;
ok($rv, 'deletion of role returned success');
ok($role->isa('UR::DeletedRef'), 'role is a UR::DeletedRef, as expected');

done_testing();




