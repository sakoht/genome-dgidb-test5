#!/usr/bin/env perl

use strict;
use warnings;

use above "Genome";

use Test::More;

my $seq = {  
    id => 'S000002017 Pirellula staleyi',
    seq => 'AATGAACGTTGGCGGCATGGATTAGGCATGCAAGTCGTGCGCGATATGTAGCAATACATGGAGAGCGGCGAAAGGGAGAGTAATACGTAGGAACCTACCTTCGGGTCTGGGATAGCGGCGGGAAACTGCCGGTAATACCAGATGATGTTTCCGAACCAAAGGTGTGATTCCGCCTGAAGAGGGGCCTACGTCGTATTAGCTAGTTGGTAGGGTAATGGCCTACCAAGnCAAAGATGCGTATGGGGTGTGAGAGCATGCCCCCACTCACTGGGACTGAGACACTGCCCAGACACCTACGGGTGGCTGCAGTCGAGAATCTTCGGCAATGGGCGAAAGCCTGACCGAGCGATGCCGCGTGCGGGATGAAGGCCTTCGGGTTGTAAACCGCTGTCGTAGGGGATGAAGTGCTAGGGGGTTCTCCCTCTAGTTTGACTGAACCTAGGAGGAAGGnCCGnCTAATCTCGTGCCAGCAnCCGCGGTAATACGAGAGGCCCAnACGTTATTCGGATTTACTGGGCTTAAAGAGTTCGTAGGCGGTCTTGTAAGTGGGGTGTGAAATCCCTCGGCTCAACCGAGGAACTGCGCTCCAnACTACAAGACTTGAGGGGGATAGAGGTAAGCGGAACTGATGGTGGAGCGGTGAAATGCGTTGATATCATCAGGAACACCGGAGGCGAAGGCGGCTTACTGGGTCCTTTCTGACGCTGAGGAACGAAAGCTAGGGGAGCAnACGGGATTAGATACCCCGGTAGTCCTAnCCGTAAACGATGAGCACTGGACCGGAGCTCTGCACAGGGTTTCGGTCGTAGCGAAAGTGTTAAGTGCTCCGCCTGGGGAGTATGGTCGCAAGGCTGAAACTCAAAGGAATTGACGGGGGCTCACACAAGCGGTGGAGGATGTGGCTTAATTCGAGGCTACGCGAAGAACCTTATCCTAGTCTTGACATGCTTAGGAATCTTCCTGAAAGGGAGGAGTGCTCGCAAGAGAGCCTnTGCACAGGTGCTGCATGGCTGTCGTCAGCTCGTGTCGTGAGATGTCGGGTTAAGTCCCTTAACGAGCGAAACCCTnGTCCTTAGTTACCAGCGCGTCATGGCGGGGACTCTAAGGAGACTGCCGGTGTTAAACCGGAGGAAGGTGGGGATGACGTCAAGTCCTCATGGCCTTTATGATTAGGGCTGCACACGTCCTACAATnGTGCACACAAAGCGACGCAAnCTCGTGAGAGCCAGCTAAGTTCGGATTGCAGGCTGCAACTCGCCTGCATGAAGCTGGAATCGCTAGTAATCGCGGGTCAGCATACCGCGGTGAATGTGTTCCTGAGCCTTGTACACACCGCCCGTCAAGCCACGAAAGTGGGGGGGACCCAACAGCGCTGCCGTAACCGCAAGGAACAAGGCGCCTAAGGTCAACTCCGTGATTGGGACTAAGTCGTAACAAGGTAGCCGTAGGGGAACCTGCGGCTGGATCACCTCCTT',
};
$seq->{seq} = reverse $seq->{seq};
$seq->{seq} =~ tr/ATGC/TACG/;

my $classifier = Genome::Utility::MetagenomicClassifier::Rdp::Version2x1->new(
    training_set => 4,# 4,6,broad
);
ok($classifier, 'Created rdp classifier');

my $version = $classifier->get_training_version;
ok ($version ne '', 'Got training set version');

my $parsed_seq = $classifier->create_parsed_seq($seq);
ok($parsed_seq, 'create parsed seq');

my $classification = $classifier->classify_parsed_seq($parsed_seq);
ok($classification, 'got classification from classifier');
isa_ok($classification, 'Genome::Utility::MetagenomicClassifier::SequenceClassification');
my $taxon = $classification->get_taxon;
do {
    ($taxon) = $taxon->each_Descendent;
} until ($taxon->is_Leaf()); 
ok($taxon->id eq 'Pirellula', 'found correct classification');

my ($conf) = $taxon->get_tag_values('confidence');
is($conf, '1.0', 'found correct confidence value');
my $complemented = $classification->is_complemented;
ok($complemented, 'complemented');

# classify fails
eval{ $classifier->classify(); };
diag($@);
like($@, qr(No sequence given to classify), 'fail to classify w/ undef sequence');
ok(!$classifier->classify( Bio::Seq->new(-id => 'Short Seq', -seq => 'A') ), 'fail to classify short sequence');

done_testing();
exit;

