package Genome::Model::DeNovoAssembly::Test;

use strict;
use warnings;

require Carp;
use Data::Dumper 'Dumper';
require File::Temp;
require Genome::Model::Test;
require Genome::Utility::TestBase;

BEGIN {
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
}

#< Dirs >#
sub _base_directory {
    return '/gsc/var/cache/testsuite/data/Genome-Model/DeNovoAssembly';
}

sub _example_directory_for_model {
    my ($self, $model) = @_;

    Carp::confess "No model to get example directory" unless $model;
    
    my %dirs_versions = (
        soap_solexa => '9',
        velvet_solexa => '0.3',
        abyss_solexa => '1'
    );

    my $assembler_platform = $model->processing_profile->assembler_base_name.'_'.$model->sequencing_platform;
    my $dir = $self->_base_directory.'/'.$assembler_platform.'_build_v'.$dirs_versions{$assembler_platform};

    Carp::confess("Example directory ($dir) for de novo assembly model does not exist.") unless -d $dir;
    
    return $dir;
}

sub _instrument_data_dir {
    return $_[0]->_base_directory.'/inst_data/';
}
#<>#

#< Library Taxon >#
our($taxon, $sample, $library);
sub _create_taxon_sample_and_library {
    my $class = shift;

    $taxon = Genome::Taxon->create(
        name => 'Escherichia coli TEST',
        domain => 'Bacteria',
        current_default_org_prefix => undef,
        estimated_genome_size => 4500000,
        current_genome_refseq_id => undef,
        ncbi_taxon_id => undef,
        ncbi_taxon_species_name => undef,
        species_latin_name => 'Escherichia coli',
        strain_name => 'TEST',
    );
    if ( not $taxon ) {
        Carp::confess('Cannot create taxon');
    }

    $sample = Genome::Sample->create(
        id => -1234,
        name => 'TEST-000',
        taxon_id => $taxon->id,
    );
    if ( not $sample ) {
        Carp::confess('Cannot create sample');
    }

    $library = Genome::Library->create(
        id => -12345,
        name => $sample->name.'-testlibs',
        sample_id => $sample->id,
    );
    if ( not $library ) { 
        Carp::confess('Cannot create library');
    }

    return 1;
}

sub taxon {
    my $class = shift;
    if ( not $taxon ) {
        $class->_create_taxon_sample_and_library;
    }
    return $taxon;
}

sub library {
    my $class = shift;
    if ( not $library ) {
        $class->_create_taxon_sample_and_library;
    }
    return $library;
}
#<>#

#< PP Models and Builds >#
sub processing_profile_for_soap {
    my $class = shift;

    my $pp = Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'De Novo Assembly Soap Test',
        sequencing_platform => 'solexa',
        assembler_name => 'soap de-novo-assemble',
        assembler_version => '1.04',
        assembler_params => '-kmer_size 31 -resolve_repeats -kmer_frequency_cutoff 1',
        read_processor => 'trimmer bwa-style -trim-qual-level 10 | filter by-length --filter-length 35 | rename illumina-to-pcap',
        post_assemble => 'standard-outputs',
    );

    if ( not $pp ) {
        Carp::confess('Cannot create de novo assembly processing profile for soap');
    }

    return $pp;
}

sub processing_profile_for_velvet {
    my $class = shift;

    my $pp = Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'De Novo Assembly Velvet Test',
        sequencing_platform => 'solexa',
        coverage => 0.5,#25000,
        assembler_name => 'velvet one-button',
        assembler_version => '0.7.57-64',
        assembler_params => '-hash_sizes 31 33 35 -min_contig_length 100',
        read_processor => 'trimmer by-length -trim-length 10 | rename illumina-to-pcap',
        post_assemble => 'standard-outputs',
    );

    if ( not $pp ) {
        Carp::confess('Cannot create de novo assembly processing profile for velvet');
    }

    return $pp;
}

sub processing_profile_for_abyss {
    my $class = shift;

    my $pp = Genome::ProcessingProfile::DeNovoAssembly->create(
        name => 'De Novo Assembly Abyss Test',
        sequencing_platform => 'solexa',
        assembler_name => 'abyss parallel',
        assembler_version => '1.2.7',
        assembler_params => '-kmer_size 25,31..35 step 2,50 -num_jobs 4',
    );

    if ( not $pp ) {
        Carp::confess('Cannot create de novo assembly processing profile for abyss');
    }

    return $pp;
}

sub _model_for_assembler {
    my ($class, $assembler) = @_;

    Carp::confess('No assembler given to get model') if not $assembler;

    my $taxon = $class->taxon or die; # confesses
    my $pp_method = 'processing_profile_for_'.$assembler;
    my $pp = $class->$pp_method or die; # confesses
    my $tmpdir = File::Temp::tempdir(CLEANUP => 1);
    my $model = Genome::Model::DeNovoAssembly->create(
        processing_profile => $pp,
        subject_name => $taxon->name,
        subject_type => 'species_name',
        center_name => 'WUGC',
        data_directory => $tmpdir,
    );
    if ( not $model ) {
        Carp::confess('Cannot create de novo assembly model for '.$assembler);
    }

    my $instrument_data = $class->solexa_instrument_data;
    if ( not $instrument_data ) {
        Carp::confess('Cannot get solexa instrument data');
    }

    my $add_ok = $model->add_instrument_data($instrument_data);
    if ( not $add_ok ) {
        Carp::confess('Cannot add instrument data to model');
    }

    my @instrument_data = $model->instrument_data;
    if ( not @instrument_data ) {
        Carp::confess('Cannot get instrument data from model');
    }

    return $model;
}

sub model_for_soap {
    return $_[0]->_model_for_assembler('soap');
}

sub model_for_velvet {
    return $_[0]->_model_for_assembler('velvet');
}

sub model_for_abyss {
    return $_[0]->_model_for_assembler('abyss');
}

sub example_build_for_model {
    my ($class, $model) = @_;

    Carp::confess('No de novo assembly model to create example build') if not $model;

    my $dir = $class->_example_directory_for_model($model) or die;
    my $build = Genome::Model::Build->create(
        model=> $model,
        data_directory => $dir,
    );
    if ( not $build ) {
        Carp::confess('Cannot create de novo assembly build');
    }

    $build->status('Succeeded');
    $build->the_master_event->date_completed(UR::Time->now);

    return $build;
}
#<>#

#< Instruement Data >#
our $solexa_instrument_data;
sub solexa_instrument_data {
    my $class = shift;

    return $solexa_instrument_data if $solexa_instrument_data;

    my $library = $class->library or die; # confesses

    my $archive_path = $class->_instrument_data_dir.'/2854709902/sequence_61H93_8_CGATGT.tar.gz';
    if ( not -s $archive_path ) {
        Carp::confess("No archive path in example directory ($archive_path)");
    }

    $solexa_instrument_data = Genome::InstrumentData::Imported->create(
        id => -7777,
        sequencing_platform => 'solexa',
        import_format => 'fastq',
        import_source_name => 'WUGC',
        read_count => 30000,
        read_length => 100,
        subset_name => '8-CGATGT',
        is_paired_end => 1,
        library => $library,
        median_insert_size => 260,# 181, but 260 was used to generate assembly
        sra_sample_id => 'SRS000000',
    );

    if ( not $solexa_instrument_data ) {
        Carp::confess('Cannot create solexa instrument data');
    }

    my $alloc = Genome::Disk::Allocation->__define__(
        owner_id => $solexa_instrument_data->id,
        owner_class_name => $solexa_instrument_data->class,
        disk_group_name => 'info_alignments',
        mount_path => '/gsc/var/cache/testsuite/data/Genome-Model/DeNovoAssembly',
        group_subdirectory => 'inst_data',
        allocation_path => $solexa_instrument_data->id,
        absolute_path => '/gsc/var/cache/testsuite/data/Genome-Model/DeNovoAssembly/inst_data/2854709902',
    );
    if (not $alloc ) {
        Carp::confess('Could not create disk allocation for instrument data');
    }

    if ( not -s $solexa_instrument_data->archive_path ) {
        Carp::confess('Cannot get archive path from instrument data');
    }

    return $solexa_instrument_data;
}
#<>#

1;

