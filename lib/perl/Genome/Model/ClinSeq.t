#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
};


use above "Genome";
use Test::More;
use Genome::Model::ClinSeq;

my $dry_run;
if (@ARGV and $ARGV[0] eq 'RUN') {
    note("NOT A DRY RUN...");
    plan tests => 16;
    $dry_run = 0;
}
else {
    note("DRY RUN... put 'RUN' on the command line for this test to actually generate and compare results");
    plan tests => 16;
    $dry_run = 1;
}

my $patient = Genome::Individual->get(common_name => "HG3");
ok($patient, "got the HG3 patient");


my $tumor_rna_sample = $patient->samples(common_name => "tumor", sample_type => "rna");
ok($tumor_rna_sample, "found the tumor RNA sample");

my $tumor_genome_sample = $patient->samples(common_name => "tumor", sample_type => "genomic dna");
ok($tumor_genome_sample, "found the tumor genome sample");

my $normal_genome_sample = $patient->samples(common_name => "normal", sample_type => "genomic dna");
ok($normal_genome_sample, "found the normal genome sample");


my $tumor_rnaseq_model = Genome::Model::RnaSeq->get(
    #subject => $tumor_rna_sample,
    name    => 'HG3 - RNA-seq - Ensembl 58_37c - TopHat 1.3.1 - Cufflinks 1.1.0 - Mask rRNA_MT - refcov - build37',
);
ok($tumor_rnaseq_model, "got the RNASeq model");

my $wgs_model = Genome::Model::SomaticVariation->get(
    #subject => $tumor_genome_sample,
    name    => 'H_KU-376-1123929.prod-somatic_variation',
);
ok($wgs_model, "got the WGS Somatic Variation model");

my $exome_model = Genome::Model::SomaticVariation->get(
    #subject => $tumor_genome_sample,
    name    => 'HG3 - exome somatic variation - build37/hg19',
);
ok($exome_model, "got the exome Somatic Variation model");

#

my $p = Genome::ProcessingProfile::ClinSeq->create(
    id   => -10001,
    name => 'TESTSUITE ClinSeq Profile 1',
);
ok($p, "created a processing profile") or diag(Genome::ProcessingProfile::ClinSeq->error_message);

my $m = $p->add_model(
    name            => 'TESTSUITE-clinseq-model1',
    subclass_name   => 'Genome::Model::ClinSeq',
    subject         => $patient,
);
ok($m, "created a model") or diag(Genome::Model->error_message);

my $i1 = $m->add_input(
    name => 'wgs_model',
    value => $wgs_model, 
);
ok($i1, "add a wgs model to it");

my $i2 = $m->add_input(
    name => 'exome_model',
    value => $exome_model, 
);
ok($i2, "add a exome model to it");

my $i3 = $m->add_input(
    name => 'tumor_rnaseq_model',
    value => $tumor_rnaseq_model, 
);
ok($i3, "add a tumor rnaseq model to it");

if ($dry_run) {
    my $i4 = $m->add_input(
        name => 'dry_run',
        value_class_name => 'UR::Value::Boolean',
        value_id => 1, 
    );
    ok($i4, "set the dry run flag");
}

# this will prevent disk allocation during build initiation
# we will have to turn this off if the tasks in this pipeline spread to other machines
my $temp_dir = Genome::Sys->create_temp_directory("dummy-clinseq-build-dir");

my $b = $m->add_build(
    data_directory => $temp_dir,
);
ok($b, "created a new build");

# we would normally do $build->start() but this is easier to debug minus workflow guts when you just call _execute_build
#$b->start(
#    server_dispatch => 'inline',
#    job_dispatch    => 'inline',
#);
#is($b->status, 'Succeeded', "build succeeded!");

my $retval = eval { $m->_execute_build($b); };
is($retval, 1, 'execution of the build returned true');
is($@, '', 'no exceptions thrown during build process') or diag $@;

unless ($dry_run) {
    my $expected_data_directory = $ENV{"GENOME_TESTSUITE_INPUTS_PATH"} . '/Genome-Model-ClinSeq/2011-12-05';
    my @diff = `diff -r --brief -x '*.R' -x '*.pdf' $expected_data_directory $temp_dir`;
    ok(@diff == 0, "no differences from expected results and actual")
        or do { 
            diag("differences are:");
            diag(@diff);
            Genome::Sys->shellcmd(cmd => "mv $temp_dir /tmp/last-clinseq-test-result");
        };
}
        
__END__

# When the pipeline actually runs, and is perhaps slow, we'll need to run on fake data
# Here is a start:

my $human = Genome::Taxon->get(name => 'human');
ok($human, "got the human taxon");

my $patient = Genome::Individual->create(
    name => 'TEST-patient99',
    taxon => $human,
);
ok($patient, "defined a test patient");

my $tumor = $patient->add_sample(
    name => 'TEST-patient99-tumor',
);
ok($tumor, "created a tumor sample");

my $normal = $patient->add_sample(
    name => 'TEST-patient99-normal',
);
ok($normal, "created a normal sample");

#...
#
