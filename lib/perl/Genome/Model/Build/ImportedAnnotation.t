use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above "Genome";
use Test::More tests => 27;
use Data::Dumper;
use_ok('Genome::Model::Build::ImportedAnnotation');

# create a test annotation build and a few reference sequence builds to test compatibility with
my @species_names = ('human', 'mouse');
my @versions = ('12_34', '56_78');
my $ann_pp = Genome::ProcessingProfile::ImportedAnnotation->create(name => 'test_ann_pp', annotation_source => 'test_source');
my $data_dir = File::Temp::tempdir('ImportedAnnotationTest-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);

my %samples;
for my $sn (@species_names) {
    my $p = Genome::Individual->create(name => "test-$sn-patient", common_name => 'testpatient');
    my $s = Genome::Sample->create(name => "test-$sn-patient", species_name => $sn, common_name => 'tumor', source => $p);
    ok($s, 'created sample');
    $samples{$sn} = $s;
}
my %rbuilds = create_reference_builds(\@species_names, \@versions);

my $ann_model = Genome::Model::ImportedAnnotation->create(
    name                => "test_annotation",
    processing_profile  => $ann_pp,
    subject_class_name  => ref($samples{'human'}),
    subject_id          => $samples{'human'}->id,
    reference_sequence  => $rbuilds{'human'}->[0]->model,
);
ok($ann_model, "created annotation model");

my $abuild = Genome::Model::Build::ImportedAnnotation->create(
    model               => $ann_model,
    data_directory      => $data_dir,
    version             => $versions[0],
);
my @tags = $abuild->validate_for_start;
ok(@tags, 'received errors when validating build, as expected');
$abuild->delete;

$abuild = Genome::Model::Build::ImportedAnnotation->create(
    model               => $ann_model,
    data_directory      => $data_dir,
    version             => $versions[0],
    reference_sequence  => $rbuilds{'human'}->[0]
);
ok($abuild, "created annotation build");
is($abuild->name, "test_annotation/$versions[0]", 'build name is correct');
$abuild = Genome::Model::Build::ImportedAnnotation->get(name => $abuild->name);
ok($abuild, 'got build by name');

$abuild->status('Succeeded');
my $abuild_event = $abuild->the_master_event;

# now set a (different) reference_sequence_build and make sure we get different answers
ok($abuild->is_compatible_with_reference_sequence_build($rbuilds{'human'}->[0]), 'reference sequence compatibility');
ok(!$abuild->is_compatible_with_reference_sequence_build($rbuilds{'human'}->[1]), 'reference sequence incompatibility');
ok(!$abuild->is_compatible_with_reference_sequence_build($rbuilds{'mouse'}->[0]), 'reference sequence incompatibility');
ok(!$abuild->is_compatible_with_reference_sequence_build($rbuilds{'mouse'}->[1]), 'reference sequence incompatibility');

my @invalid_status = ('', 'Crashed', 'Failed', 'Scheduled', 'Running', 'Abandoned');
for my $invalid (@invalid_status) {
    $abuild_event->event_status($invalid);
    ok(!$abuild->is_compatible_with_reference_sequence_build($rbuilds{'human'}->[0]), "Build status '$invalid' not allowed as annotation build");
}

ok(!$abuild->__errors__, "annotation build has no __errors__");
$abuild->reference_sequence($rbuilds{'mouse'}[0]);
my @errs = $abuild->__errors__;
is(scalar @errs, 1, "attempting to specify a reference build from the wrong model is an error");
like($errs[0]->desc, qr/is not a build of model/, "error string looks correct");

done_testing();

sub create_reference_builds {
    my ($species_names, $versions) = @_;
    my %rbuilds;
    my $ref_pp = Genome::ProcessingProfile::ImportedReferenceSequence->create(name => 'test_ref_pp');
    for my $sn (@$species_names) {
        $rbuilds{$sn} = [];

        my $ref_model = Genome::Model::ImportedReferenceSequence->create(
            name                => "test_ref_sequence_$sn",
            processing_profile  => $ref_pp,
            subject_class_name  => ref($samples{$sn}),
            subject_id          => $samples{$sn}->id,
        );
        ok($ref_model, "created reference sequence model ($sn)");

        for my $v (@$versions) {
            $v =~ /.*_([0-9]+)/;
            my $short_version = $1;
            my $rs = Genome::Model::Build::ImportedReferenceSequence->create(
                name            => "ref_sequence_${sn}_$short_version",
                model           => $ref_model,
                fasta_file      => 'nofile',
                data_directory  => $data_dir,
                version         => $short_version,
                );
            ok($rs, "created ref seq build $sn $v");
            push(@{$rbuilds{$sn}}, $rs);
        }
    }
    return %rbuilds;
}
