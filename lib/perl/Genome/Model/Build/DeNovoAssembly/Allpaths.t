#!/gsc/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above "Genome";

require File::Compare;
use File::Temp;
use Test::More;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}

use_ok('Genome::Model::Build::DeNovoAssembly::Allpaths') or die;

# dir
my $base_dir = '/gsc/var/cache/testsuite/data/Genome-Model/DeNovoAssembly';
my $example_dir = $base_dir.'/allpaths_v1';
ok(-d $example_dir, 'example dir') or die;
my $tmpdir = File::Temp::tempdir(CLEANUP => 0);
ok(-d $tmpdir, 'temp dir: '.$tmpdir);
# sample
my $sample = Genome::Sample->__define__(
    id => -1234,
    name => 'TEST-000',
);
ok($sample, 'define sample') or die;

# libraries/inst data
# fragment
my $frag_library = Genome::Library->__define__(
    id => -1235,
    name => $sample->name.'-testlibs1',
    sample_id => $sample->id,
    fragment_size_range => 180,
);
ok($frag_library, 'define frag library') or die;
my $frag_inst_data = Genome::InstrumentData::Solexa->__define__(
    id => -6666,
    sequencing_platform => 'solexa',
    read_length => 101,
    subset_name => '1-AAAAA',
    index_sequence => 'AAAAA',
    run_name => 'XXXXXX/1-AAAAA',
    run_type => 'Paired',
    flow_cell_id => 'XXXXXX',
    lane => 1,
    library => $frag_library,
    bam_path => $base_dir.'/inst_data/-6666/archive.bam',
    clusters => 44554,
    fwd_clusters => 44554,
    rev_clusters => 44554,
    analysis_software_version => 'not_old_iilumina',
    final_est_fragment_size => 180,
);
ok($frag_inst_data, 'define frag inst data');
ok($frag_inst_data->is_paired_end, 'inst data is paired');
ok(-s $frag_inst_data->bam_path, 'inst data bam path');

# jump
my $jump_library = Genome::Library->__define__(
    id => -1236,
    name => $sample->name.'-testlibs2',
    sample_id => $sample->id,
    fragment_size_range => 180,
);
ok($jump_library, 'define jump library') or die;
my $jump_inst_data = Genome::InstrumentData::Solexa->__define__(
    id => -5555,
    sequencing_platform => 'solexa',
    read_length => 101,
    subset_name => '1-AAAAA',
    index_sequence => 'AAAAA',
    run_name => 'XXXXXX/1-AAAAA',
    run_type => 'Paired',
    flow_cell_id => 'XXXXXX',
    lane => 1,
    library => $jump_library,
    bam_path => $base_dir.'/inst_data/-6666/archive.bam',
    clusters => 44554,
    fwd_clusters => 44554,
    rev_clusters => 44554,
    analysis_software_version => 'not_old_iilumina',
    final_est_fragment_size => 400,
    original_est_fragment_size => 3000,
    original_est_fragment_size_max => 4000,
    original_est_fragment_size_min => 2000,
    read_orientation => 'reverse_forward',
);
ok($jump_inst_data, 'define jump inst data');
ok($jump_inst_data->is_paired_end, 'inst data is paired');
ok(-s $jump_inst_data->bam_path, 'inst data bam path');

my $pp = Genome::ProcessingProfile::DeNovoAssembly->__define__(
    name => 'De Novo Assembly Allpaths PGA Test',
    assembler_name => 'allpaths de-novo-assemble',
    assembler_version => '39099',
    assembler_params => '-ploidy 1',
    type_name => 'de novo assembly',
    #read_processor => 'trim bwa-style -trim-qual-level 10 | filter by-length -filter-length 35 | rename illumina-to-pcap',
    #post_assemble => 'standard-outputs -min_contig_length 10',
);
ok($pp, 'define pp') or die;

my $model = Genome::Model::DeNovoAssembly->create(
    processing_profile => $pp,
    subject_name => $sample->name,
    subject_type => 'sample_name',
    center_name => 'WUGC',
);
ok($model, 'create allpaths de novo model') or die;
ok($model->add_instrument_data($frag_inst_data), 'add frag inst data to model');
ok($model->add_instrument_data($jump_inst_data), 'add jump inst data to model');

my $build = Genome::Model::Build::DeNovoAssembly->create(
    model => $model,
    data_directory => $tmpdir,
);
ok($build, 'created build');
my @invalid_tags = $build->validate_for_start;
ok(!@invalid_tags, 'build can start');
my $example_build = Genome::Model::Build->create(
    model => $model,
    data_directory => $example_dir,
);
ok($example_build, 'create example build');

my $events = $pp->_generate_events_for_build($build);

# process inst data
my @process_inst_data_events = @{$events->[0]->{events}};
is(@process_inst_data_events, 2, 'got 2 process inst data events');
for my $process_inst_data_event ( @process_inst_data_events ) {
    $process_inst_data_event->execute;
}
my @frag_read_processor_output_files = $build->read_processor_output_files_for_instrument_data($frag_inst_data);
my @jump_read_processor_output_files = $build->read_processor_output_files_for_instrument_data($jump_inst_data);

my @all_output_files = (@frag_read_processor_output_files, @jump_read_processor_output_files);

my @example_frag_read_processor_output_files = $example_build->read_processor_output_files_for_instrument_data($frag_inst_data);

my @example_jump_read_processor_output_files = $example_build->read_processor_output_files_for_instrument_data($jump_inst_data);

my @all_example_output_files = (@example_frag_read_processor_output_files, @example_jump_read_processor_output_files);

my $fileCount = scalar @all_output_files;
for (my $i=0; $i<$fileCount; $i++) {
    ok(-s $all_output_files[$i], 'output file exists');
    ok(-s $all_example_output_files[$i], 'example output file exists');
    my $output_diff = Genome::Sys->diff_file_vs_file($all_output_files[$i], $all_example_output_files[$i]);
    ok(!$output_diff, 'file contents are the same as expected for '.$all_output_files[$i]) 
        or diag('diff:\n'.$output_diff);
}

done_testing();
exit;


