#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Data::Dumper 'Dumper';
use File::Temp;
use Genome::Model::DeNovoAssembly::Test;
use Genome::Utility::Text;
use Test::More;

use_ok('Genome::Model::Build::DeNovoAssembly::Soap') or die;

my $model = Genome::Model::DeNovoAssembly::Test->model_for_soap;
ok($model, 'Got de novo assembly model') or die;
my $tmpdir = File::Temp::tempdir(CLEANUP => 1);
my $build = Genome::Model::Build::DeNovoAssembly->create(
    model => $model,
    data_directory => $tmpdir,
);
ok($build, 'created build');
my $example_build = Genome::Model::DeNovoAssembly::Test->example_build_for_model($model);
ok($example_build, 'Got example de novo assembly build');

my $file_prefix = $build->file_prefix;
is($file_prefix, Genome::Utility::Text::sanitize_string_for_filesystem($model->subject_name).'_WUGC', 'file prefix');
my $library_file_base = $build->data_directory.'/'.$file_prefix;

# PREPARE INST DATA
my $prepare = Genome::Model::Event::Build::DeNovoAssembly::PrepareInstrumentData->create(build => $build);
ok($prepare, 'create prepare instrument data');
$prepare->dump_status_messages(1);
ok($prepare->execute, 'execute prepare instrument data');

my ($inst_data) = $build->instrument_data;
ok($inst_data, 'instrument data for build');
my $library_id = $inst_data->library_id;
ok($library_id, 'library id for inst data');
my $assembler_forward_input_file_for_library_id = $build->assembler_forward_input_file_for_library_id($library_id);
is($assembler_forward_input_file_for_library_id, $library_file_base.'.'.$library_id.'.forward.fastq', 'forward fastq file for library id');
my $assembler_reverse_input_file_for_library_id = $build->assembler_reverse_input_file_for_library_id($library_id);
is($assembler_reverse_input_file_for_library_id, $library_file_base.'.'.$library_id.'.reverse.fastq', 'reverse fastq file for library id');
my $assembler_fragment_input_file_for_library_id = $build->assembler_fragment_input_file_for_library_id($library_id);
is($assembler_fragment_input_file_for_library_id, $library_file_base.'.'.$library_id.'.fragment.fastq', 'fragment fastq file for library id');
my @libraries = $build->libraries_with_existing_assembler_input_files;
is_deeply( # also tests existing_assembler_input_files_for_library_id
    \@libraries,
    [
        {
            library_id => -12345,
            insert_size => 260,
            paired_fastq_files => [ 
                $assembler_forward_input_file_for_library_id, $assembler_reverse_input_file_for_library_id 
            ],
        },
    ],
    'libraries and existing assembler input files',
);
my @existing_assembler_input_files = $build->existing_assembler_input_files;
is_deeply(
    \@existing_assembler_input_files,
    $libraries[0]->{paired_fastq_files},
    'existing assembler input files',
);

# ASSEMBLE
my %assembler_params = $model->processing_profile->soap_de_novo_assemble_params($build);
print Data::Dumper::Dumper(\%assembler_params);
is_deeply(
    \%assembler_params,
    {
        'version' => '1.04',
        'resolve_repeats' => 1,
        'config_file' => $build->data_directory.'/config_file',
        'kmer_size' => '31',
        'cpus' => 1,
        'kmer_frequency_cutoff' => '1',
        'output_dir_and_file_prefix' => $build->data_directory.'/Escherichia_coli_TEST_WUGC'
    },
    'assembler params',
);
ok(-s $assembler_params{config_file}, 'created config file');
my $config_fh = eval{ Genome::Sys->open_file_for_reading($assembler_params{config_file}); };
my $config = join('', $config_fh->getlines);
$config_fh->close;
my $expected_config = <<CONFIG;
max_rd_len=120
[LIB]
map_len=60
asm_flags=3
pair_num_cutoff=2
reverse_seq=0
avg_ins=260
CONFIG
$expected_config .= 'q1='.$build->data_directory.'/'.$build->file_prefix.".$library_id.forward.fastq\n";
$expected_config .= 'q2='.$build->data_directory.'/'.$build->file_prefix.".$library_id.reverse.fastq\n";
is($config, $expected_config, 'config matches');

# TODO ASSEBLE

# TODO metrics use real build after doing stuff
my %metrics = $example_build->set_metrics;
ok(%metrics, 'set metrics');

#print $build->data_directory."\n"; <STDIN>;
done_testing();
exit;
