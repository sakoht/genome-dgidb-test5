#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';
use Test::More tests => 10;

use_ok('Genome::Model::SomaticValidation::Command::ExtractVariantsToValidate');


my $model = &setup_test_model();
isa_ok($model, 'Genome::Model::SomaticVariation', 'setup test model');

my $target = &setup_target();
isa_ok($target, 'Genome::FeatureList', 'setup target');

my $extract_variants_cmd = Genome::Model::SomaticValidation::Command::ExtractVariantsToValidate->create(
    model => $model,
    target => $target,
);
isa_ok($extract_variants_cmd, 'Genome::Model::SomaticValidation::Command::ExtractVariantsToValidate', 'created extract-variants-to-validate command');
$extract_variants_cmd->dump_status_messages(1);
ok($extract_variants_cmd->execute, 'executed command');

isa_ok($extract_variants_cmd->snv_variant_list, 'Genome::Model::Tools::DetectVariants2::Result::Manual', 'generated manual result for SNVs');

my $expected_snv_data = <<EOBED
1	23	24	A/T
1	29	30	A/T
1	950	951	A/T
2	101	102	A/T
2	320	321	A/T
2	500	501	A/T
EOBED
;

my $expected_file = Genome::Sys->create_temp_file_path;
Genome::Sys->write_file($expected_file, $expected_snv_data);

my ($produced_snv_file) = glob($extract_variants_cmd->snv_variant_list->output_dir . '/*.bed');

ok(!Genome::Sys->diff_file_vs_file($produced_snv_file, $expected_file), 'manual SNV result matches expected file')
    or diag("diff:\n" . Genome::Sys->diff_file_vs_file($produced_snv_file, $expected_file));

my $extract_variants_cmd2 = Genome::Model::SomaticValidation::Command::ExtractVariantsToValidate->create(
    model => $model,
    target => $target,
    report_only => 1,
);
isa_ok($extract_variants_cmd2, 'Genome::Model::SomaticValidation::Command::ExtractVariantsToValidate', 'created extract-variants-to-validate command');
$extract_variants_cmd2->dump_status_messages(1);
ok($extract_variants_cmd2->execute, 'executed command');

ok(!$extract_variants_cmd2->snv_variant_list, 'did not create variant list in report-only mode');


sub setup_test_model {
    my $test_profile = Genome::ProcessingProfile::ReferenceAlignment->create(
        name => 'test_profile',
        sequencing_platform => 'solexa',
        dna_type => 'cdna',
        read_aligner_name => 'bwa',
        snv_detection_strategy => 'samtools',
    );

    my $test_somvar_pp = Genome::ProcessingProfile::SomaticVariation->create(
        name => 'test somvar pp',
        snv_detection_strategy => 'samtools r599 [--test=1]',
        tiering_version => 1,
    );

    my $annotation_build = Genome::Model::Build::ImportedAnnotation->__define__(
        model_id => '-1',
    );

    my $test_individual = Genome::Individual->create(
        common_name => 'TEST',
        name => 'test_individual',
    );

    my $test_sample = Genome::Sample->create(
        name => 'test_subject',
        source_id => $test_individual->id,
    );

    my $test_control_sample = Genome::Sample->create(
        name => 'test_control_subject',
        source_id => $test_individual->id,
    );

    my $test_instrument_data = Genome::InstrumentData::Solexa->create(
    );

    my $reference_sequence_build = Genome::Model::Build::ReferenceSequence->get_by_name('NCBI-human-build36');

    my $test_model = Genome::Model->create(
        name => 'test_reference_aligment_model_TUMOR',
        subject_name => 'test_subject',
        subject_type => 'sample_name',
        processing_profile_id => $test_profile->id,
        reference_sequence_build => $reference_sequence_build,
    );

    my $add_ok = $test_model->add_instrument_data($test_instrument_data);

    my $temp_build_data_dir = Genome::Sys->create_temp_directory;

    my $test_build = Genome::Model::Build->create(
        model_id => $test_model->id,
        data_directory => $temp_build_data_dir,
    );

    my $test_model_two = Genome::Model->create(
        name => 'test_reference_aligment_model_mock_NORMAL',
        subject_name => 'test_control_subject',
        subject_type => 'sample_name',
        processing_profile_id => $test_profile->id,
        reference_sequence_build => $reference_sequence_build,
    );

    $add_ok = $test_model_two->add_instrument_data($test_instrument_data);

    my $test_build_two = Genome::Model::Build->create(
        model_id => $test_model_two->id,
        data_directory => $temp_build_data_dir,
    );

    my $somvar_model = Genome::Model::SomaticVariation->create(
        tumor_model => $test_model,
        normal_model => $test_model_two,
        name => 'test somvar model',
        processing_profile => $test_somvar_pp,
        annotation_build => $annotation_build,
    );

    my $somvar_build = Genome::Model::Build::SomaticVariation->__define__(
        model_id => $somvar_model->id,
        data_directory => $temp_build_data_dir,
        tumor_build => $test_build_two,
        normal_build => $test_build,
    );
    my $e = Genome::Model::Event::Build->__define__(
        build_id => $somvar_build->id,
        event_type => 'genome model build',
        event_status => 'Succeeded',
        model_id => $somvar_model->id,
        date_completed => '1999-01-01 15:19:01',
    );


    my $output_dir = Genome::Sys->create_temp_directory;
    my $tier_result = Genome::Model::Tools::DetectVariants2::Classify::Tier->__define__(
        output_dir => $output_dir,
        variant_type => 'snv',
    );
    $tier_result->add_user(user => $somvar_build, label => 'uses');

    #no relation to any real tiers
    my $tier1_data = <<EOBED
1	23	24	A/T
1	29	30	A/T
2	320	321	A/T
EOBED
;
    my $tier2_data = <<EOBED
1	950	951	A/T
1	1005	1006	A/T
EOBED
;
    my $tier3_data = <<EOBED
2	98	99	A/T
2	101	102	A/T
2	500	501	A/T
EOBED
;
    my $tier4_data = <<EOBED
3	1	2	A/T
EOBED
;

    my $tier1_file = join('/', $output_dir, 'tier1.hq.bed');
    my $tier2_file = join('/', $output_dir, 'tier2.hq.bed');
    my $tier3_file = join('/', $output_dir, 'tier3.hq.bed');
    my $tier4_file = join('/', $output_dir, 'tier4.hq.bed');

    Genome::Sys->write_file($tier1_file, $tier1_data);
    Genome::Sys->write_file($tier2_file, $tier2_data);
    Genome::Sys->write_file($tier3_file, $tier3_data);
    Genome::Sys->write_file($tier4_file, $tier4_data);

    return $somvar_model;
}

sub setup_target {
    my $bed_data = <<EOBED
1	10	1000	region1
2	100	3000	region2
EOBED
;
    my $bed_file = Genome::Sys->create_temp_file_path();
    Genome::Sys->write_file($bed_file, $bed_data);
    my $fl = Genome::FeatureList->create(
        name => 'test targets for extract-variants-to-validate',
        file_path => $bed_file,
        file_content_hash => Genome::Sys->md5sum($bed_file),
        format => 'true-BED',
        content_type => 'validation',
    );

    return $fl;
}
