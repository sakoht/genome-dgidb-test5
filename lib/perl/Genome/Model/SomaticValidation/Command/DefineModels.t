#!/gsc/bin/perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';

use Test::More tests => 15;

use_ok('Genome::Model::SomaticValidation::Command::DefineModels');

my $tmpdir = File::Temp::tempdir('SomaticValidation-Command-DefineModelsXXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);

my ($feature_list, $tumor_sample, $normal_sample, $reference_alignment_pp, $somatic_validation_pp) = setup_test_data($tmpdir);

my $define_command = Genome::Model::SomaticValidation::Command::DefineModels->create(
    variant_list => $feature_list,
    tumor_subject => $tumor_sample,
    normal_subject => $normal_sample,
    #region_of_interest_set => $feature_list,
    target_region_set => $feature_list,
    reference_alignment_processing_profile => $reference_alignment_pp,
    somatic_validation_processing_profile => $somatic_validation_pp,
);

isa_ok($define_command, 'Genome::Model::SomaticValidation::Command::DefineModels', 'created define command');

my $result = $define_command->execute;
ok($result, 'define command executed successfully') or die('test cannot continue without a model');

my $somatic_validation_model = Genome::Model->get($result);
isa_ok($somatic_validation_model, 'Genome::Model::SomaticValidation', 'created a somatic validation model');

my $tumor_model = $somatic_validation_model->tumor_model;
isa_ok($tumor_model, 'Genome::Model::ReferenceAlignment', 'created a tumor model');

my $normal_model = $somatic_validation_model->normal_model;
isa_ok($normal_model, 'Genome::Model::ReferenceAlignment', 'created a normal model');

is($tumor_model->subject, $tumor_sample, 'tumor model has correct subject');
is($normal_model->subject, $normal_sample, 'normal model has correct subject');

is($tumor_model->region_of_interest_set, $feature_list, 'tumor model has correct ROI list');
is($normal_model->region_of_interest_set, $feature_list, 'normal model has correct ROI list');

sub setup_test_data {
    my $tempdir = shift;

    my $simple_bed_text = "1\t3\t50\tmy_region_of_interest\n";
    my $bed_file_path = join('/', $tmpdir, 'roi.bed');
    Genome::Sys->write_file($bed_file_path, $simple_bed_text);

    my $reference_sequence = Genome::Model::Build::ImportedReferenceSequence->get_by_name('NCBI-human-build36');

    my $feature_list = Genome::FeatureList->create(
        name => 'test feature list for somatic-validation define-models',
        format => 'true-BED',
        reference => $reference_sequence,
        file_path => $bed_file_path,
        file_content_hash => Genome::Sys->md5sum($bed_file_path),
    );

    my $taxon = Genome::Taxon->get(species_name => 'human');

    my $individual = Genome::Individual->create(
        name => 'test individual for somatic-validation define-models',
        common_name => 'TEST-sv_define',
        taxon => $taxon,
    );

    my $tumor_sample = Genome::Sample->create(
        name => 'test tumor sample for somatic-validation define-models',
        common_name => 'tumor',
        source => $individual,
    );

    my $normal_sample = Genome::Sample->create(
        name => 'test normal sample for somatic-validation define-models',
        common_name => 'normal',
        source => $individual,
    );

    my $reference_alignment_pp = Genome::ProcessingProfile::ReferenceAlignment->create(
        sequencing_platform => 'solexa',
        dna_type => 'genomic dna',
        read_aligner_name => 'bwa',
        snv_detector_name => 'test for somatic-validation define-models',
        name => 'test ref. align. pp for somatic-validation define-models',
    );

    my $somatic_validation_pp = Genome::ProcessingProfile::SomaticValidation->create(
        name => 'test s.v. pp for somatic-validation define-models',
        samtools_version => 'test for somatic-validation define-models',
    );

    isa_ok($feature_list, 'Genome::FeatureList', 'created test feature-list');
    isa_ok($tumor_sample, 'Genome::Sample', 'created test tumor sample');
    isa_ok($normal_sample, 'Genome::Sample', 'created test normal sample');
    isa_ok($reference_alignment_pp, 'Genome::ProcessingProfile::ReferenceAlignment', 'created test ref. align. pp');
    isa_ok($somatic_validation_pp, 'Genome::ProcessingProfile::SomaticValidation', 'created test s.v. pp');

    return ($feature_list, $tumor_sample, $normal_sample, $reference_alignment_pp, $somatic_validation_pp);
}
