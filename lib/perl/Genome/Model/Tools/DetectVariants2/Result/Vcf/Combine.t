#!/usr/bin/env perl

use strict;
use warnings;

BEGIN{
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More;
use File::Compare;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 9;
}

use_ok('Genome::Model::Tools::DetectVariants2::Result::Vcf::Combine');


#TODO this could really use its own very tiny dataset--we don't care about the results in this test so much as the process
my $test_dir = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Result-Vcf-Combine';
my $inputs = $test_dir."/inputs";
my $expected_dir = $test_dir."/expected";

my $detector_expected_file = $expected_dir."/detector_test/snvs.vcf.gz";
my $filter_expected_file = $expected_dir."/filter_test/snvs.vcf.gz";

my $varscan_detector_directory = $inputs."/varscan";
my $varscan_detector_vcf_directory = $inputs."/varscan_vcf_result";
my $samtools_detector_directory = $inputs."/samtools";
my $samtools_detector_vcf_directory = $inputs."/samtools_vcf_result";

my $snp_filter_directory = $inputs."/snp_filter_result";
my $snp_filter_vcf_directory = $inputs."/snp_filter_vcf_result";
my $false_positive_filter_directory = $inputs."/false_positive_filter_result";
my $false_positive_filter_vcf_directory = $inputs."/false_positive_filter_vcf_result";

my $bam_file = $test_dir . '/alignments/102922275_merged_rmdup.bam';


my $refbuild_id = 101947881;

my $varscan_version = '2.2.9';
my $samtools_version = 'r599';

my $detector_parameters = '';
my $vcf_version = "1";



# Detector and Detector VCF results

my $varscan_detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $varscan_detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::VarscanSomatic',
    detector_params => '',
    detector_version => $varscan_version,
    aligned_reads => $bam_file,
    reference_build_id => $refbuild_id,
);

my $varscan_detector_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Detector->__define__(
    input => $varscan_detector_result,
    output_dir => $varscan_detector_vcf_directory,
    aligned_reads_sample => "TEST",
    vcf_version => $vcf_version,
);

$varscan_detector_result->add_user(user => $varscan_detector_vcf_result, label => 'uses');

my $samtools_detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $samtools_detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::Samtools',
    detector_params => '',
    detector_version => $samtools_version,
    aligned_reads => $bam_file,
    reference_build_id => $refbuild_id,
);

my $samtools_detector_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Detector->__define__(
    input => $samtools_detector_result,
    output_dir => $samtools_detector_vcf_directory,
    aligned_reads_sample => "TEST",
    vcf_version => $vcf_version,
);

$samtools_detector_result->add_user(user => $samtools_detector_vcf_result, label => 'uses');


# Filter and Filter VCF result

my $snp_filter_result = Genome::Model::Tools::DetectVariants2::Result::Filter->__define__(
    output_dir => $snp_filter_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::Samtools',
    detector_params => '',
    detector_version => $samtools_version,
    aligned_reads => $bam_file,
    reference_build_id => $refbuild_id,
    filter_name => 'Genome::Model::Tools::DetectVariants2::Filter::SnpFilter',
    filter_params => '',
    filter_version => 'v1',
);

my $snp_filter_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Filter->__define__(
    input => $snp_filter_result,
    output_dir => $snp_filter_vcf_directory,
    aligned_reads_sample => "TEST",
    vcf_version => $vcf_version,
);

$snp_filter_result->add_user(user => $snp_filter_vcf_result, label => 'uses');

my $false_positive_filter_result = Genome::Model::Tools::DetectVariants2::Result::Filter->__define__(
    output_dir => $false_positive_filter_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::VarscanSomatic',
    detector_params => '',
    detector_version => $varscan_version,
    aligned_reads => $bam_file,
    reference_build_id => $refbuild_id,
    filter_name => 'Genome::Model::Tools::DetectVariants2::Filter::FalsePositive',
    filter_params => '',
    filter_version => 'v1',
);

my $false_positive_filter_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Filter->__define__(
    input => $false_positive_filter_result,
    output_dir => $false_positive_filter_vcf_directory,
    aligned_reads_sample => "TEST",
    vcf_version => $vcf_version,
);

$false_positive_filter_result->add_user(user => $false_positive_filter_vcf_result, label => 'uses');

#Test combining detector results
run_combine_test($samtools_detector_result,$varscan_detector_result, $detector_expected_file);

#Test combining filter results
run_combine_test($snp_filter_result,$false_positive_filter_result, $filter_expected_file);


sub run_combine_test {
    my $result_a = shift;
    my $result_b = shift;
    my $expected_file = shift;

    my $test_working_dir = File::Temp::tempdir('DetectVariants2-Result-Vcf-CombineXXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);

    my %command_params = (
        input_a_id => $result_a->id,
        input_b_id => $result_b->id,
        output_directory => $test_working_dir,
    );

    my $command = Genome::Model::Tools::DetectVariants2::Combine::UnionSnv->create(%command_params);

    isa_ok($command, 'Genome::Model::Tools::DetectVariants2::Combine::UnionSnv', 'created UnionSnv operation');
    ok($command->execute, 'executed UnionSnv command');

    my $combine_vcf_result = $command->_vcf_result;
    isa_ok($combine_vcf_result, 'Genome::Model::Tools::DetectVariants2::Result::Vcf::Combine','created a combine_vcf_result');

    my $output_file = $combine_vcf_result->output_dir."/snvs.vcf.gz";
    
    my $expected = `zcat $expected_file | grep -v fileDate`;
    my $output = `zcat $output_file | grep -v fileDate`;

    my $diff = Genome::Sys->diff_text_vs_text($output, $expected);
    ok(!$diff, 'output matched expected result')
        or diag("diff results:\n" . $diff);
}
