#!/usr/bin/env perl

use strict;
use warnings;

BEGIN{
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 9;
}

use_ok('Genome::Model::Tools::DetectVariants2::Result::Vcf::Filter');


#TODO this could really use its own very tiny dataset--we don't care about the results in this test so much as the process
my $test_dir = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Samtools/';
my $test_working_dir = File::Temp::tempdir('DetectVariants2-ResultXXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);
my $bam_input = $test_dir . '/alignments/102922275_merged_rmdup.bam';


my $refbuild_id = 101947881;

my $version = 'r613';

my $detector_parameters = '';

my %command_params = (
    reference_build_id => $refbuild_id,
    aligned_reads_input => $bam_input,
    version => $version,
    params => $detector_parameters,
    output_directory => $test_working_dir . '/test',
    aligned_reads_sample => 'TEST',
);

my $command = Genome::Model::Tools::DetectVariants2::Samtools->create(%command_params);

isa_ok($command, 'Genome::Model::Tools::DetectVariants2::Samtools', 'created samtools detector');
$command->dump_status_messages(1);
ok($command->execute, 'executed samtools command');
my $result = $command->_result;
isa_ok($result, 'Genome::Model::Tools::DetectVariants2::Result', 'generated result');

my %filter_params = (
    previous_result_id => $result->id,
    version => 'v1',
    output_directory => $test_working_dir . '/test/filter1',
);

my $filter_command = Genome::Model::Tools::DetectVariants2::Filter::SnpFilter->create(%filter_params);
isa_ok($filter_command, 'Genome::Model::Tools::DetectVariants2::Filter::SnpFilter', 'created snp-filter filter');
#$filter_command->dump_status_messages(1);
ok($filter_command->execute, 'executed snp-filter filter');
my $vcf_filter_result = $filter_command->_vcf_result;
my $filter_result = $filter_command->_result;

$filter_params{output_directory} = $test_working_dir . '/test/filter2';
$filter_params{previous_result_id} = $filter_result->id;
$filter_params{bam_readcount_version} = "0.4";


my $filter_command2 = Genome::Model::Tools::DetectVariants2::Filter::FalsePositive->create(%filter_params);
isa_ok($filter_command2, 'Genome::Model::Tools::DetectVariants2::Filter::FalsePositive', 'created FalsePositive filter command');
$filter_command2->dump_status_messages(1);
ok($filter_command2->execute, 'executed FalsePositive filter');
my $filter_result2 = $filter_command2->_vcf_result;

isa_ok($filter_result2, 'Genome::Model::Tools::DetectVariants2::Result::Vcf::Filter' , 'got back a vcf filter result');
