#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use Test::More tests => 23;

use above 'Genome';
use File::Compare;

use_ok('Genome::Model::Tools::DetectVariants2::Filter::VarscanPValue') || die;

my $test_data_dir = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Filter-VarscanPValue';
my $expected_output_dir = join('/', $test_data_dir, 'output');

my $bam_file = join('/', $test_data_dir, 'tumor.tiny.bam');

my $reference = Genome::Model::Build::ImportedReferenceSequence->get_by_name('NCBI-human-build36');
ok($reference, 'found the reference sequence');

my $vcf_version = Genome::Model::Tools::Vcf->get_vcf_version;

my $detector_directory = join('/', $test_data_dir, 'varscan-somatic-2.2.4-');
my $detector_vcf_directory = join('/', $test_data_dir, 'detector_vcf_result');
my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::VarscanSomatic',
    detector_params => '',
    detector_version => 'more-awesome',
    aligned_reads => $bam_file,
    reference_build_id => $reference->id,
);

my $detector_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Detector->__define__(
    input => $detector_result,
    output_dir => $detector_vcf_directory,
    aligned_reads_sample => "TEST",
    control_aligned_reads_sample => "TEST-normal",
    vcf_version => $vcf_version,
);

$detector_result->add_user(user => $detector_vcf_result, label => 'uses');


my $output_base = File::Temp::tempdir('DetectVariants2-Filter-VarscanPValue-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);

my %variant_p_value_only = (
    previous_result_id => $detector_result->id,
    output_directory => $output_base . '/variant-p-value-only',
    params => '--variant-p-value 0.5',
);

my %somatic_p_value_only = (
    previous_result_id => $detector_result->id,
    output_directory => $output_base . '/somatic-p-value-only',
    params => '--somatic-p-value 0.5',
);

my %combined_params = (
    previous_result_id => $detector_result->id,
    output_directory => $output_base . '/combined',
    params => '--variant-p-value 0.5 --somatic-p-value 0.5',
);

my @expected_output_files = qw| 
    snvs.hq
    snvs.hq.bed
    snvs.lq
    snvs.lq.bed|;

run_filter(%variant_p_value_only);
run_filter(%somatic_p_value_only);
run_filter(%combined_params);

sub run_filter {
    my %params = @_;
    my $filter = Genome::Model::Tools::DetectVariants2::Filter::VarscanPValue->create(%params);
    ok($filter, 'created filter') || return;
    ok($filter->execute, 'executed filter') || return;

    my $output_directory = $filter->output_directory;
    my ($sub_dir) = $output_directory =~ /\/([^\/]+)$/;
    my $expected_output_dir = join('/', $test_data_dir,"output", $sub_dir);
    ok(-d $output_directory, 'output_directory exists') or return;

    for my $output_file (@expected_output_files){
        my $expected_file = join("/",($test_data_dir,"output",$sub_dir,$output_file));
        my $actual_file = $output_directory."/".$output_file;
        print "compare: ".$expected_file."\t".$actual_file."\n";
        is(compare($actual_file, $expected_file), 0, "$actual_file output matched expected output");
    }
}
