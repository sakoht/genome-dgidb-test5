#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use Test::More tests => 17;

use above 'Genome';

use_ok('Genome::Model::Tools::DetectVariants2::Filter::VarscanPValue') || die;

my $test_data_dir = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Filter-VarscanPValue';
my $expected_output_dir = join('/', $test_data_dir, 'output');

my $bam_file = join('/', $test_data_dir, 'tumor.tiny.bam');

my $reference = Genome::Model::Build::ImportedReferenceSequence->get_by_name('NCBI-human-build36');
ok($reference, 'found the reference sequence');

my $detector_directory = join('/', $test_data_dir, 'varscan-somatic-2.2.4-');
my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::VarscanSomatic',
    detector_params => '',
    detector_version => 'more-awesome',
    aligned_reads => $bam_file,
    reference_build_id => $reference->id,
);

my $output_base = File::Temp::tempdir('DetectVariants2-Filter-VarscanPValue-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);

my %variant_p_value_only = (
    previous_result_id => $detector_result->id,
    output_directory => $output_base . '/variant-p-value-only',
    params => '--variant-p-value 0.5',
);

my %somatic_p_value_only = (
    previous_result_id => $detector_result->id,
    output_directory => $output_base . '/somatic-p-value-only',
    params => '--somatic-p-value 0.5',
);

my %combined_params = (
    previous_result_id => $detector_result->id,
    output_directory => $output_base . '/combined',
    params => '--variant-p-value 0.5 --somatic-p-value 0.5',
);

run_filter(%variant_p_value_only);
run_filter(%somatic_p_value_only);
run_filter(%combined_params);

sub run_filter {
    my %params = @_;
    my $filter = Genome::Model::Tools::DetectVariants2::Filter::VarscanPValue->create(%params);
    ok($filter, 'created filter') || return;
    ok($filter->execute, 'executed filter') || return;

    my $output_directory = $filter->output_directory;
    my ($sub_dir) = $output_directory =~ /\/([^\/]+)$/;
    my $expected_output_dir = join('/', $expected_output_dir, $sub_dir);
    ok(-d $output_directory, 'output_directory exists') or return;
    ok(-d $expected_output_dir, 'expected_output_dir exists') or die('Test data not in place? ' . $expected_output_dir);

    my @compare = qx(diff -u $expected_output_dir $output_directory);
    is(scalar @compare, 0, 'no diff between expected output and actual output')
        or diag @compare, "\n";
}
