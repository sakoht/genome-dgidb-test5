#!/usr/bin/env perl

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Compare;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    my $archos = `uname -a`;
    if ($archos !~ /64/) {
        plan skip_all => "Must run from 64-bit machine";
    } else {
        plan tests => 8;
    }
};

# Override lock name because if people cancel tests locks don't get cleaned up.
*Genome::SoftwareResult::_resolve_lock_name = sub {
    return Genome::Sys->create_temp_file_path;
};

use_ok( 'Genome::Model::Tools::DetectVariants2::Filter::SomaticScoreMappingQuality');

my $test_data_dir  = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Filter-SomaticScoreMappingQuality';
my $refbuild_id = 101947881;
my $tumor_bam_file  = $test_data_dir . '/flank_tumor_sorted.bam';
my $normal_bam_file  = $test_data_dir . '/flank_normal_sorted.bam';
my $detector_directory = $test_data_dir."/sniper-0.7.3-";
my $detector_vcf_directory = $test_data_dir."/detector_vcf_result";
my $expected_output = $test_data_dir."/expected";

my $test_output_base = File::Temp::tempdir('Genome-Model-Tools-DetectVariants2-Filter-SomaticScoreMappingQuality-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $test_output_dir = $test_output_base . '/filter';

my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::Sniper',
    detector_params => '',
    detector_version => 'awesome',
    aligned_reads => $tumor_bam_file,
    control_aligned_reads => $normal_bam_file,
    reference_build_id => $refbuild_id,
);
my $detector_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Detector->__define__(
        input => $detector_result,
        output_dir => $detector_vcf_directory,
        aligned_reads_sample => "TEST",
        vcf_version => "1",
    );

$detector_result->add_user(user => $detector_vcf_result, label => 'uses');

my $ssmq_object = Genome::Model::Tools::DetectVariants2::Filter::SomaticScoreMappingQuality->create(
    previous_result_id => $detector_result->id,
    output_directory    => $test_output_dir,
);

ok($ssmq_object, 'created SomaticScoreMappingQuality object (default mapping & somatic quality)');
ok($ssmq_object->execute(), 'executed SomaticScoreMappingQuality object');

my @files = qw| snvs.hq
                snvs.lq
                snvs.hq.bed
                snvs.lq.bed |;

for my $file (@files) {
    my $test_output = $test_output_dir."/".$file;
    my $expected_output = $expected_output."/".$file;
    is(compare($test_output,$expected_output),0, "Found no difference between test output: ".$test_output." and expected output:".$expected_output);
}

ok(-s $test_output_dir."/snvs.vcf.gz", " found a vcf");
