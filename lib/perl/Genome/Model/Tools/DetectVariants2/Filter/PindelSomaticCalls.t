#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use File::Temp;
use Test::More;
use Data::Dumper;
use File::Compare;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}
else {
    plan tests => 11;
}

use_ok( 'Genome::Model::Tools::DetectVariants2::Filter::PindelSomaticCalls');

# THIS TESTS THE CACHING. Caching refseq in /var/cache/tgi-san. We gotta link these files to a tmp dir for tests so they don't get copied
use Genome::Model::Build::ReferenceSequence;
my $refseq_tmp_dir = File::Temp::tempdir(CLEANUP => 1);
no warnings;
*Genome::Model::Build::ReferenceSequence::local_cache_basedir = sub { return $refseq_tmp_dir; };
*Genome::Model::Build::ReferenceSequence::copy_file = sub {
    my ($build, $file, $dest) = @_;
    symlink($file, $dest);
    is(-s $file, -s $dest, 'linked '.$dest) or die;
    return 1;
};
# Override lock name because if people cancel tests locks don't get cleaned up.
*Genome::SoftwareResult::_resolve_lock_name = sub {
    return Genome::Sys->create_temp_file_path;
};
use warnings;

my $refbuild_id = 101947881;
my $input_directory = "/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Filter-PindelSomaticCalls";
my $detector_directory = "/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Filter-PindelSomaticCalls/pindel-0.5-";

# Updated to .v2 for correcting an error with newlines
my $expected_dir = $input_directory . "/expected_5/";
my $tumor_bam_file  = $input_directory. '/true_positive_tumor_validation.bam';
my $test_output_base = File::Temp::tempdir('Genome-Model-Tools-DetectVariants2-Filter-PindelSomaticCalls-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $test_output_dir = $test_output_base . '/filter';

my $hq_output_bed = "$test_output_dir/indels.hq.bed";
my $lq_output_bed = "$test_output_dir/indels.lq.bed";
my $raw_output = "$test_output_dir/indels.hq";

my $expected_hq_bed_output = "$expected_dir/indels.hq.bed";
my $expected_lq_bed_output = "$expected_dir/indels.lq.bed";
my $expected_raw_output = "$expected_dir/indels.hq";

my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $detector_directory,
    detector_name => 'test',
    detector_params => '',
    detector_version => 'awesome',
    aligned_reads => $tumor_bam_file,
    reference_build_id => $refbuild_id,
);

my $pindel_somatic_calls = Genome::Model::Tools::DetectVariants2::Filter::PindelSomaticCalls->create(
    previous_result_id => $detector_result->id,
    output_directory => $test_output_dir,
);
ok($pindel_somatic_calls, "created PindelSomaticCalls object");
ok($pindel_somatic_calls->execute(), "executed PindelSomaticCalls");

ok(-s $hq_output_bed ,'HQ bed output exists and has size');
ok(-e $lq_output_bed,'LQ bed output exists');

is(compare($hq_output_bed, $expected_hq_bed_output), 0, 'hq bed output matched expected output');
is(compare($lq_output_bed, $expected_lq_bed_output), 0, 'lq bed output matched expected output');
is(compare($raw_output, $expected_raw_output), 0, 'Raw output matched expected output');
