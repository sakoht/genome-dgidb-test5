#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT}=1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS}=1;
    $ENV{NO_LSF}=1;
}

use Parse::RecDescent qw/RD_ERRORS RD_WARN RD_TRACE/;
use Data::Dumper;
use Test::More;
use above 'Genome';
use Genome::SoftwareResult;

# Caching refseq in /var/cache/tgi-san. We gotta link these files to a tmp dir for tests so they don't get copied
my $refbuild_id = 101947881;
my $ref_seq_build = Genome::Model::Build::ImportedReferenceSequence->get($refbuild_id);
ok($ref_seq_build, 'human36 reference sequence build') or die;
my $refseq_tmp_dir = File::Temp::tempdir(CLEANUP => 1);
no warnings;
*Genome::Model::Build::ReferenceSequence::local_cache_basedir = sub { return $refseq_tmp_dir; };
*Genome::Model::Build::ReferenceSequence::copy_file = sub { 
    my ($build, $file, $dest) = @_;
    symlink($file, $dest);
    is(-s $file, -s $dest, 'linked '.$dest) or die;
    return 1; 
};
# Override lock name because if people cancel tests locks don't get cleaned up.
*Genome::SoftwareResult::_resolve_lock_name = sub {
    return Genome::Sys->create_temp_file_path;
};
use warnings;

#Parsing tests
my $det_class_base = 'Genome::Model::Tools::DetectVariants2';
my $dispatcher_class = "${det_class_base}::Dispatcher";
use_ok($dispatcher_class);

# hash of strings => expected output hash

my $obj = $dispatcher_class->create(
    snv_detection_strategy => 'samtools r599 [-p 1] intersect samtools r613 [-p 2]',
    indel_detection_strategy => 'samtools r599 [-p 1]',
    sv_detection_strategy => 'breakdancer 2010_06_24 [-p 3]',
    );

my $expected_plan = {
    'breakdancer' => {
        '2010_06_24' => {
            'sv' => [
                {
                    'params' => '-p 3',
                    'version' => '2010_06_24',
                    'name' => 'breakdancer',
                    'filters' => [],
                    'class' => 'Genome::Model::Tools::DetectVariants2::Breakdancer'
                }
            ]
        }
    },
    'samtools' => {
        'r599' => { 
            'indel' => [
                {
                    'params' => '-p 1',
                    'version' => 'r599', 
                    'name' => 'samtools',
                    'filters' => [],
                    'class' => 'Genome::Model::Tools::DetectVariants2::Samtools'
                }
            ],
            'snv' => [
                {
                    'params' => '-p 1',
                    'version' => 'r599',
                    'name' => 'samtools',
                    'filters' => [],
                    'class' => 'Genome::Model::Tools::DetectVariants2::Samtools'
                }
            ]
        },
        'r613' => { #r613
            'snv' => [
                {
                    'params' => '-p 2',
                    'version' => 'r613', #613
                    'name' => 'samtools',
                    'filters' => [],
                    'class' => 'Genome::Model::Tools::DetectVariants2::Samtools',
                }
            ]
        }
    }
};

my ($trees, $plan) = $obj->plan;
is_deeply($plan, $expected_plan, "plan matches expectations");

my $tumor_bam = "/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Dispatcher/flank_tumor_sorted.bam";
my $normal_bam = "/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Dispatcher/flank_normal_sorted.bam";

# Test dispatcher for running a complex case -- the intersect is nonsensical, but tests intersections while still keeping the test short
my $test_working_dir = File::Temp::tempdir('DetectVariants2-Dispatcher-combineXXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);
my $combine_test = $dispatcher_class->create(
    snv_detection_strategy => 'samtools r599 filtered by snp-filter v1 union samtools r599 filtered by snp-filter v1',
    output_directory => $test_working_dir,
    reference_build_id => $refbuild_id,
    aligned_reads_input => $tumor_bam,
    control_aligned_reads_input => $normal_bam,
);
$combine_test->dump_status_messages(1);
like($combine_test->reference_sequence_input, qr|^$refseq_tmp_dir|, "reference sequence path is in /tmp");
ok($combine_test, "Object to test a combine case created");
ok($combine_test->execute, "Test executed successfully");

#sleep 10000000000;
done_testing();
exit;
