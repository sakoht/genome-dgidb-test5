#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';
use Genome::SoftwareResult;
use Test::More;
use File::Compare;

my $archos = `uname -a`;
if ($archos !~ /64/) {
    plan skip_all => "Must run from 64-bit machine";
} 

use_ok('Genome::Model::Tools::DetectVariants2::Varscan');

my $refbuild_id = 101947881;
my $ref_seq_build = Genome::Model::Build::ImportedReferenceSequence->get($refbuild_id);
ok($ref_seq_build, 'human36 reference sequence build') or die;

no warnings;
# Override lock name because if people cancel tests locks don't get cleaned up.
*Genome::SoftwareResult::_resolve_lock_name = sub {
    return Genome::Sys->create_temp_file_path;
};
use warnings;

my $test_dir = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-DetectVariants2-Varscan/';
my $test_base_dir = File::Temp::tempdir('DetectVariants2-VarscanXXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites/', CLEANUP => 1);
my $test_working_dir = "$test_base_dir/output";

my $bam_input = $test_dir . '/alignments/102922275_merged_rmdup.bam';

# Updated to .v5 due to additional column in Varscan
# Updated to .v6 due to the addition of quality and natural sort order to bed file output 
# Updated to .v7 due to the addition of read depth
# Updated to .v8 due to directory structure changes
# Updated to .v12 due to a score changing from using mpileup instad of pileup
my $expected_dir = $test_dir . '/expected.v13/';
ok(-d $expected_dir, "expected results directory exists");



my $version = '2.2.6';

my $command = Genome::Model::Tools::DetectVariants2::Varscan->create(
    reference_build_id => $refbuild_id,
    aligned_reads_input => $bam_input,
    aligned_reads_sample => 'TEST',
    version => $version,
    params => "",
    output_directory => $test_working_dir,
);
ok($command, 'Created `gmt detect-variants varscan` command');
$command->dump_status_messages(1);
ok($command->execute, 'Executed `gmt detect-variants varscan` command');

my @expected_output_files = qw|
    indels.hq
    indels.hq.bed
    indels.hq.filter
    indels.hq.v1.bed
    indels.hq.v2.bed
    snvs.hq
    snvs.hq.bed
    snvs.hq.filter
    snvs.hq.v1.bed
    snvs.hq.v2.bed
    snvs.hq.variants| ;


for my $output_file (@expected_output_files){
    my $expected_file = $expected_dir."/".$output_file;
    my $actual_file = $test_working_dir."/".$output_file;
    is(compare($actual_file, $expected_file), 0, "$actual_file output matched expected output");
}

ok(-s $test_working_dir."/snvs.vcf.gz", "Found VCF file");

done_testing();


exit;
