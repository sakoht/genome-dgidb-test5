package Genome::Model::Tools::Soap::Default;

use strict;
use warnings;

use Genome;
use Data::Dumper;

class Genome::Model::Tools::Soap::Default {
    is => 'Command',
    has => [
	assembly_directory => {
	    is => 'Text',
	    doc => 'Input assembly directory',
	},
    ],
    has_optional_transient => [
	_scaffold_fasta_file     => { is => 'Text', },
	_input_fastq_files       => { is => 'Text', is_many => 1, },
	_contigs_bases_file      => { is => 'Text', },
	_supercontigs_fasta_file => { is => 'Text', },
	_supercontigs_agp_file   => { is => 'Text', },
    ],
};

sub help_brief {
    'Tool to create default post assembly output files, including contigs.bases, supercontigs.fasta, supercontigs.agp and stats.txt files';
}

sub help_detail {
    return <<"EOS"
gmt soap default --assembly-directory /gscmnt/111/soap_assembly
EOS
}

sub execute {
    my $self = shift;

    #validate input params and set transient params
    unless ( $self->_validate_and_set_params ) {
	$self->error_message("Failed to validate and set tool params");
	return;
    }

    #create edit_dir to place output files
    Genome::Utility::FileSystem->create_directory($self->assembly_directory.'/edit_dir') unless
	-d $self->assembly_directory.'/edit_dir';


    #create contigs files
    $self->status_message("Creating contigs fasta file");
    my $contigs = Genome::Model::Tools::Soap::CreateContigsBasesFile->create(
        scaffold_fasta_file => $self->_scaffold_fasta_file,
        assembly_directory => $self->assembly_directory,
        output_file => $self->_contigs_bases_file,
    );
    unless ($contigs->execute) {
        $self->error_message("Failed to successfully execute creating contigs fasta file");
        return;
    }
    $self->status_message("Finished creating contigs fasta file");
    

    #create scaffold fasta file
    $self->status_message("Creating supercontigs fasta file");
    my $supercontigs = Genome::Model::Tools::Soap::CreateSupercontigsFastaFile->create(
        scaffold_fasta_file => $self->_scaffold_fasta_file,
        assembly_directory => $self->assembly_directory,
        output_file => $self->assembly_directory.'/edit_dir/supercontigs.fasta',
    );
    unless ($supercontigs->execute) {
        $self->error_message("Failed to successfully execute creating scaffolds fasta file");
        return;
    }
    $self->status_message("Finished creating scaffolds fasta file");


    #create scaffold agp file
    $self->status_message("Creating supercontigs agp file");
    my $agp = Genome::Model::Tools::Soap::CreateSupercontigsAgpFile->create(
        scaffold_fasta_file => $self->_scaffold_fasta_file,
        assembly_directory => $self->assembly_directory,
        output_file => $self->assembly_directory.'/edit_dir/supercontigs.agp',
    );
    unless ($agp->execute) {
        $self->error_message("Failed to successfully execute creating agp file");
        return;
    }
    $self->status_message("Finished creating agp file");


    #create stats
    $self->status_message("Creating stats.txt file");
    my $stats = Genome::Model::Tools::Soap::Stats->create(
        assembly_directory => $self->assembly_directory,
        input_fastq_files => [ $self->_input_fastq_files ],
        contigs_bases_file => $self->_contigs_bases_file,
	);
    unless ($stats->execute) {
        $self->error_message("Failed to run stats successfully");
        return;
    }
    $self->status_message("Finished creating stats.txt file");
    
    return 1;
}

sub _validate_and_set_params {
    my $self = shift;

    unless ( -d $self->assembly_directory ) {
	$self->error_message("Failed to find or invalid directory: " . $self->assembly_directory);
	return;
    }
    
    for my $method (qw/ _set_scaffold_fasta_file _set_input_fastq_files /) {
	unless ( $self->$method ) {
	    $self->error_message("Failed to run $method successfully to set trasient params");
	    return;
	}
    }

    return 1;
}

#< soap generated files >#

sub _set_scaffold_fasta_file {
    my $self = shift;
    
    my @files = glob ( $self->assembly_directory."/*scafSeq");

    unless ( scalar @files == 1 ) {
	$self->error_message("Expected one *scafSeq file but found ". scalar @files);
	return;
    }

    $self->_scaffold_fasta_file( $files[0] );

    return 1;
}

sub _set_input_fastq_files {
    my $self = shift;

    my @files = glob ( $self->assembly_directory."/*fastq" );
    
    unless ( @files ) {
	$self->error_message("Failed to find any *fastq files in assembly directory");
	return 1;
    }

    $self->_input_fastq_files( \@files );
}

#< files generated by this tool >#

sub _set_contigs_bases_file {
    my $self = shift;

    $self->_contigs_bases_file( $self->assembly_directory.'/edit_dir/contigs.bases' );

    return 1;
}

1;
