#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';

use File::Compare;
use File::Temp (qw/ tempdir tempfile /);
use Test::More; 

use_ok('Genome::Model::Tools::Consed::AceToOut')
    or die;

#< SETUP: 4 TESTS >#
my $DIR = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-Consed-AceToOut';
ok(-d $DIR, "Test dir ($DIR) exists");
my $ACEFILE = $DIR.'/M_BB0392D19.ace';
ok(-s $ACEFILE, "Acefile ($ACEFILE) exists");
my $TMPDIR = tempdir(CLEANUP => 1);
ok(-d $TMPDIR, "Temp dir ($TMPDIR) exists");

my %filters_and_params = (
    max_threshold => 1999,
    min_threshold => 2000,
    ctgs => 'Contig16=701to720,'
);

my $ace2out;
#< FORMATS: 4 #>
for my $format ( Genome::Model::Tools::Consed::AceToOut->formats ) {
    #< ALL >#
    _execute_and_compare( # 4 tests
        format => $format,
        filter => 'all',
    );
    #< FILTERS: 3 >#
    for my $filter ( keys %filters_and_params ) {
        next if $format eq 'contig_names' and $filter eq 'ctgs';
        _execute_and_compare( # 4 tests
            format => $format,
            filter => $filter,
            $filter => $filters_and_params{$filter},
        );
    }
}

#print "$TMPDIR\n"; <STDIN>;
done_testing();
exit;

#####################################################

sub _execute_and_compare {
    my %p = @_;

    my $format = $p{format}
        or die "No format\n";
    my $filter = delete $p{filter};
    my $generated = sprintf('%s/generated.%s.%s', $TMPDIR, ( defined $filter ? $filter : 'all' ), $format);
    my $expected = sprintf('%s/expected.%s.%s', $DIR, ( defined $filter ? $filter : 'all' ), $format);
    
    $ace2out = Genome::Model::Tools::Consed::AceToOut->create(
        acefile => $ACEFILE,
        output_file => $generated,
        %p,
    );
    ok($ace2out, "Created AceToOut for format ($format) and filter ($filter)");
    ok($ace2out->execute, 'Executed AceToOut');
    ok(-s $expected, "Expected file exists");
    return _compare_files($format, $generated, $expected);
}

my %format_and_compare_subs = (
    read_names => '_compare_read_name_files',
);
sub _compare_files { 
    my $format = shift;

    my $sub = ( exists $format_and_compare_subs{$format} )
    ? $format_and_compare_subs{$format}
    : '_default_compare';

    no strict 'refs';
    return $sub->(@_)
}

sub _default_compare {
    return is(compare($_[0], $_[1]), 0, 'Expected and generated files match');
}

sub _compare_read_name_files {
    my $generated_fh = IO::File->new($_[0], 'r')
        or die "Can't open $_[0]\n";
    my @genereted = sort { $a cmp $b } grep { chomp } $generated_fh->getlines;
    $generated_fh->close;
    my $expected_fh = IO::File->new($_[1], 'r')
        or die "Can't open $_[1]\n";
    my @expected = sort { $a cmp $b } grep { chomp } $expected_fh->getlines;
    $expected_fh->close;

    return is_deeply(\@genereted, \@expected, 'Expected and generated files match');
}


=pod

=head1 Tests

=head1 Disclaimer

 Copyright (C) 2006 Washington University Genome Sequencing Center

 This script is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY or the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 License for more details.

=head1 Author(s)

 Eddie Belter <ebelter@watson.wustl.edu>

=cut

#$HeadURL$
#$Id$
