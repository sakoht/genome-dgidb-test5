#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}
use above "Genome";
use Test::More tests => 22;
use_ok('Genome::Model::ReferenceAlignment');

# TODO: ImportedAnnotation.pm currently restricts what versions of annotation builds can be used with hard coded values.
# When that gets fixed to allow multiple versions, make this test a little more generic and expand it to test version
# mismatches etc.

my $human_ann_model = Genome::Model::ImportedAnnotation->get(name => "NCBI-human.combined-annotation");
my $mouse_ann_model = Genome::Model::ImportedAnnotation->get(name => "NCBI-mouse.combined-annotation");
my $ann_human36 = $human_ann_model->build_by_version("54_36p_v2");
ok($ann_human36, "got annotation build for human");
my $ann_mouse37 = $mouse_ann_model->build_by_version("54_37g_v2");
ok($ann_mouse37, "got annotation build for mouse");
my $test_sample = Genome::Sample->create(name => 'test_subject');
ok($test_sample, "created test sample");

sub make_profile {
    return Genome::ProcessingProfile::ReferenceAlignment->create(
        name => "test_profile",
        sequencing_platform => 'solexa',
        dna_type => 'cdna',
        read_aligner_name => 'bwa',
        snv_detector_name => 'samtools',
    );
}

sub make_model {
    my ($pp, $ref_seq_build_name, $annotation_build) = @_;

    my $rsb = Genome::Model::Build::ImportedReferenceSequence->get(name => $ref_seq_build_name);
    ok($rsb, "got reference sequence build '$ref_seq_build_name'");
    ok($pp, "created test processing profile for ref sequence '$ref_seq_build_name'");
    my %params = (
        name => "test_model_$ref_seq_build_name" . '_' . ($annotation_build ? $annotation_build->id() : '') . '_' . $pp->id(),
        subject_name => 'test_subject',
        subject_type => 'sample_name',
        processing_profile_id => $pp->id,
        reference_sequence_build => $rsb,
    );
    if($annotation_build) {
        $params{'annotation_reference_build'} = $annotation_build;
    }
    return Genome::Model->create(%params);
}

# Using no annotation is ok
my $pp = make_profile();
ok($pp, "created processing profile");
my $m = make_model($pp, "NCBI-human-build36");
ok(!$m->annotation_reference_build, "no annotation build reported by model");

my $inp = $m->add_input(
    name => "annotation_reference_build",
    value_class_name => "Genome::Model::Build::ImportedAnnotation",
    value_id => $ann_mouse37->id,
);
ok($inp, "created annotation_reference_build input");
$m = Genome::Model->get($m->id);
ok($m->annotation_reference_build);
is($m->annotation_reference_build->name, $ann_mouse37->name, "verified annotation_reference_build input");

# refseq36 vs annotation36 via processing profile
$m = make_model($pp, "NCBI-human-build36", $ann_human36);
ok($m, "created model for build 36 with matching annotation data");
ok($m->annotation_reference_build, "annotation build exists");

# refseq37 vs annotation36 via processing profile
$m = make_model($pp, "NCBI-human-build37", $ann_human36);
ok($m, "created model with mismatched reference sequence and annotation data");
ok($m->annotation_reference_build, "bad annotation_reference_build still returned");
is($m->annotation_reference_build->name, $ann_human36->name, "expected annotation name");

# override non-empty processing profile param with model input (with a species mismatch)
$m->annotation_reference_build_id($ann_mouse37->id);
$m = Genome::Model->get($m->id);
ok($m->annotation_reference_build);
is($m->annotation_reference_build->name, $ann_mouse37->name, "annotation_reference_build input overrides legacy pp param");

done_testing();
