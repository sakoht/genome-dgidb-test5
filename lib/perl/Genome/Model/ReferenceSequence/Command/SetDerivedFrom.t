#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}


my $cmd_class = 'Genome::Model::ReferenceSequence::Command::SetDerivedFrom';
use above "Genome";
use Data::Dumper;
use Test::More tests => 18;
use_ok($cmd_class);

# create a test annotation build and a few reference sequence builds to test compatibility with
my @species_names = ('human');
my @versions = (1, 2, 3);
my $data_dir = File::Temp::tempdir('SetDerivedFrom-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);

my %samples;
for my $sn (@species_names) {
    my $p = Genome::Individual->create(name => "test-$sn-patient", common_name => 'testpatient');
    my $s = Genome::Sample->create(name => "test-$sn-patient", species_name => $sn, common_name => 'tumor', source => $p);
    ok($s, 'created sample');
    $samples{$sn} = $s;
}
my %rbuilds = create_reference_builds(\@species_names, \@versions);

ok(!$rbuilds{'human'}[1]->derived_from, 'build has no derived_from property initially');
ok(!$rbuilds{'human'}[1]->coordinates_from, 'build has no coordinates_from property initially');

my $cmd = $cmd_class->create(child_build => $rbuilds{'human'}[1], parent_build => $rbuilds{'human'}[0]);
ok($cmd, 'created command');
ok($cmd->execute, 'executed command');
is($rbuilds{'human'}[1]->derived_from->id, $rbuilds{'human'}[0]->id, 'derived_from is now set');
is($rbuilds{'human'}[1]->coordinates_from->id, $rbuilds{'human'}[0]->id, 'coordinates_from is now set');

$cmd = $cmd_class->create(child_build => $rbuilds{'human'}[1], clear => 1);
ok($cmd, 'created command');
ok($cmd->execute, 'executed command');
ok(!$rbuilds{'human'}[1]->derived_from, 'derived_from property cleared with --clear');
ok(!$rbuilds{'human'}[1]->coordinates_from, 'coordinates_from property cleared with --clear');

$cmd = $cmd_class->create(child_build => $rbuilds{'human'}[1], parent_build => $rbuilds{'human'}[0], clear => 1);
ok($cmd, 'created command');
eval { $cmd->execute; };
ok($@, "using --parent and --clear together is an error");

done_testing();

sub create_reference_builds {
    my ($species_names, $versions) = @_;
    my %rbuilds;
    my $ref_pp = Genome::ProcessingProfile::ImportedReferenceSequence->create(name => 'test_ref_pp');
    for my $sn (@$species_names) {
        $rbuilds{$sn} = [];

        my $ref_model = Genome::Model::ImportedReferenceSequence->create(
            name                => "test_ref_sequence_$sn",
            processing_profile  => $ref_pp,
            subject_class_name  => ref($samples{$sn}),
            subject_id          => $samples{$sn}->id,
        );
        ok($ref_model, "created reference sequence model ($sn)");

        for my $v (@$versions) {
            my $rs = Genome::Model::Build::ImportedReferenceSequence->create(
                name            => "ref_sequence_${sn}_$v",
                model           => $ref_model,
                fasta_file      => 'nofile',
                data_directory  => $data_dir,
                version         => $v,
                );
            ok($rs, "created ref seq build $sn $v");
            push(@{$rbuilds{$sn}}, $rs);
        }
    }
    return %rbuilds;
}
