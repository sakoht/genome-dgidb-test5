#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';
use Test::More;
use Carp::Always;
use Data::Dumper;
use_ok('Genome::Model::Command::Define::ReferenceAlignment');

# set up required test data
my $reference_version  =    '34';
my $annotation_version = '12_34x';
my $data_dir = File::Temp::tempdir('DefineReferenceAlignmentTest-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);

my $individual = Genome::Individual->create(name => 'test-patient', common_name => 'testpatient');
my $sample = Genome::Sample->create(name => 'test-patient', species_name => 'human', common_name => 'normal', source => $individual);

my $ref_pp = Genome::ProcessingProfile::ImportedReferenceSequence->create(name => 'test_ref_pp');
my $ref_model = Genome::Model::ImportedReferenceSequence->create(
    name                => 'test_ref_sequence',
    processing_profile  => $ref_pp,
    subject_class_name  => ref($sample),
    subject_id          => $sample,
);
my $rbuild = Genome::Model::Build::ImportedReferenceSequence->create(
    name            => 'test_ref_sequence_build',
    model           => $ref_model,
    fasta_file      => 'nofile', 
    data_directory  => $data_dir,
    version         => $reference_version,
);
ok($rbuild, 'created reference sequence build');

my $ann_pp = Genome::ProcessingProfile::ImportedAnnotation->create(name => 'test_ann_pp', annotation_source => 'test_source');
my $ann_model = Genome::Model::ImportedAnnotation->create(
    name                => 'test_annotation',
    processing_profile  => $ann_pp,
    subject_class_name  => ref($sample),
    subject_id          => $sample->id,
);

my $abuild = Genome::Model::Build::ImportedAnnotation->create(
    model           => $ann_model,
    data_directory  => $data_dir,
    version         => $annotation_version,
);
ok($abuild, 'created annotation build');

# make sure the annotation build is 'completed' and has status 'Succeeded '
my $abuild_event = Genome::Model::Event::Build->create(
    model_id => $abuild->model->id,
    build_id => $abuild->id,
    event_type => 'genome model build',
    event_status => 'Succeeded',
    date_completed => UR::Time->now,
);

my $pp = Genome::ProcessingProfile::ReferenceAlignment->create(
    name => 'test_profile',
    sequencing_platform => 'solexa',
    dna_type => 'cdna',
    read_aligner_name => 'bwa',
    snv_detector_name => 'samtools',
    );
ok($pp, 'created ReferenceAlignment processing profile');

sub translate_cmdline {
    my %argv = @_;
    return map {
            my $name = $_;
            $name =~ s/_/-/g;
            "--$name=$argv{$_}"
        } keys %argv;
}

sub test_cmdline {
    my @args = translate_cmdline(@_);
    my $model_name = "test-model-$$";
    push(@args, "--model-name=$model_name");
    my $rv = Genome::Model::Command::Define::ReferenceAlignment->_execute_with_shell_params_and_return_exit_code(@args);
    is($rv, 0, 'executed with command line args');
    my $model = Genome::Model->get(name => $model_name);
    ok($model, 'got model created via command line');
    ok($model->delete, 'deleted model created via command line');
}

sub create_model {
    test_cmdline(@_);
    my $cmd = Genome::Model::Command::Define::ReferenceAlignment->create(@_);
    ok($cmd && !$cmd->__errors__, 'created command without errors');

    ok($cmd->execute, 'executed on object directly');
    return Genome::Model->get($cmd->result_model_id);
}

# begin testing
my $cmd = Genome::Model::Command::Define::ReferenceAlignment->create();
ok($cmd && $cmd->__errors__, 'insufficient parameters generate errors');

# use default reference sequence
my $model = create_model(
    subject_name => $sample->name,
    processing_profile_id => $pp->id,
);
ok($model, 'created model with default reference sequence');
ok($model->reference_sequence_build, 'some default exists for reference sequence');
ok(!$model->annotation_reference_build, 'annotation build is not defined');
$model->delete;

# specify reference sequence by id
$model = create_model(
    subject_name => $sample->name,
    processing_profile_id => $pp->id,
    reference_sequence_build => $rbuild->id,
);
ok($model, 'created model with reference sequence id');
is($model->reference_sequence_build->id, $rbuild->id, 'reference sequence id correct');
ok(!$model->annotation_reference_build, 'annotation build is not defined');
ok($model->delete, 'deleted model');

# specify reference sequence by name
$model = create_model(
    subject_name => $sample->name,
    processing_profile_id => $pp->id,
    reference_sequence_build => $rbuild->name,
);
ok($model, 'created model with reference sequence name');
is($model->reference_sequence_build->id, $rbuild->id, 'reference sequence id correct');
ok(!$model->annotation_reference_build, 'annotation build is not defined');
ok($model->delete, 'deleted model');

# specify annotation build by id
$model = create_model(
    subject_name => $sample->name,
    processing_profile_id => $pp->id,
    reference_sequence_build => $rbuild->name,
    annotation_reference_build => $abuild->id,
);
ok($model, 'created model with annotation build id');
ok($model->annotation_reference_build, 'annotation build is defined');
is($model->annotation_reference_build->id, $abuild->id, 'annotation build id correct');
ok($model->delete, 'deleted model');

# specify annotation build by idstring
$model = create_model(
    subject_name => $sample->name,
    processing_profile_id => $pp->id,
    reference_sequence_build => $rbuild->name,
    annotation_reference_build => $abuild->idstring,
);
ok($model, 'created model with annotation build idstring');
ok($model->annotation_reference_build, 'annotation build is defined');
is($model->annotation_reference_build->id, $abuild->id, 'annotation build id correct');
ok($model->delete, 'deleted model');

# now test the legacy processing profile parameter annotation_reference_transcripts. once migration to the
# model input is complete, this can go away.
ok($pp->annotation_reference_transcripts($abuild->idstring));
is($abuild->idstring, $pp->annotation_reference_transcripts($abuild->idstring),
    "updated legacy annotation_reference_transcripts parameter on processing profile");

$model = create_model(
    subject_name => $sample->name,
    processing_profile_id => $pp->id,
    reference_sequence_build => $rbuild->id,
);
ok($model, 'created model with reference sequence id and legacy annotation_reference_transcripts from processing profile');
is($model->reference_sequence_build->id, $rbuild->id, 'reference sequence id correct');
ok($model->annotation_reference_build, 'annotation build is defined');
is($model->annotation_reference_build->id, $abuild->id, 'annotation build id correct');
ok($model->delete, 'deleted model');

done_testing();
