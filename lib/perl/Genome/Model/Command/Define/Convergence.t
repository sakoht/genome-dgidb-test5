#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';
use Test::More;
use Carp::Always;

my $model_class = 'Genome::Model::Command::Define::Convergence';
my $model_name = "test-define-convergence-model-$$";
use_ok($model_class);

# set up required test data
my $data_dir = File::Temp::tempdir('DefineConvergenceModelTest-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $pp = Genome::ProcessingProfile::Convergence->create(name => 'test-convergence-pp');
ok($pp, 'created processing profile');
my $model_group = Genome::ModelGroup->create(
    id => -12345,
    name => 'TestModelGroup',
    convergence_model_params => {
        data_directory => $data_dir,
    },
);
ok($model_group, 'created ModelGroup');

# begin testing
my $model = create_cmdline(
    "--model-group=" . $model_group->id,
);
ok($model, 'created model via command line');
is($model->name, $model_name, 'model name matches');
is($model->group->id, $model_group->id, 'model group id matches');
ok($model->delete, 'deleted model');

$model = create_cmdline(
    "--processing-profile-name=" . $pp->name,
    "--model-group=" . $model_group->id,
);
ok($model, 'created model via command line (with --processing-profile-name)');
is($model->processing_profile->id, $pp->id, 'processing profile name matches');
is($model->name, $model_name, 'model name matches');
is($model->group->id, $model_group->id, 'model group id matches');
ok($model->delete, 'deleted model');

$model = create_direct(
    model_group_id => $model_group->id,
);
ok($model, 'created model with default processing profile');
is($model->name, $model_name, 'model name matches');
is($model->group->id, $model_group->id, 'model group id matches');
ok($model->delete, 'deleted model');

$model = create_direct(
    model_group_id => $model_group->id,
    processing_profile_name => $pp->name,
);
ok($model, 'created with non default processing profile id');
is($model->processing_profile->id, $pp->id, 'processing profile matches');
ok($model->delete, 'deleted model');

done_testing();

sub create_cmdline {
    my @args = (@_, "--model-name=$model_name");
    my $rv = $model_class->_execute_with_shell_params_and_return_exit_code(@args);
    is($rv, 0, 'executed with command line args');
    return Genome::Model->get(name => $model_name);
}

sub create_direct {
    my @args = (@_, model_name => $model_name);
    my $cmd = $model_class->create(@args);
    ok($cmd && !$cmd->__errors__, 'created command without errors');
    ok($cmd->execute, 'executed on object directly');
    return Genome::Model->get($cmd->result_model_id);
}
