#!/gsc/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use_ok('Genome::Model::Command::Define::GenePrediction') or die;
use_ok('Genome::Model::Command::Define::GenePrediction::Helper') or die;
use_ok('Genome::Model::Command::Define::GenePrediction::Eukaryotic') or die;
use_ok('Genome::Model::Command::Define::GenePrediction::Bacterial') or die;

# ====== Make test objects ======
my $test_egap_pp = Genome::ProcessingProfile::GenePrediction::Eukaryotic->create(
    name => 'test egap pp',
    domain => 'eukaryotic',
    rnammer_version => 45.56.67, # set to nonsense to make pp params unique
);
ok($test_egap_pp, 'created test processing profile successfully') or die;

my $test_bap_pp = Genome::ProcessingProfile::GenePrediction::Bacterial->create(
    name => 'test bap pp',
    domain => 'bacterial',
);

my $test_taxon = Genome::Taxon->create(
    name => 'test taxon',
    domain => 'eukaryotic',
);
ok($test_taxon, 'created test taxon successfully') or die;

# ====== Make temporary files ======
my $test_data_dir = '/gsc/var/cache/testsuite/data';
my $test_output_dir = '/gsc/var/cache/testsuite/running_testsuites';

my $assembly_contigs_file = $test_data_dir . '/Genome-Model-GenePrediction-Eukaryotic/shorter_ctg.dna';

my $snap_model_fh = File::Temp->new(
    DIR => $test_output_dir,
    TEMPLATE => 'gene_prediction_snap_model_XXXXXX',
);
my $snap_model_file = $snap_model_fh->filename;
$snap_model_fh->close;

my $fgenesh_model_fh = File::Temp->new(
    DIR => $test_output_dir,
    TEMPLATE => 'gene_prediction_fgenesh_model_XXXXXX',
);
my $fgenesh_model_file = $fgenesh_model_fh->filename;
$fgenesh_model_fh->close;

my $repeat_library_fh = File::Temp->new(
    DIR => $test_output_dir,
    TEMPLATE => 'gene_prediction_repeat_library_XXXXXX',
);
my $repeat_library_file = $repeat_library_fh->filename;
$repeat_library_fh->close;

ok(-e $assembly_contigs_file, "assembly contigs file exists at $assembly_contigs_file") or die;
ok(-e $snap_model_file, "snap model file exists at $snap_model_file") or die;
ok(-e $fgenesh_model_file, "fgenesh model file exists at $fgenesh_model_file") or die;
ok(-e $repeat_library_file, "repeat library file exists at $repeat_library_file") or die;

# ====== Create eukaryotic model ======
my %params = (
    model_name => 'test_egap_model',
    taxon => $test_taxon,
    processing_profile => $test_egap_pp,
    fgenesh_model => $fgenesh_model_file,
    snap_models => $snap_model_file,
    assembly_contigs_file => $assembly_contigs_file,
    repeat_library => $repeat_library_file,
);
for my $model (create_direct_and_create_cmdline('Genome::Model::Command::Define::GenePrediction::Eukaryotic', %params)) {
    is($model->subject_id, $test_taxon->id, 'got expected model subject');
    is($model->processing_profile_id, $test_egap_pp->id, 'got expected processing profile');
    is($model->fgenesh_model, $fgenesh_model_file, 'got expected fgenesh model file');
    is($model->snap_models, $snap_model_file, 'got expected snap model file');
    is($model->assembly_contigs_file, $assembly_contigs_file, 'got expected assembly contigs file');
    is($model->repeat_library, $repeat_library_file, 'got expected repeat library file');
    $model->delete;
}

# ====== Create bacterial model ======
%params = (
    model_name => 'test_bap_model',
    taxon => $test_taxon,
    processing_profile => $test_bap_pp,
    assembly_contigs_file => $assembly_contigs_file,
);
for my $model (create_direct_and_create_cmdline('Genome::Model::Command::Define::GenePrediction::Bacterial', %params)) {
    is($model->subject_id, $test_taxon->id, 'got expected model subject');
    is($model->processing_profile_id, $test_bap_pp->id, 'got expected processing profile');
    is($model->assembly_contigs_file, $assembly_contigs_file, 'got expected assembly contigs file');
    $model->delete;
}

done_testing();

# ====== Methods ======

sub create_direct_and_create_cmdline {
    my $class = shift;
    my %params = @_;

    my @models;
    create_direct($class, %params);
    my $direct = Genome::Model->get(name => $params{model_name});
    ok($direct, "created model directly");
    push @models, $direct;
    
    $params{model_name} = $params{model_name} . '-cmdline';
    create_cmdline($class, make_argv(%params));
    my $cmdline = Genome::Model->get(name => $params{model_name});
    ok($cmdline, "created model via command line");
    push @models, $cmdline;

    return @models;
}

sub make_argv {
    my %argv = @_;
    return map {
        my ($k, $v) = ($_, $argv{$_});
        $k =~ s/_/-/g;
        $v = $v->id if ref($v) and $v->can('id');
        "--$k=$v";
    } keys %argv; 
}

sub create_cmdline {
    my $class = shift;
    my @args = @_;
    my $rv = $class->_execute_with_shell_params_and_return_exit_code(@args);
    is($rv, 0, "create via command line ok (" . join(',', @args) . ")");
    return 1;
}

sub create_direct {
    my $class = shift;
    my %args = @_;
    my $specified = join(',', keys %args);
    my $cmd = $class->create(%args);
    ok($cmd && !$cmd->__errors__, "created command without errors (specified $specified)");
    ok($cmd->execute, "command executed ok");
    return 1;
}
