#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More tests => 17;
use Carp::Always;

#These get reused several times in this test--if later this test somehow depends on the contents of the directories make one for each
my $temp_model_data_dir = File::Temp::tempdir('t-SomaticValidation_Model-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $temp_build_data_dir = File::Temp::tempdir('t_SomaticValidation_Build-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);

### Set up fake completed reference alignment builds

my $test_models = setup_test_models(); # { tumor => $model, normal => $model }

my $processing_profile = Genome::ProcessingProfile::SomaticValidation->create(
    name => 'test_somatic_validation_' . $$,
    snv_detection_strategy => 'test v1 [--only-a-test 1]',
);

my $data = <<EOBED
1	10003	10004	A/T
EOBED
;
my $test_bed_file = Genome::Sys->create_temp_file_path;
Genome::Sys->write_file($test_bed_file, $data);
my $test_bed_file_md5 = Genome::Sys->md5sum($test_bed_file);
my $snv_variant_list = Genome::FeatureList->create(
    name => 'test_somatic_validation_feature_list',
    format              => 'true-BED',
    content_type        => 'target region set',
    file_path           => $test_bed_file,
    file_content_hash   => $test_bed_file_md5,
    reference_id        => $test_models->{tumor}->reference_sequence_build->id,
);
isa_ok($snv_variant_list, 'Genome::FeatureList', 'created test feature-list');

### Begin a SomaticValidation test run

my $create_command = Genome::Model::Command::Define::SomaticValidation->create(
    model_name => 'somatic_validation_define_test-model',
    tumor_model => $test_models->{tumor},
    normal_model => $test_models->{normal},
    processing_profile => $processing_profile,
    snv_variant_list => $snv_variant_list,
);

ok($create_command, 'Created command to create SomaticValidation model.');

ok($create_command->execute, 'Executed create command');

ok(my $somatic_model_id = $create_command->result_model_id, "Got result model id");
ok(my $somatic_model = Genome::Model->get($somatic_model_id), "Got the model from result model id");
isa_ok($somatic_model, "Genome::Model::SomaticValidation");

# Create some test models with builds and all of their prerequisites
sub setup_test_models {
    my $test_profile = Genome::ProcessingProfile::ReferenceAlignment->create(
        name => 'test_profile',
        sequencing_platform => 'solexa',
        dna_type => 'cdna',
        read_aligner_name => 'bwa',
        snv_detection_strategy => 'samtools',
    );
    ok($test_profile, 'created test processing profile');

    my $test_individual = Genome::Individual->create(
        common_name => 'TEST',
        name => 'test_individual',
    );
    ok($test_individual, 'created test individual');

    my $test_sample = Genome::Sample->create(
        name => 'test_subject',
        source_id => $test_individual->id,
    );
    ok($test_sample, 'created test sample');

    my $test_instrument_data = Genome::InstrumentData::Solexa->create(
    );
    ok($test_instrument_data, 'created test instrument data');

    my $imported_reference_sequence_build = Genome::Model::Build::ImportedReferenceSequence->get(name => 'NCBI-human-build36');
    isa_ok($imported_reference_sequence_build, 'Genome::Model::Build::ImportedReferenceSequence') or die;

    my $test_model = Genome::Model->create(
        name => 'test_reference_aligment_model_TUMOR',
        subject_name => 'test_subject',
        subject_type => 'sample_name',
        processing_profile_id => $test_profile->id,
        reference_sequence_build => $imported_reference_sequence_build,
    );
    ok($test_model, 'created test model');

    my $add_ok = $test_model->add_instrument_data($test_instrument_data);
    ok($add_ok, 'added inst data to model');

    my $test_build = Genome::Model::Build->create(
        model_id => $test_model->id,
        data_directory => $temp_build_data_dir,
    );
    ok($test_build, 'created test build');

    my $test_model_two = Genome::Model->create(
        name => 'test_reference_aligment_model_mock_NORMAL',
        subject_name => 'test_subject',
        subject_type => 'sample_name',
        processing_profile_id => $test_profile->id,
        reference_sequence_build => $imported_reference_sequence_build,
    );
    ok($test_model_two, 'created second test model');

    $add_ok = $test_model_two->add_instrument_data($test_instrument_data);
    ok($add_ok, 'added inst data to second model');

    my $test_build_two = Genome::Model::Build->create(
        model_id => $test_model_two->id,
        data_directory => $temp_build_data_dir,
    );
    ok($test_build_two, 'created second test build');

    return {tumor => $test_model, normal => $test_model_two};
}
