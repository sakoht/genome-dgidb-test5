#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Test::More;

use_ok('Genome::Model::Command::Input::Add') or die;
use_ok('Genome::Model::Command::Input::Remove') or die;

class Shape { is => 'UR::Object', id_by => 'name', has => [ name =>  { is => 'Text', }, ], };
my $square = Shape->create(name => 'square');
ok($square, 'create a square');
my $circle = Shape->create(name => 'circle');
ok($circle, 'create a circle');
class Genome::ProcessingProfile::Tester {
    is => 'Genome::ProcessingProfile',
};
my $sample = Genome::Sample->create(name => '__SAMPLE__');
ok($sample, 'create sample');
my $pp = Genome::ProcessingProfile::Tester->create(name => '__PP__');
ok($pp, 'create pp');
class Genome::Model::Tester {
    is => 'Genome::Model',
    has => [
        colors => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'color', value_class_name => 'UR::Value', ],
            is_many => 1,
            is_mutable => 1,
        },
        purposes => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'purpose', value_class_name => 'UR::Value', ],
            is_many => 1,
            is_mutable => 1,
            is_optional => 1,
        },
        shape_ids => { 
            via => 'shapes',
            to => 'to',
        },
        shapes => {
            is => 'Shape',
            via => 'inputs',
            to => 'value',
            where => [ name => 'shape', value_class_name => 'Shape', ],
            is_mutable => 1,
            is_optional => 1,
            is_many => 1,
        },
        single => {
            is => 'UR::Value',
            via => 'inputs',
            to => 'value',
            where => [ name => 'many', value_class_name => 'UR::Value', ],
            is_mutable => 1,
            is_optional => 1,
            is_many => 0,
        },
    ],
};
my $model = Genome::Model::Tester->create(
    name => '__MODEL__',
    subject => $sample,
    subject_class_name => $sample->class,
    processing_profile => $pp,
    colors => [qw/ red /],
    purposes => [qw/ fun /],
    shapes => [ $square, $circle ],
);
ok($model, 'create model') or die;
is_deeply([$model->colors], [qw/ red /], 'set colors on create');
is_deeply([$model->purposes], [qw/ fun /], 'set purposes on create');
is_deeply([$model->shapes], [$circle,$square], 'set shapes on create');

class Genome::Model::Build::Tester {
    is => 'Genome::Model::Build',
    has => [
        shapes => {
            is => 'Shape',
            via => 'inputs',
            to => 'value',
            where => [ name => 'shape', value_class_name => 'Shape', ],
            is_mutable => 1,
            is_optional => 1,
            is_many => 1,
        },
         colors => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'color', value_class_name => 'UR::Value', ],
            is_many => 1,
            is_mutable => 1,
        },
        purposes => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'purpose', value_class_name => 'UR::Value', ],
            is_many => 1,
            is_mutable => 1,
            is_optional => 1,
        },
    ],
};
my $build = Genome::Model::Build->create( 
    model => $model,
    data_directory => '/tmp/__DUMMY__',
);
ok($build, 'create build');
is_deeply([$build->colors], [$model->colors], 'set build colors on create');
is_deeply([$build->purposes], [$model->purposes], 'set build purposes on create');
is_deeply([$build->shapes], [$model->shapes], 'set build shapes on create');
$build->status('Succeeded');

# add
my $add = Genome::Model::Command::Input::Add->create(
    model => $model,
    name => 'colors',
    'values' => [qw/ blue /],
);
ok($add, 'create');
$add->dump_status_messages(1);
ok($add->execute, 'execute');
is_deeply([$model->colors], [qw/ blue red /], 'colors are red and blue');

# add colors => blue - OK already exists 
$add = Genome::Model::Command::Input::Add->create(
    model => $model,
    name => 'colors',
    'values' => [qw/ blue /],
);
ok($add, 'create');
$add->dump_status_messages(1);
ok($add->execute, 'execute');
is_deeply([sort { $a cmp $b } $model->colors], [qw/ blue red /], 'colors are red and blue');

# remove colors => blue and abandon no builds - OK
my $rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'colors',
    'values' => [qw/ blue /],
    abandon_builds => 1,
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok($rm->execute, 'execute');
is_deeply([sort { $a cmp $b } $model->colors], [qw/ red /], 'colors are red');
is($build->status, 'Succeeded', 'build is succeeded');

# remove colors => blue - NOT OK leaves no colors, which is required
$rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'colors',
    'values' => [qw/ red /],
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok(!$rm->execute, 'execute');
is_deeply([sort { $a cmp $b } $model->colors], [qw/ red /], 'colors are red');
is($build->status, 'Succeeded', 'build is succeeded');

# remove colors => yellow - OK does not exist
$rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'colors',
    'values' => [qw/ yellow /],
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok($rm->execute, 'execute');
is_deeply([sort { $a cmp $b } $model->colors], [qw/ red /], 'colors are blue');
is($build->status, 'Succeeded', 'build is succeeded');

# remove purpose => fun - leaves no values for prop, but this is OK
$rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'purposes',
    'values' => [qw/ fun /],
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok($rm->execute, 'execute');
is_deeply([sort { $a cmp $b } $model->purposes], [qw/ /], 'purposes are undef');
is($build->status, 'Succeeded', 'build is succeeded');

# add shape => square - OK w/ name filter, already exists
$add = Genome::Model::Command::Input::Add->create(
    model => $model,
    name => 'shapes',
    'values' => [qw/ name=square /],
);
ok($add, 'create');
$add->dump_status_messages(1);
ok($add->execute, 'execute');
is_deeply([sort { $a->name cmp $b->name } $model->shapes], [$circle, $square], 'shapes are circle and square');

# remove shapes => square - OK w/ id
$rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'shapes',
    'values' => [ $square->id ],
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok($rm->execute, 'execute');
is_deeply([$model->shapes], [$circle], 'shapes are circle');
is($build->status, 'Succeeded', 'build is succeeded');

# add shape => square - OK w/ id
$add = Genome::Model::Command::Input::Add->create(
    model => $model,
    name => 'shapes',
    'values' => [ $square->id ],
);
ok($add, 'create');
$add->dump_status_messages(1);
ok($add->execute, 'execute');
is_deeply([sort { $a->name cmp $b->name } $model->shapes], [$circle, $square], 'shapes are circle and square');

# remove shapes => circle and abandon build - OK
is_deeply([$build->shapes], [$model->shapes], 'model/build shapes match');
$rm =Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'shapes',
    'values' => [qw/ name=circle /],
    abandon_builds => 1,
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok($rm->execute, 'execute');
is_deeply([$model->shapes], [$square], 'shapes are square');
is($build->status, 'Abandoned', 'abandoned build');

# FAIL add invalid input property
$add = Genome::Model::Command::Input::Add->create(
    model => $model,
    name => 'shape_ids',
    'values' => [qw/ blah /],
);
ok($add, 'create');
$add->dump_status_messages(1);
ok(!$add->execute, 'execute failed b/c input is not found');

# FAIL remove invalid input property
$rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'shape_ids',
    'values' => [qw/ blah /],
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok(!$rm->execute, 'execute failed b/c input is not found');

# FAIL add single => blah - NOT OK b/c this is a single property
$add = Genome::Model::Command::Input::Add->create(
    model => $model,
    name => 'single',
    'values' => [qw/ blah /],
);
ok($add, 'create');
$add->dump_status_messages(1);
ok(!$add->execute, 'execute failed b/c single is not many');

# FAIL remove single => blah - NOT OK b/c this is a single property
$rm = Genome::Model::Command::Input::Remove->create(
    model => $model,
    name => 'single',
    'values' => [qw/ blah /],
);
ok($rm, 'create');
$rm->dump_status_messages(1);
ok(!$rm->execute, 'execute failed b/c single is not many');

done_testing();
exit;

