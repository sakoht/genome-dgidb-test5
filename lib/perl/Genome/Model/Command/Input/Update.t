#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';
use Genome::Model;
use Test::More;

use_ok('Genome::Model::Command::Input::Update') or die;

class Shape { is => 'UR::Object', id_by => 'name', has => [ name =>  { is => 'Text', }, ], };
sub Shape::__display_name__ { return $_[0]->name.' ('.$_[0]->id.')'; };
my $square = Shape->create(name => 'square');
ok($square, 'create a square');
my $circle = Shape->create(name => 'circle');
ok($circle, 'create a circle');
class Genome::ProcessingProfile::Tester {
    is => 'Genome::ProcessingProfile',
};
class Genome::Model::Tester {
    is => 'Genome::ModelDeprecated',
    has => [
        color => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'color', value_class_name => 'UR::Value', ],
            is_many => 0,
            is_mutable => 1,
        },
        purpose => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'purpose', value_class_name => 'UR::Value', ],
            is_many => 0,
            is_mutable => 1,
            is_optional => 1,
        },
        shape => {
            is => 'Shape',
            via => 'inputs',
            to => 'value',
            where => [ name => 'shape', value_class_name => 'Shape', ],
            is_many => 0,
            is_mutable => 1,
            is_optional => 1,
        },
        lots => {
            is => 'UR::Value',
            via => 'inputs',
            to => 'value',
            where => [ name => 'lots', value_class_name => 'UR::Value', ],
            is_mutable => 1,
            is_optional => 1,
            is_many => 1,
        },
        strange_property_name => {
            is => 'Text',
            via => 'inputs',
            to => 'value_id',
            where => [ name => 'alternate_input_name', value_class_name => 'UR::Value', ],
            is_mutable => 1,
            is_optional => 1,
            is_many => 0,
        },
    ],
};
my $sample = Genome::Sample->create(name => '__SAMPLE__');
ok($sample, 'create sample');
my $pp = Genome::ProcessingProfile::Tester->create(name => '__PP__');
ok($pp, 'create pp');
my $model = Genome::Model::Tester->create(
    name => '__MODEL__',
    subject => $sample,
    processing_profile => $pp,
    color => 'red',
    purpose => 'fun',
    shape => $square,
);
ok($model, 'create model') or die;
is($model->color, 'red', 'set color on create');
is($model->purpose, 'fun', 'set purpose on create');
is_deeply($model->shape, $square, 'set shape on create');
my @input_value_ids = sort map { $_->value_id } $model->inputs;
is_deeply(\@input_value_ids, [qw/ fun red square /], 'inputs match');
ok(!eval{ $model->shape('yellow'); }, 'failed to set shape to a string');

my $model2 = Genome::Model::Tester->create(
    name => '__MODEL2__',
    subject => $sample,
    processing_profile => $pp,
    color => 'orange',
    purpose => 'fun and profit',
    shape => $square,
);
ok($model, 'create second model') or die;

my $update = Genome::Model::Command::Input::Update->create(
    models => [$model, $model2],
    name => 'color',
    value => 'blue',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - update property');
is($model->color, 'blue', 'color is now blue');
is($model2->color, 'blue', 'color is now blue on second model');

my $tx = UR::Context::Transaction->begin();
$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'purpose',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - update optional property to NULL');
is($model->purpose, undef, 'successfully undefined property');
ok($tx->commit(), 'did not produce inconsistent result'); #can't have an input object with NULL value_id

my $tx2 = UR::Context::Transaction->begin();
$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'purpose',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - update optional already NULL property to NULL');
ok($tx2->commit(), 'did not produce inconsistent result');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'purpose',
    value => 'awesomeness',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - set value on initially undefined optional input');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'shape',
    value => 'name=circle',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - update shape');
is_deeply([$model->shape], [$circle], 'execute - update shape to circle');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'alternate_input_name',
    value => 'alternate_value',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - update a when input and property names do not match and input is provided');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'strange_property_name',
    value => 'strange_value',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok($update->execute, 'execute - update a when input and property names do not match and property is provided');



# fails
$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'shape',
    value => 'name=yellow',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok(!$update->execute, 'execute failed to update where the value object does not exist');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'shape_id',
    value => 'name=circle',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok(!$update->execute, 'execute failed to update non input');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'not_a_property',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok(!$update->execute, 'execute failed to update non property');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'color',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok(!$update->execute, 'execute failed to update required property to NULL');

$update = Genome::Model::Command::Input::Update->create(
    models => [$model],
    name => 'lots',
    value => 'Watson',
);
ok($update, 'create');
$update->dump_status_messages(1);
ok(!$update->execute, 'execute failed to update "lots" - an "is_many" property');

done_testing();
exit;

