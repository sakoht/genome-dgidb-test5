#!/usr/bin/env perl

use strict;
use warnings;

use above 'Genome';

use Data::Dumper 'Dumper';
use Test::More;
use Test::MockObject;

$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
$ENV{UR_DBI_NO_COMMIT} = 1;

use_ok('Genome::Model::Command::InstrumentData::Assign') or die;

my $pp = Genome::ProcessingProfile::TestPipeline->create(
    name => 'Test Pipeline Test for Testing',
    some_command_name => 'ls',
);
ok($pp, "created processing profile") or die;

my $model = Genome::Model->create(
    processing_profile => $pp,
    subject_name => 'human',
    subject_type => 'species_name',
    user_name => 'apipe',
);
ok($model, 'create model') or die;

my @sanger_id = map { Genome::InstrumentData::Sanger->create(id => '0'.$_.'jan00.101amaa') } (1..4);
is(@sanger_id, 4, 'create instrument data') or die;
no warnings qw/once redefine/;
*Genome::ModelDeprecated::compatible_instrument_data = sub{ return @sanger_id; };
use warnings;
my @compatible_id = $model->compatible_instrument_data;
is_deeply(\@sanger_id, \@compatible_id, 'overload compatible instrument data');

my $flow_cell = Genome::InstrumentData::FlowCell->create(id => '__TEST_FLOW_CELL__');
ok($flow_cell, 'create flow cell') or die;
my $solexa_id = Genome::InstrumentData::Solexa->create(flow_cell_id => $flow_cell->id);
ok($solexa_id, 'create solexa inst data') or die;
is_deeply([ $flow_cell->lanes ], [ $solexa_id ], 'got lanes from flow cell');

my ($assign, @assigned_inst_data);

# Fails
$assign = Genome::Model::Command::InstrumentData::Assign->create(
    all => 1,
);
ok($assign, 'create w/o model - will fail execute');
$assign->dump_status_messages(1);
ok(!$assign->execute, 'execute failed as exepcted w/o model');
$assign->delete;

$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    all => 1,
    instrument_data => \@sanger_id,
);
ok($assign, 'create to request multiple functions - will fail execute');
$assign->dump_status_messages(1);
ok(!$assign->execute, 'execute');
$assign->delete;

# Sucess
$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    instrument_data => [$sanger_id[0]],
    force => 1,
);
ok($assign, 'create to assign single instrument data');
$assign->dump_status_messages(1);
ok($assign->execute, 'execute');
@assigned_inst_data = $model->instrument_data;
is_deeply(\@assigned_inst_data, [ $sanger_id[0], ], 'confirmed assigned inst data');

$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    instrument_data => [ $sanger_id[1], $sanger_id[2], ],
    force => 1,
);
ok($assign, 'create to assign multiple instrument data');
$assign->dump_status_messages(1);
ok($assign->execute, 'execute');
@assigned_inst_data = $model->instrument_data;
is_deeply(\@assigned_inst_data, [ @sanger_id[0..2], ], 'confirmed assigned inst data');

$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    all => 1,
);
ok($assign, 'create to assign all available instrument data');
$assign->dump_status_messages(1);
ok($assign->execute, 'execute');
@assigned_inst_data = $model->instrument_data;
is_deeply(\@assigned_inst_data, \@sanger_id, 'confirmed assigned inst data');

#Add an ignored InstrumentData, and make sure Assign --all doesn't grab it.
Genome::InstrumentData::Sanger->create(id => '05.jan00.101amaa');

$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    all => 1,
);
ok($assign, 'create to assign all available instrument data');
$assign->dump_status_messages(1);
ok($assign->execute, 'execute');
@assigned_inst_data = $model->instrument_data;
is_deeply(\@assigned_inst_data, \@sanger_id, 'confirmed skip ignored  inst data');


$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    flow_cell_id => $solexa_id->flow_cell_id,
    force => 1,
);
ok($assign, 'create to assign by flow cell id');
$assign->dump_status_messages(1);

ok($assign->execute, 'execute');
@assigned_inst_data = $model->instrument_data;
is_deeply(\@assigned_inst_data, [ @sanger_id, $solexa_id ], 'confirmed assigned inst data');

note('Reassign inst data is ok');
$assign = Genome::Model::Command::InstrumentData::Assign->create(
    model => $model,
    instrument_data => [$sanger_id[0]],
    force => 1,
);
ok($assign, 'create to reassign single instrument data');
$assign->dump_status_messages(1);
ok($assign->execute, 'execute');

done_testing();
exit;

