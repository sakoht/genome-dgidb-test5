#!/usr/bin/env perl
use strict;
use warnings;
BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above "Genome";
use Data::Dumper;
use Test::More;

my $tstcount = 0;

# This tests that anything returned from Genome::Model::additional_params_for_copy
# can still be explicitly overridden when copying a model.
# (e.g., reference_sequence_build for reference alignment models).

# Params we expect to be the same in the source and destination model.
my @expect_same = (
    'subject_class_name',
    'subject_id',
    'user_name',
    'subclass_name',
);

# This param will be overridden in the copy command.
my @overrides = ( "model_param=override" );

# Create test data and classes, overriding the relevant methods.
my $p = Genome::Individual->create(name => 'test-patient', common_name => 'testpatient');
ok($p, 'created patient'); ++$tstcount;
my $s = Genome::Sample->create(name => 'test-patient-sample', common_name => 'tumor', source => $p);
ok($s, 'created sample'); ++$tstcount;

class Genome::ProcessingProfile::TestCopy { is => 'Genome::ProcessingProfile' };
ok(Genome::ProcessingProfile::TestCopy->__meta__, 'created processing profile type/class'); ++$tstcount;

class Genome::Model::Command::Define::TestCopy {
    is  => 'Genome::Model::Command::Define',
    has => ['model_param'],
};
sub Genome::Model::Command::Define::TestCopy::type_specific_parameters_for_create {
    my $self = shift;
    return (model_param => $self->model_param);
}

class Genome::Model::TestCopy {
    is  => 'Genome::Model',
    has => ['model_param'],
};
sub Genome::Model::TestCopy::additional_params_for_copy {
    my $self = shift;
    return (model_param => $self->model_param);
};

my $src_pp = Genome::ProcessingProfile::TestCopy->create(name=> 'source profile');
my $dst_pp = Genome::ProcessingProfile::TestCopy->create(name=> 'destination profile');
ok($src_pp, 'created src processing profile') or diag Genome::ProcessingProfile::TestCopy->error_message();
++$tstcount;
ok($dst_pp, 'created dst processing profile') or diag Genome::ProcessingProfile::TestCopy->error_message();
++$tstcount;

my $src_model = Genome::Model->create(
    name                => 'test copy model source',
    processing_profile  => $src_pp,
    model_param         => 'set in src_model',
    subject_class_name  => ref($s),
    subject_id          => $s->id,
);
ok($src_model, 'created source model'); ++$tstcount;

# We have all the test data, now do the copy.
my $copy_cmd = Genome::Model::Command::Copy->create(
    from            => $src_model,
    to              => 'test copy model destination',
    model_overrides => ['processing_profile_id='.$dst_pp->id, 'model_param=overridden'],
);
ok($copy_cmd, 'created copy command'); ++$tstcount;
ok($copy_cmd->execute(), 'executed copy command'); ++$tstcount;

my $dst_model = Genome::Model->get(name => $copy_cmd->to);
ok($dst_model, "fetched destination model"); ++$tstcount;

# Check the destination model for correctness.
for my $s (@expect_same) {
    ok($src_model->$s, "$s defined in source model"); ++$tstcount;
    ok($dst_model->$s, "$s defined in destination model"); ++$tstcount;
    ok($src_model->$s eq $dst_model->$s, "destination model value for '$s' copied"); ++$tstcount;
}

ok('overridden' eq $dst_model->model_param, 'model_param overridden properly'); ++$tstcount;
ok($dst_pp->id == $dst_model->processing_profile_id, 'processing_profile_id overridden properly'); ++$tstcount;

done_testing($tstcount);

1;
