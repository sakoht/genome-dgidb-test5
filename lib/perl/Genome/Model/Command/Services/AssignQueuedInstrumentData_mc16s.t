#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';

use Data::Dumper;
use Test::MockObject;
use Test::More;

use_ok('Genome::Model::Command::Services::AssignQueuedInstrumentData') or die;

my $qidfgm_cnt = 0;
my $sample_cnt = 0;
my (@samples, @instrument_data, @pses, @pse_params);
no warnings;
sub GSC::PSE::get { return @pses; }
sub GSC::PSEParam::get { return @pse_params; }
use warnings;

my $taxon = Genome::Taxon->get(name => 'Human Metagenome');
ok($taxon, 'got human metagenome taxon');
my $pp = Genome::ProcessingProfile->get(2571784);
ok($pp, 'got mc16s pp');
for my $i (1..2) {
    ok(_qidfgm(), 'create qidfgm');
}
is(@instrument_data, $qidfgm_cnt, "create $qidfgm_cnt inst data");
is(@pses, $qidfgm_cnt, "create $qidfgm_cnt pses");

my $gsc_project = Test::MockObject->new();
$gsc_project->set_isa('Genome::Site::WUGC::SetupProjectResearch');
$gsc_project->set_always(id => -111);
$gsc_project->set_always(name => 'AQID-TEST-PROJECT');
$gsc_project->set_always(setup_name => 'AQID-TEST-PROJECT');
my $gsc_workorder = Test::MockObject->new();
$gsc_workorder->set_isa('Genome::Site::WUGC::SetupWorkOrder');
$gsc_workorder->set_always(id => -222);
$gsc_workorder->set_always(name => 'AQID-TEST-WORKORDER');
$gsc_workorder->set_always(setup_name => 'AQID-TEST-WORKORDER');
$gsc_workorder->set_always(get_project => $gsc_project);
$gsc_workorder->set_always(pipeline => '16S 454');

my $cmd = Genome::Model::Command::Services::AssignQueuedInstrumentData->create(
    test => 1,
);
ok($cmd, 'create aqid');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
my @new_models = values %{$cmd->_newly_created_models};
my %new_models = _model_hash(@new_models);
my @existing_models = values %{$cmd->_existing_models_assigned_to};
my %existing_models = _model_hash(@existing_models);
#print Dumper(\%new_models,\%existing_models);
my $model_name_for_entire_run = "R_2011_07_27_14_54_40_FLX08080419_Administrator_113684816_r1.prod-mc16s-qc";
is_deeply(
    \%new_models,
    {
        "AQID-testsample1.prod-metagenomic_composition_16s" => {
            subject => $samples[0]->name,
            processing_profile_id => Genome::Model::Command::Services::AssignQueuedInstrumentData->_default_mc16s_processing_profile_id,
            inst => [ $instrument_data[0]->id ],
            auto_assign_inst_data => 1,
        },
        "AQID-testsample2.prod-metagenomic_composition_16s" => {
            subject => $samples[1]->name,
            processing_profile_id => Genome::Model::Command::Services::AssignQueuedInstrumentData->_default_mc16s_processing_profile_id,
            inst => [ $instrument_data[1]->id ],
            auto_assign_inst_data => 1,
        },
        $model_name_for_entire_run => {
            subject => "Human Metagenome",
            processing_profile_id => Genome::Model::Command::Services::AssignQueuedInstrumentData->_default_mc16s_processing_profile_id,
            inst => [ map { $_->id } @instrument_data ],
            auto_assign_inst_data => 0,
        },
    },
    'new models for run 1',
);
is_deeply(
    \%existing_models, 
    { $model_name_for_entire_run => $new_models{$model_name_for_entire_run} },
    'existing models for run 1',
);
my @projects = Genome::Project->get('name in' => [ map { $_->setup_name } $gsc_project, $gsc_workorder ]);
is(@projects, 2, 'created projects');
is_deeply(
    [ sort { $a <=> $b } map { $_->id } @projects ],
    [ sort { $a <=> $b } map { $_->id } ($gsc_project, $gsc_workorder) ],
    'project ids match gsc entity ids',
);
my @model_groups = Genome::ModelGroup->get(uuid => [ map { $_->id } @projects ]);
is(@model_groups, 2, 'created model groups');

ok(_qidfgm(), 'made another qdidfgm');
ok(_qidfgm('n-ctrl'), 'create qidfgm'); # pse for negatice control sample
is(@instrument_data, $qidfgm_cnt, "$qidfgm_cnt inst data");
is(@pses, $qidfgm_cnt, "$qidfgm_cnt pses");

$cmd = Genome::Model::Command::Services::AssignQueuedInstrumentData->create(
    test => 1,
);
ok($cmd, 'create aqid');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@new_models = values %{$cmd->_newly_created_models};
%new_models = _model_hash(@new_models);
@existing_models = values %{$cmd->_existing_models_assigned_to};
%existing_models = _model_hash(@existing_models);
#print Dumper(\%new_models,\%existing_models);
is_deeply(
    \%new_models,
    {
        "AQID-testsample3.prod-metagenomic_composition_16s" => {
            subject => $samples[2]->name,
            processing_profile_id => Genome::Model::Command::Services::AssignQueuedInstrumentData->_default_mc16s_processing_profile_id,
            inst => [ $instrument_data[2]->id ],
            auto_assign_inst_data => 1,
        },
    },
    'new models for run 2',
);
is_deeply(
    \%existing_models,
    {
        $model_name_for_entire_run => {
            subject => "Human Metagenome",
            processing_profile_id => Genome::Model::Command::Services::AssignQueuedInstrumentData->_default_mc16s_processing_profile_id,
            inst => [ map { $_->id } grep { $_->sample_name ne 'n-ctrl' } @instrument_data ],
            auto_assign_inst_data => 0,
        },
    },
    'existing models for run 2',
);

done_testing();
exit;

sub _qidfgm {
    $qidfgm_cnt++;
    my $sample;
    if ( @_ ) {
        $sample = Genome::Sample->create(name => $_[0]);
    } else {
        $sample_cnt++;
        $sample = Genome::Sample->create(
            name => 'AQID-testsample'.$sample_cnt,
            taxon_id => $taxon->id,
            extraction_type => 'genomic',
        );
    }
    ok($sample, 'sample '.$sample_cnt);
    push @samples, $sample;
    my $library = Genome::Library->create(
        name => $sample->name.'-testlib',
        sample_id => $sample->id,
    );
    ok($library, 'create library '.$qidfgm_cnt);

    my $instrument_data = Genome::InstrumentData::454->create(
        library_id => $library->id,
        run_name => 'R_2011_07_27_14_54_40_FLX08080419_Administrator_113684816',
        region_number => 1,
    );
    ok($instrument_data, 'created instrument data '.$qidfgm_cnt);
    push @instrument_data, $instrument_data;

    my $pse = Test::MockObject->new();
    $pse->set_always(pse_status => 'inprogress');
    $pse->set_always(id => $qidfgm_cnt - 10000);
    $pse->set_always(pse_id => $qidfgm_cnt - 10000);
    $pse->set_always(ps_id => 3733);
    $pse->set_always(ei_id => '464681');
    ok($pse, 'create pse '.$qidfgm_cnt);
    my %params = (
        instrument_data_type => '454',
        instrument_data_id => $instrument_data->id,
        subject_class_name => 'Genome::Sample',
        subject_id => $sample->id,
        processing_profile_id => $pp->id,
    );
    $pse->mock(
        add_param => sub{
            my ($pse, $key, $value) = @_;
            my $param = Test::MockObject->new();
            push @pse_params, $param;
            $param->set_always(pse_id => $pse->id);
            $param->set_always(param_name => $key);
            $param->set_always(param_value => $params{$key});
            return $param;
        }
    );
    for my $key ( keys %params ) {
        $pse->add_param($key, $params{$key});
    }
    $pse->mock(
        added_param => sub{
            my ($pse, $key) = @_;
            return $params{$key};
        }
    );
    $pse->mock(
        get_inherited_assigned_directed_setups_filter_on => sub{
            my $self = shift;
            my $filter = shift;
            my @a;
            push @a, $gsc_workorder if $filter eq 'setup work order';
            push @a, $gsc_project if $filter eq 'setup project';
            return @a;
        },
    );
    push @pses, $pse;
    return 1;
}

sub _model_hash {
    return map { 
        $_->name => { 
            subject => $_->subject_name, 
            processing_profile_id => $_->processing_profile_id,
            inst => [ map { $_->id } $_->instrument_data ],
            auto_assign_inst_data => $_->auto_assign_inst_data,
        }
    } @_;
}

