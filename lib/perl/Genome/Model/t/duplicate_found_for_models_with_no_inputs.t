# duplicate_found_for_models_with_no_inputs.t
# The Genome::Model::duplicates method should find duplicates for models which
# have the same subject and processing profile but no inputs.

use strict;
use warnings;

use Test::More;
use above 'Genome';
use File::Temp;

ok($ENV{UR_DBI_NO_COMMIT} = 1, 'UR_DBI_NO_COMMIT is enabled');
ok($ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1, 'UR_USE_DUMMY_AUTOGENERATED_IDS is enabled');


use_ok('Genome::Model') or die;

class Genome::Model::Tester { is => 'Genome::ModelDeprecated' };
class Genome::Model::Build::Tester { is => 'Genome::Model::Build' };
class Genome::ProcessingProfile::Tester { is => 'Genome::ProcessingProfile' };
sub Genome::ProcessingProfile::Tester::sequencing_platform { return 'solexa'; };

my $pp_a = Genome::ProcessingProfile->create(name => 'Tester Proccesing Profile A', type_name => 'tester');
isa_ok($pp_a, 'Genome::ProcessingProfile') or die;

my $pp_b = Genome::ProcessingProfile->create(name => 'Tester Proccesing Profile B', type_name => 'tester');
isa_ok($pp_b, 'Genome::ProcessingProfile') or die;

my $sample = Genome::Sample->create(name => 'Test Sample');
isa_ok($sample, 'Genome::Sample') or die;

my $library = Genome::Library->create(name => $sample->name.'-testlib', sample_id => $sample->id);
isa_ok($library, 'Genome::Library');

my $model_a = Genome::Model->create(
    name => 'Tester Model A',
    processing_profile => $pp_a,
    subject_id => $sample->id,
    subject_class_name => $sample->class,
);
isa_ok($model_a, 'Genome::Model::Tester');

my $model_b = Genome::Model->create(
    name => 'Tester Model B',
    processing_profile => $pp_b,
    subject_id => $sample->id,
    subject_class_name => $sample->class,
);
isa_ok($model_b, 'Genome::Model::Tester');

is($model_a->duplicates, 0, 'Model A does not have duplicates');

$model_b->processing_profile($pp_a);
is($model_b->processing_profile->id, $pp_a->id, 'Model B switch to Model A\'s processing profile'); 

is($model_a->duplicates, 1, 'Model A has duplicates');

done_testing();
