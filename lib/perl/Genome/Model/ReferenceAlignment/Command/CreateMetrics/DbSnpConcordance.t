use strict;
use warnings;

use above 'Genome';

use Test::More tests => 30;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use_ok("Genome::Model::ReferenceAlignment::Command::CreateMetrics::DbSnpConcordance");

my $snv_file_data = <<EOF
1\t2\t3\tA/T\t45
2\t2\t3\tA/T\t45
3\t2\t3\tA/T\t45
22\t2\t3\tA/T\t45
X\t2\t3\tA/T\t45
EOF
;

my $dbsnp_file_data = <<EOF
1\t2\t3\tA/T\t45
2\t2\t3\tA/T\t45
3\t2\t3\tA/T\t45
X\t2\t3\tA/T\t45
EOF
;

my $tmpdir = Genome::Sys->create_temp_directory();

my $build = setup_test_builds();
ok($build, 'created refalign build');

my $cmd = Genome::Model::ReferenceAlignment::Command::CreateMetrics::DbSnpConcordance->create(build => $build, output_dir => $tmpdir);
ok($cmd, "created command");
ok($cmd->execute, "executed command");

my $unfiltered_file= "$tmpdir/dbsnp_concordance.txt";
ok(-s $unfiltered_file, "unfiltered results exist");
my $results = Genome::Model::Tools::Joinx::SnvConcordanceByQuality::parse_results_file($unfiltered_file);
is(ref $results->{hit}, 'HASH', '$results->{hit} array exists');
is(ref $results->{all}, 'HASH', '$results->{all} array exists');
is(ref $results->{concordance}, 'HASH', '$results->{concordance} array exists');
is(4, $results->{total_hits}, '4 hits');
is(5, $results->{total_snvs}, '5 total snvs');
is(80, $results->{total_concordance}, '80% concordance');

my $filtered_file = "$tmpdir/dbsnp_concordance.filtered.txt";
ok(-s $filtered_file, "filtered results exist");
$results = Genome::Model::Tools::Joinx::SnvConcordanceByQuality::parse_results_file($filtered_file);
is(ref $results->{hit}, 'HASH', '$results->{hit} array exists');
is(ref $results->{all}, 'HASH', '$results->{all} array exists');
is(ref $results->{concordance}, 'HASH', '$results->{concordance} array exists');
is(4, $results->{total_hits}, '4 hits');
is(5, $results->{total_snvs}, '5 total snvs');
is(80, $results->{total_concordance}, '80% concordance');




sub setup_test_builds {
    my $test_profile = Genome::ProcessingProfile::ReferenceAlignment->create(
        name => 'test_profile',
        sequencing_platform => 'solexa',
        dna_type => 'cdna',
        read_aligner_name => 'bwa',
        snv_detection_strategy => 'samtools',
        indel_detection_strategy => '-test Genome/Model/Convergence.t',
    ); 
    ok($test_profile, 'created test processing profile');
    
    my $test_sample = Genome::Sample->create(
        name => 'test_subject',
    );
    ok($test_sample, 'created test sample');
    
    my $test_instrument_data = Genome::InstrumentData::Solexa->create(
    );
    ok($test_instrument_data, 'created test instrument data');
    
    my $reference_sequence_build = Genome::Model::Build::ImportedReferenceSequence->get(name => 'NCBI-human-build36');
    isa_ok($reference_sequence_build, 'Genome::Model::Build::ImportedReferenceSequence') or die;

    my $test_model = Genome::Model->create(
        name => 'test_reference_aligment_model_mock',
        subject_name => 'test_subject',
        subject_type => 'sample_name',
        processing_profile_id => $test_profile->id,
        reference_sequence_build => $reference_sequence_build,
    );
    ok($test_model, 'created test model');
    ok($test_model->add_instrument_data($test_instrument_data), 'added inst data');
    
    my $test_build = Genome::Model::Build->create( 
        model_id => $test_model->id,
        data_directory => $tmpdir,
    );
    ok($test_build, 'created test build');
    
    $test_build->_verify_build_is_not_abandoned_and_set_status_to('Succeeded', 1);
    
    is_deeply($test_model->last_complete_build, $test_build, 'last succeeded build is the test build');

    mkdir("$tmpdir/snp_related_metrics") || die "Failed to create snp_related_metrics directory";
    my @snv_files = (
        "$tmpdir/snp_related_metrics/snps_all_sequences.v1.bed",
        "$tmpdir/snp_related_metrics/snps_all_sequences.filtered.v1.bed",
    );
    for my $file (@snv_files) {
        open(F, ">$file") || die "failed to open $file for writing";
        print F $snv_file_data;
        close(F);
    }
    my $dbsnp_file = "$tmpdir/dbsnp.bed";
    open(F, ">$dbsnp_file") || die "failed to open $dbsnp_file for writing";
    print F $dbsnp_file_data;
    close(F);

    my $dbsnp_pp = Genome::ProcessingProfile->get(name => "imported-variation-list");
    my $dbsnp_model = Genome::Model::ImportedVariationList->create(
        reference => $reference_sequence_build,
        processing_profile => $dbsnp_pp,
        subject_name => 'test_subject',
        );
    ok($dbsnp_model, "created dbsnp model");

    my $feature_list_cmd = Genome::FeatureList::Command::Create->create(
        name => "dbsnp-test-$$",
        file_path => $dbsnp_file,
        format => 'true-BED',
    );
    ok($feature_list_cmd, 'created test feature list command');
    my $test_feature_list = $feature_list_cmd->execute;
    ok($test_feature_list, 'created test feature list');

    my $dbsnp_build = Genome::Model::Build::ImportedVariationList->create(model => $dbsnp_model, snv_feature_list => $test_feature_list);
    ok($dbsnp_build, "created dbsnp build");

    $test_build->model->dbsnp_build($dbsnp_build);

    return $test_build;
}
