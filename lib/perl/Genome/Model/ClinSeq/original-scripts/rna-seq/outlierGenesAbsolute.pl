#!/usr/bin/perl
#Written by Malachi Griffith

#Load modules
use strict;
use warnings;
use Genome;
use Getopt::Long;
use Term::ANSIColor qw(:constants);
use Data::Dumper;

my $script_dir;
use Cwd 'abs_path';
BEGIN{
  if (abs_path($0) =~ /(.*\/).*\.pl/){
    $script_dir = $1;
  }
}
use lib $script_dir;
use ClinSeq qw(:all);


#This script takes a Cufflinks build dir as input and processes the genes.fpkm_tracking AND isoforms.fpkm_tracking files into more useful forms
#Details

#Create formatted files:
#1.) For genes.fpkm_tracking
#    - key on tracking_id AND locus
#    - Fix the gene name and create a mapped_gene_name field
#    - Create a new file, sort on this key and write out: tracking_id, mapped_gene_name,gene_id, length, coverage, FPKM, FPKM_conf_lo, FPKM_conf_hi, FPKM_status
#2.) For isoforms.fpkm_tracking
#    - key on tracking_id only (but make sure these are distinct!)
#    - summarize to the gene level by adding all transcripts together based on the 'gene_id' column
#    - fix the gene name and create a mapped_gene_name field
#    - Create a new file, sort on this key and write out: tracking_id, gene_id, length, coverage, FPKM, FPKM_conf_lo, FPKM_conf_hi, FPKM_status, number of transcripts combined

#Feed files into R script for summary statistics and figures
#3.) Create an output file sorted on FPKM - otherwise identical to the main file
#4.) Create a filtered file sorted on FPKM for the top N% of genes
#5.) Create some general figures showing the distribution of FPKM values, etc.
#6.) Import a list of genes of interest (cancer genes + kinases + genes with neoplastic agents, etc.) - GOI list
#7.) For each gene in the GOI list, show the expression level of this gene relative to all genes in the distribution

#Post processing of files generated by R
#8.) Create files like the complete sorted and top N% sorted files, but only for the GOI genes


#Input parameters
my $cufflinks_dir = '';
my $working_dir = '';
my $percent_cutoff = '';
my $verbose = 0;

GetOptions ('cufflinks_dir=s'=>\$cufflinks_dir, 'working_dir=s'=>\$working_dir, 'percent_cutoff=f'=>\$percent_cutoff, 'verbose=i'=>\$verbose);

my $usage=<<INFO;

  Example usage: 
  
  outlierGenesAbsolute.pl  --cufflinks_dir=/gscmnt/gc2016/info/model_data/2880794613/build115909698/expression/  --working_dir=/gscmnt/sata132/techd/mgriffit/hgs/all1/rnaseq/absolute/
  
  Intro:
  This script attempts to automate the process of running the 'clinseq' pipeline

  Details:
  --cufflinks_dir                 PATH.  'expression' directory containing Cufflinks output
  --working_dir                   PATH.  Directory where all output will be written
  --percent_cutoff                FLOAT. The top N% of genes will be printed to a filtered file based on this cutoff (e.g. 1 for top 1%) [default 1]
  --verbose                       To display more output, set to 1

INFO

unless ($cufflinks_dir && $working_dir){
  print GREEN, "$usage", RESET;
  exit();
}
unless($percent_cutoff){
  $percent_cutoff = 1;
}

#Check the cufflinks and working dirs
$cufflinks_dir = &checkDir('-dir'=>$cufflinks_dir, '-clear'=>"no");
$working_dir = &checkDir('-dir'=>$working_dir, '-clear'=>"no");

#Paths to input genes and isoforms files
my $genes_infile = "$cufflinks_dir"."genes.fpkm_tracking";
my $isoforms_infile = "$cufflinks_dir"."isoforms.fpkm_tracking";

#Paths to output files
my $genes_file_sorted = "$working_dir"."genes.fpkm.namesort.tsv";
my $isoforms_file_sorted = "$working_dir"."isoforms.fpkm.namesort.tsv";
my $isoforms_merge_file_sorted = "$working_dir"."isoforms.merged.fpkm.namesort.tsv";
my $goi_file = "$working_dir"."genes_of_interest.txt";

#Make sure expected data files exist
unless (-e $genes_infile && -e $isoforms_infile){
  print RED, "\n\nFile not found: $genes_infile | $isoforms_infile\n\n", RESET;
  exit();
}


#Get Entrez and Ensembl data for gene name mappings
my $entrez_ensembl_data = &loadEntrezEnsemblData();


#Import a set of gene symbol lists (these files must be gene symbols in the first column, .txt extension, tab-delimited if multiple columns, one symbol per field, no header)
#Fix gene names as they are being imported
my $gene_symbol_lists_dir = "/gscmnt/sata132/techd/mgriffit/reference_annotations/GeneSymbolLists/";
$gene_symbol_lists_dir = &checkDir('-dir'=>$gene_symbol_lists_dir, '-clear'=>"no");
my @symbol_list_names = qw (GenesOfInterest);
my $gene_symbol_lists = &importGeneSymbolLists('-gene_symbol_lists_dir'=>$gene_symbol_lists_dir, '-symbol_list_names'=>\@symbol_list_names, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>0);
my $goi_ref = $gene_symbol_lists->{'GenesOfInterest'}->{'symbols'};
open (GOI, ">$goi_file") || die "\n\nCould not open genes of interest file\n\n";
foreach my $goi (sort keys %{$goi_ref}){
  print GOI "$goi\n";
}
close(GOI);


#Parse the genes.fpkm_tracking and isoforms.fpkm_tracking files
&parseFpkmFile('-infile'=>$genes_infile, '-outfile'=>$genes_file_sorted, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>$verbose);
&parseFpkmFile('-infile'=>$isoforms_infile, '-outfile'=>$isoforms_file_sorted, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>$verbose);

#Merge the isoforms.fpkm_tracking file to the gene level
&mergeIsoformsFile('-infile'=>$isoforms_infile, '-outfile'=>$isoforms_merge_file_sorted, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>$verbose);

#Make the genes subdir
my $images_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"images", '-force'=>"yes");

#Run the R code that produces filtered and sorted text files as well as plots for the whole dataset as well as individual genes of interest
my $r_cmd = "$script_dir"."outlierGenesAbsolute.R $working_dir $images_sub_dir $percent_cutoff";
if ($verbose){print "\n\nRunning: $r_cmd\n"}
system($r_cmd);


#Reorganize the output files into sub-directories
my $genes_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"genes", '-force'=>"yes");
my $isoforms_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"isoforms", '-force'=>"yes");
my $isoforms_merged_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"isoforms_merged", '-force'=>"yes");

my $mv_cmd1 = "mv $working_dir/genes.fpkm* $genes_sub_dir";
system($mv_cmd1);
my $mv_cmd2 = "mv $working_dir/isoforms.fpkm* $isoforms_sub_dir";
system($mv_cmd2);
my $mv_cmd3 = "mv $working_dir/isoforms.merged.fpkm* $isoforms_merged_sub_dir";
system($mv_cmd3);

if ($verbose){print "\n\n";}

exit();


#################################################################################################################
#Parse the genes.fpkm_trackin file                                                                              #
#################################################################################################################
sub parseFpkmFile{
  my %args = @_;
  my $infile = $args{'-infile'};
  my $outfile = $args{'-outfile'};
  my $entrez_ensembl_data = $args{'-entrez_ensembl_data'};
  my $verbose = $args{'-verbose'};

  if ($verbose){
    print BLUE, "\n\nParsing: $infile", RESET;
  }

  my %fpkm;
  my $header = 1;
  my $rc = 0;     #record count
  my %columns;
  open (FPKM, "$infile") || die "\n\nCould not open gene file: $infile\n\n";
  while(<FPKM>){
    chomp($_);
    my @line = split("\t", $_);
    if ($header == 1){
      $header = 0;
      my $p = 0;
      foreach my $head (@line){
        $columns{$head}{position} = $p;
        $p++;
      }
      next();
    }
    $rc++;
    
    my $tracking_id = $line[$columns{'tracking_id'}{position}];
    my $gene_id = $line[$columns{'gene_id'}{position}];
    my $locus = $line[$columns{'locus'}{position}];
    my $length = $line[$columns{'length'}{position}];
    my $coverage = $line[$columns{'coverage'}{position}];
    my $FPKM = $line[$columns{'FPKM'}{position}];
    my $FPKM_conf_lo = $line[$columns{'FPKM_conf_lo'}{position}];
    my $FPKM_conf_hi = $line[$columns{'FPKM_conf_hi'}{position}];
    my $FPKM_status = $line[$columns{'FPKM_status'}{position}];

    #Fix gene name and create a new column for this name
    my $fixed_gene_name = &fixGeneName('-gene'=>$gene_id, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>0);

    #Key on tracking id AND locus coordinates
    my $key = "$tracking_id"."|"."$locus";

    $fpkm{$key}{record_count} = $rc;
    $fpkm{$key}{tracking_id} = $tracking_id;
    $fpkm{$key}{mapped_gene_name} = $fixed_gene_name;
    $fpkm{$key}{gene_id} = $gene_id;
    $fpkm{$key}{locus} = $locus;
    $fpkm{$key}{length} = $length;
    $fpkm{$key}{coverage} = $coverage;
    $fpkm{$key}{FPKM} = $FPKM;
    $fpkm{$key}{FPKM_conf_lo} = $FPKM_conf_lo;
    $fpkm{$key}{FPKM_conf_hi} = $FPKM_conf_hi;
    $fpkm{$key}{FPKM_status} = $FPKM_status;

  }
  close(FPKM);

  my $gc = keys %fpkm;
  unless ($gc == $rc){
    print RED, "\n\nFound $gc distinct gene|coord entries but $rc data lines - not good...\n\n", RESET;
    exit();
  }

  #Print an outfile sorted on the key
  open (OUT, ">$outfile") || die "\n\nCould not open gene file: $infile\n\n";
  print OUT "tracking_id\tmapped_gene_name\tgene_id\tlocus\tlength\tcoverage\tFPKM\tFPKM_conf_lo\tFPKM_conf_hi\tFPKM_status\n";
  foreach my $key (sort {$a cmp $b} keys %fpkm){
    print OUT "$fpkm{$key}{tracking_id}\t$fpkm{$key}{mapped_gene_name}\t$fpkm{$key}{gene_id}\t$fpkm{$key}{locus}\t$fpkm{$key}{length}\t$fpkm{$key}{coverage}\t$fpkm{$key}{FPKM}\t$fpkm{$key}{FPKM_conf_lo}\t$fpkm{$key}{FPKM_conf_hi}\t$fpkm{$key}{FPKM_status}\n";
  }
  close(OUT);

  return();
}

#################################################################################################################
#Merge the isoforms.fpkm_tracking file to the gene level                                                        #
#################################################################################################################
sub mergeIsoformsFile{
  my %args = @_;
  my $infile = $args{'-infile'};
  my $outfile = $args{'-outfile'};
  my $entrez_ensembl_data = $args{'-entrez_ensembl_data'};
  my $verbose = $args{'-verbose'};

  if ($verbose){
    print BLUE, "\n\nParsing and merging to gene level: $infile", RESET;
  }

  my %trans;
  my %genes;
  
  my $header = 1;
  my $rc = 0;     #record count
  my %columns;
  open (TRANS, "$infile") || die "\n\nCould not open gene file: $infile\n\n";
  while(<TRANS>){
    chomp($_);
    my @line = split("\t", $_);
    if ($header == 1){
      $header = 0;
      my $p = 0;
      foreach my $head (@line){
        $columns{$head}{position} = $p;
        $p++;
      }
      next();
    }
    $rc++;
    
    my $tracking_id = $line[$columns{'tracking_id'}{position}];
    my $gene_id = $line[$columns{'gene_id'}{position}];
    my $locus = $line[$columns{'locus'}{position}];
    my $length = $line[$columns{'length'}{position}];
    my $coverage = $line[$columns{'coverage'}{position}];
    my $FPKM = $line[$columns{'FPKM'}{position}];
    my $FPKM_conf_lo = $line[$columns{'FPKM_conf_lo'}{position}];
    my $FPKM_conf_hi = $line[$columns{'FPKM_conf_hi'}{position}];
    my $FPKM_status = $line[$columns{'FPKM_status'}{position}];
  
    #Fix gene name and create a new column for this name
    my $fixed_gene_name = &fixGeneName('-gene'=>$gene_id, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>0);

    #Key on tracking id AND locus coordinates
    my $key = "$tracking_id"."|"."$locus";

    $trans{$key}{record_count} = $rc;
    $trans{$key}{tracking_id} = $tracking_id;
    $trans{$key}{mapped_gene_name} = $fixed_gene_name;
    $trans{$key}{gene_id} = $gene_id;
    $trans{$key}{locus} = $locus;
    $trans{$key}{length} = $length;
    $trans{$key}{coverage} = $coverage;
    $trans{$key}{FPKM} = $FPKM;
    $trans{$key}{FPKM_conf_lo} = $FPKM_conf_lo;
    $trans{$key}{FPKM_conf_hi} = $FPKM_conf_hi;
    $trans{$key}{FPKM_status} = $FPKM_status;

    #Get coords from locus
    my $chr;
    my $chr_start;
    my $chr_end;
    if ($locus =~ /(\w+)\:(\d+)\-(\d+)/){
      $chr = $1;
      $chr_start = $2;
      $chr_end = $3;
    }else{
      print RED, "\n\nlocus format not understood: $locus\n\n", RESET;
      exit();
    }

    if ($genes{$gene_id}){
      if ($chr_start <  $genes{$gene_id}{chr_start}){$genes{$gene_id}{chr_start} = $chr_start;}
      if ($chr_end >  $genes{$gene_id}{chr_end}){$genes{$gene_id}{chr_end} = $chr_end;}
      $genes{$gene_id}{coverage} += $coverage;
      $genes{$gene_id}{FPKM} += $FPKM;
      $genes{$gene_id}{FPKM_conf_lo} += $FPKM_conf_lo;
      $genes{$gene_id}{FPKM_conf_hi} += $FPKM_conf_hi;
      $genes{$gene_id}{FPKM_status} = "na";
      $genes{$gene_id}{transcript_count}++;
    }else{
      $genes{$gene_id}{mapped_gene_name} = $fixed_gene_name;
      $genes{$gene_id}{chr} = $chr;
      $genes{$gene_id}{chr_start} = $chr_start;
      $genes{$gene_id}{chr_end} = $chr_end;
      $genes{$gene_id}{coverage} = $coverage;
      $genes{$gene_id}{FPKM} = $FPKM;
      $genes{$gene_id}{FPKM_conf_lo} = $FPKM_conf_lo;
      $genes{$gene_id}{FPKM_conf_hi} = $FPKM_conf_hi;
      $genes{$gene_id}{FPKM_status} = "na";
      $genes{$gene_id}{transcript_count} = 1;
    }


  }
  close(TRANS);

  my $gc = keys %trans;
  unless ($gc == $rc){
    print RED, "\n\nFound $gc distinct gene|coord entries but $rc data lines - not good...\n\n", RESET;
    exit();
  }

  #Now go through the transcripts and merge down to genes, combining the coverage and FPKM values (cumulatively), coordinates (outer coords), and calculating a new length


  #Print an outfile sorted on the key
  open (OUT, ">$outfile") || die "\n\nCould not open gene file: $infile\n\n";
  print OUT "tracking_id\tmapped_gene_name\tgene_id\tlocus\tlength\tcoverage\tFPKM\tFPKM_conf_lo\tFPKM_conf_hi\tFPKM_status\n";
  foreach my $gene_id (sort {$a cmp $b} keys %genes){
    my $locus = "$genes{$gene_id}{chr}:$genes{$gene_id}{chr_start}-$genes{$gene_id}{chr_end}";
    my $length = "-";
    print OUT "$gene_id\t$genes{$gene_id}{mapped_gene_name}\t$gene_id\t$locus\t$length\t$genes{$gene_id}{coverage}\t$genes{$gene_id}{FPKM}\t$genes{$gene_id}{FPKM_conf_lo}\t$genes{$gene_id}{FPKM_conf_hi}\t$genes{$gene_id}{FPKM_status}\n";
  }
  close(OUT);


  return();
}



