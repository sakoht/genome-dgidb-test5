#!/usr/bin/perl
#Written by Malachi Griffith

#Load modules
use strict;
use warnings;
use Genome;
use Getopt::Long;
use Term::ANSIColor qw(:constants);
use Data::Dumper;

my $lib_dir;
my $script_dir;
use Cwd 'abs_path';
BEGIN{
  if (abs_path($0) =~ /(.*\/)(.*\/).*\.pl/){
    $lib_dir = $1;
    $script_dir = $1.$2;
  }
}
use lib $lib_dir;
use ClinSeq qw(:all);
use rnaseq::RnaSeq qw(:all);


#This script takes a Cufflinks build dir as input and processes the genes.fpkm_tracking AND isoforms.fpkm_tracking files into more useful forms
#Details

#Create formatted files:
#1.) For genes.fpkm_tracking
#    - key on tracking_id AND locus
#    - Fix the gene name and create a mapped_gene_name field
#    - Create a new file, sort on this key and write out: tracking_id, mapped_gene_name,gene_id, length, coverage, FPKM, FPKM_conf_lo, FPKM_conf_hi, FPKM_status
#2.) For isoforms.fpkm_tracking
#    - key on tracking_id only (but make sure these are distinct!)
#    - summarize to the gene level by adding all transcripts together based on the 'gene_id' column
#    - fix the gene name and create a mapped_gene_name field
#    - Create a new file, sort on this key and write out: tracking_id, gene_id, length, coverage, FPKM, FPKM_conf_lo, FPKM_conf_hi, FPKM_status, number of transcripts combined

#Feed files into R script for summary statistics and figures
#3.) Create an output file sorted on FPKM - otherwise identical to the main file
#4.) Create a filtered file sorted on FPKM for the top N% of genes
#5.) Create some general figures showing the distribution of FPKM values, etc.
#6.) Import a list of genes of interest (cancer genes + kinases + genes with neoplastic agents, etc.) - GOI list
#7.) For each gene in the GOI list, show the expression level of this gene relative to all genes in the distribution

#Post processing of files generated by R
#8.) Create files like the complete sorted and top N% sorted files, but only for the GOI genes


#Input parameters
my $cufflinks_dir = '';
my $working_dir = '';
my $ensembl_version = '';
my $percent_cutoff = '';
my $verbose = 0;

GetOptions ('cufflinks_dir=s'=>\$cufflinks_dir, 'working_dir=s'=>\$working_dir, 'ensembl_version=i'=>\$ensembl_version, 'percent_cutoff=f'=>\$percent_cutoff, 'verbose=i'=>\$verbose);

my $usage=<<INFO;

  Example usage: 
  
  outlierGenesAbsolute.pl  --cufflinks_dir=/gscmnt/gc2016/info/model_data/2880794613/build115909698/expression/  --working_dir=/gscmnt/sata132/techd/mgriffit/hgs/all1/rnaseq/absolute/  --ensembl_version=58
  
  Intro:
  This script attempts to automate the process of running the 'clinseq' pipeline

  Details:
  --cufflinks_dir                 PATH.  'expression' directory containing Cufflinks output
  --working_dir                   PATH.  Directory where all output will be written
  --ensembl_version               INT.   The version of Ensembl used to create the GTF file supplied to Tophat Cufflinks
  --percent_cutoff                FLOAT. The top N% of genes will be printed to a filtered file based on this cutoff (e.g. 1 for top 1%) [default 1]
  --verbose                       To display more output, set to 1

INFO

unless ($cufflinks_dir && $working_dir && $ensembl_version){
  print GREEN, "$usage", RESET;
  exit();
}
unless($percent_cutoff){
  $percent_cutoff = 1;
}

#Check the cufflinks and working dirs
$cufflinks_dir = &checkDir('-dir'=>$cufflinks_dir, '-clear'=>"no");
$working_dir = &checkDir('-dir'=>$working_dir, '-clear'=>"no");

#Paths to input genes and isoforms files
my $genes_infile = "$cufflinks_dir"."genes.fpkm_tracking";
my $isoforms_infile = "$cufflinks_dir"."isoforms.fpkm_tracking";

#Paths to output files
my $genes_file_sorted = "$working_dir"."genes.fpkm.namesort.tsv";
my $isoforms_file_sorted = "$working_dir"."isoforms.fpkm.namesort.tsv";
my $isoforms_merge_file_sorted = "$working_dir"."isoforms.merged.fpkm.namesort.tsv";
my $goi_file = "$working_dir"."genes_of_interest.txt";

#Make sure expected data files exist
unless (-e $genes_infile && -e $isoforms_infile){
  print RED, "\n\nFile not found: $genes_infile | $isoforms_infile\n\n", RESET;
  exit(1);
}


#Get Entrez and Ensembl data for gene name mappings
my $entrez_ensembl_data = &loadEntrezEnsemblData();

#Build a map of ensembl transcript ids to gene ids and gene names
my $ensembl_map = &loadEnsemblMap('-ensembl_version'=>$ensembl_version);


#Import a set of gene symbol lists (these files must be gene symbols in the first column, .txt extension, tab-delimited if multiple columns, one symbol per field, no header)
#Fix gene names as they are being imported
my $gene_symbol_lists_dir = "/gscmnt/sata132/techd/mgriffit/reference_annotations/GeneSymbolLists/";
$gene_symbol_lists_dir = &checkDir('-dir'=>$gene_symbol_lists_dir, '-clear'=>"no");
my @symbol_list_names = qw (GenesOfInterest);
my $gene_symbol_lists = &importGeneSymbolLists('-gene_symbol_lists_dir'=>$gene_symbol_lists_dir, '-symbol_list_names'=>\@symbol_list_names, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>0);
my $goi_ref = $gene_symbol_lists->{'GenesOfInterest'}->{'symbols'};
open (GOI, ">$goi_file") || die "\n\nCould not open genes of interest file\n\n";
foreach my $goi (sort keys %{$goi_ref}){
  print GOI "$goi\n";
}
close(GOI);


#Parse the genes.fpkm_tracking and isoforms.fpkm_tracking files
my $fpkm = &parseFpkmFile('-infile'=>$genes_infile, '-outfile'=>$genes_file_sorted, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>$verbose);
$fpkm = &parseFpkmFile('-infile'=>$isoforms_infile, '-outfile'=>$isoforms_file_sorted, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-verbose'=>$verbose);

#Merge the isoforms.fpkm_tracking file to the gene level
my $merged_fpkm = &mergeIsoformsFile('-infile'=>$isoforms_infile, '-outfile'=>$isoforms_merge_file_sorted, '-entrez_ensembl_data'=>$entrez_ensembl_data, '-ensembl_map'=>$ensembl_map, '-verbose'=>$verbose);

#Make the genes subdir
my $images_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"images", '-force'=>"yes");

#Run the R code that produces filtered and sorted text files as well as plots for the whole dataset as well as individual genes of interest
my $r_cmd = "$script_dir"."outlierGenesAbsolute.R $working_dir $images_sub_dir $percent_cutoff";
my $r_cmd_stdout = "$working_dir"."outlierGenesAbsolute.R.stdout";
my $r_cmd_stderr = "$working_dir"."outlierGenesAbsolute.R.stderr";

if ($verbose){
  print "\n\nRunning: $r_cmd\n";
}else{
  $r_cmd .= " 1>$r_cmd_stdout 2>$r_cmd_stderr";
}
system($r_cmd);


#Reorganize the output files into sub-directories
my $genes_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"genes", '-force'=>"yes");
my $isoforms_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"isoforms", '-force'=>"yes");
my $isoforms_merged_sub_dir = &createNewDir('-path'=>$working_dir, '-new_dir_name'=>"isoforms_merged", '-force'=>"yes");

my $mv_cmd1 = "mv $working_dir/genes.fpkm* $genes_sub_dir";
system($mv_cmd1);
my $mv_cmd2 = "mv $working_dir/isoforms.fpkm* $isoforms_sub_dir";
system($mv_cmd2);
my $mv_cmd3 = "mv $working_dir/isoforms.merged.fpkm* $isoforms_merged_sub_dir";
system($mv_cmd3);

if ($verbose){print "\n\n";}

exit();


