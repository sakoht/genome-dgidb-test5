#!/usr/bin/env perl

use strict;
use warnings;

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above "Genome";

use Data::Dumper;
use Test::More;

use_ok('Genome::Project') or die;

my $user_name = Genome::Sys->username;
my $user = Genome::Sys::User->get(username => $user_name);
unless ($user) {
    $user = Genome::Sys::User->create(username => $user_name, email => "$user_name\@example.test");
}
ok($user, 'got (or created) sys user object for testing');

# create
my $project = Genome::Project->create(
    name => 'TEST AML',
);
ok($project, 'create a project');
is($project->name, 'TEST AML', 'name');
my $creator = $project->parts(role => 'creator')->entity;
is($creator, $user, 'creator');
is_deeply([$project->user_ids], [$user->id], 'user ids');
my $model_group = Genome::ModelGroup->get(uuid => $project->id);
ok($model_group, 'model group');
is($model_group->name, $project->name, 'model group name matches project name');
is($model_group->uuid, $project->id, 'model group uuid matches project id');
is($model_group->user_name, $creator->email, 'model group user_name matches project creator email');

# create again fails
eval { Genome::Project->create(name => 'TEST AML'); };
ok($@, 'failed to create project with the same name');

# create again, but since we are apipe-builder, it will rename the other project
no warnings;
my $username_sub = *Genome::Sys::username;
*Genome::Sys::username = sub{ return 'apipe-builder' };
use warnings;

my $other_user = Genome::Sys::User->get(username => Genome::Sys->username);
unless ($other_user) {
    $other_user = Genome::Sys::User->create(username => Genome::Sys->username, email => Genome::Sys->username . '@example.test');
}
ok($other_user, "created another test user");
my $project2 = Genome::Project->create(
    name => $project->name,
);
ok($project2, 'create a project');
is($project2->name, 'TEST AML', 'name');
my $creator2 = $project2->parts(role => 'creator')->entity;
is($project->name, $creator->username.' TEST AML', 'renamed existing project made by '.$user_name);
is($model_group->name, $project->name, 'model group renamed too');
my $model_group2 = Genome::ModelGroup->get(uuid => $project2->id);
ok($model_group2, 'model group');
is($model_group2->name, $project2->name, 'model group name matches project name');
is($model_group2->uuid, $project2->id, 'model group uuid matches project id');
is($model_group2->user_name, $creator2->email, 'model group user_name matches project creator email');

# rename
ok(!$project2->rename(), 'failed to rename w/o name');
ok(!$project2->rename('TEST AML'), 'failed to rename to same name');
ok($project2->rename('TEST AML1'), 'rename');
is($project2->name, 'TEST AML1', 'name after rename');

# add parts
my $model = Genome::Model->get(name => 'apipe-test-mc16s-454');
ok($project->add_part(entity => $model), 'add part => model');
my @project_models = map { $_->entity } $project->parts('entity_class_name like' => 'Genome::Model%');
is(@project_models, 1, 'project models');
my @model_group_models = $model_group->models;
is_deeply(\@model_group_models, \@project_models, 'model group and project models match');

=pod
# add again
ok($project->add_part(entity => $model), 'add part again => model');
@project_models = map { $_->entity } $project->parts('entity_class_name like' => 'Genome::Model%');
is(@project_models, 1, 'project models');
@model_group_models = $model_group->models;
is_deeply(\@model_group_models, \@project_models, 'model group and project models match');
UR::Context->commit;
=cut

# remove
ok($project->remove_part(entity => $model), 'remove part => model');
@project_models = map { $_->entity } $project->parts('entity_class_name like' => 'Genome::Model%');
ok(!@project_models, 'project has no models');
@model_group_models = $model_group->models;
ok(!@model_group_models, 'model group and project do not have models');

# delete
ok($project->delete, 'delete');
isa_ok($project, 'UR::DeletedRef', 'delete project');
isa_ok($model_group, 'UR::DeletedRef', 'delete model group');

done_testing();
exit;

