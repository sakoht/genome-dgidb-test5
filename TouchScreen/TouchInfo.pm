package TouchScreen::TouchInfo;

# purpose -> process -> output device -> SqlPackage: 

our %PROCESS_CNTRL = 
    ('create reagent' => {'make reagent' => {'reagent container' => {'SqlPackage'    => 'TouchScreen::MatSql',
								     'Configuration' => 'OneToDefined',
								     'Headers'       => ['Reagent Information', 'Chemicals', 'Recipe Barcode', 'Recipe'],
								     'InputCheck'    => 'GetMakeReagentBarcodes',
								     'OutputCheck'   => 'GetChemName',
								     'Confirm'       => 'MakeReagent',
								     'Buttons'       => {'Recipe' => 'DisplayRecipe'},
								     'OutputDefined' => 'GetChemicalsForReagent',
								     
								 }
					     },
			  
			  'qc reagent' => {'none' => {'SqlPackage'    => 'TouchScreen::MatSql',
						      'Configuration' => 'OneToNone',
						      'Headers'       => ['Reagent', 'Clone Name', 'Archive', 'Comment'],
						      'InputCheck'    => 'GetQcBarcodeDesc',
						      'Confirm'       => 'QcReagent',
						      'DataInfos'     => {'Clone Name' => 0, 
									  'Archive' => 0, 
									  'Comment' => 0},
						      
						  }
				       },
			  'add to available' => {'none' => {'SqlPackage'    => 'TouchScreen::MatSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Reagent', 'Amount'],
							    'InputCheck'    => 'GetAdd2AvailBarcodeDesc',
							    'Confirm'       => 'AddToAvailable',
							    'AmountButton'  => 'AddToAvailAmount',
							}
					     },
			  'reagent checkout' => {'none' => {'SqlPackage'    => 'TouchScreen::MatSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Reagent', 'Amount'],
							    'InputCheck'    => 'GetReagentCheckoutBarcodeDesc',
							    'Confirm'       => 'ReagentCheckout',
							    'AmountButton'  => 'ReagentCheckoutAmount',
							    'DataInfos'     => {'Group' => 0},
							},
			                         'reagent container to none' => {'SqlPackage'    => 'TouchScreen::MatSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Reagent', 'Amount'],
							    'InputCheck'    => 'GetReagentCheckoutBarcodeDesc',
							    'Confirm'       => 'ReagentCheckout',
							    'AmountButton'  => 'ReagentCheckoutAmount',
							    'DataInfos'     => {'Group' => 0},
							},
					     },
			      'retire chemical' => {'none' => {'SqlPackage'    => 'TouchScreen::MatSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['Chemical', 'Amount'],
							       'InputCheck'    => 'RetireChemBarcodeDesc',
							       'Confirm'       => 'RetireChemicalContainer',
							       'AmountButton'  => 'RetireChemicalContainerAmount',
							   }
						},
		      },
     'Automated Production' => 
     {'pick' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					'Configuration' => 'OneToOne',
					'Headers'       => ['Agar Plate', '96 well archive plates'],
					'InputCheck'    => 'GetAvailPlasmidAgarPlateAP',
					'OutputCheck'   => 'CheckIfUsedAsOutput',
					'Confirm'       => 'Pick96PlasmidArchiveAP',
				    }
		 ,
		 '384 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					 'Configuration' => 'OneToMany',
					 'Headers'       => ['Agar Plate', '384 well archive plates'],
					 'InputCheck'    => 'GetAvailPlasmidAgarPlateAP',
					 'OutputCheck'   => 'CheckIfUsedAsOutput',
					 'Confirm'       => 'Pick384ProductionArchive',
				     }
	     },
      'claim archive plate' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					   'Configuration' => 'OneToNone',
					   'Headers'       => ['archive plate', 'purpose'],
					   'InputCheck'    => 'GetAvailPlasmidToClaimAP',
					   'OutputCheck'   => undef,
					   'Confirm'       => 'ClaimArchivePlate',
					   'DataInfos'     => {'purpose' => GetArchivePurpose},
				       },
				'96' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					 'Configuration' => 'OneToNone',
					 'Headers'       => ['archive plate', 'purpose'],
					 'InputCheck'    => 'GetAvailPlasmidToClaim96',
					 'OutputCheck'   => undef,
					 'Confirm'       => 'ClaimArchivePlate',
					 'DataInfos'     => {'purpose' => GetArchivePurpose},
				     },
				
				'384' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					  'Configuration' => 'OneToNone',
					  'Headers'       => ['archive plate', 'purpose'],
					  'InputCheck'    => 'GetAvailPlasmidToClaim',
					  'OutputCheck'   => undef,
					  'Confirm'       => 'ClaimArchivePlate',
					  'DataInfos'     => {'purpose' => GetArchivePurpose},
				      },
				
			    },
      
      'inoculate' => {'96 to 96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						      'Configuration' => 'OneToOne',
						      'Headers'       => ['96 well archive plate', '96 well round plate'],
						      'InputCheck'    => 'GetAvailArchiveInInprogress',
						      'OutputCheck'   => 'CheckIfUsedAsOutput',
						      'Confirm'       => 'Inoculate96to96',
						  }
		      ,
		      '96 to 96 well growth box' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						     'Configuration' => 'OneToOne',
						     'Headers'       => ['96 well archive plate', '96 well flat plate'],
						     'InputCheck'    => 'GetAvailArchiveInInprogress',
						     'OutputCheck'   => 'CheckIfUsedAsOutput',
						     'Confirm'       => 'Inoculate96to96',
						 }
		      ,
		      '384 to 96 well flat plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						      'Configuration' => 'OneToDefined',
						      'Headers'       => ['384 well archive plate', 'Sectors', 'Barcode'],
						      'InputCheck'    => 'GetAvailArchivesToInoculate384AP',
						      'OutputCheck'   => 'CheckIfUsedAsOutput',
						      'Confirm'       => 'Inoculate384to96',
						      'OutputDefined' => 'GetAvailableQuads',
						  }
		      ,
		      '384 to 96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						       'Configuration' => 'OneToDefined',
						       'Headers'       => ['384 well archive plate', 'Sectors', 'Barcode'],
						       'InputCheck'    => 'GetAvailArchivesToInoculate384AP',
						       'OutputCheck'   => 'CheckIfUsedAsOutput',
						       'Confirm'       => 'Inoculate384to96',
						       'OutputDefined' => 'GetAvailableQuads',
						   }
		  },
      'claim inoculated plate' => {'96 well flat plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['flat plate','purpose'],
							    'InputCheck'    => 'GetAvailClaimInoculated',
							    'OutputCheck'   => undef,
							    'Confirm'       => 'ClaimArchivePlate',
							    'DataInfos'     => {'purpose' => GetArchivePurpose},
							},
				   '96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							     'Configuration' => 'OneToNone',
							     'Headers'       => ['round plate','purpose'],
							     'InputCheck'    => 'GetAvailClaimInoculated',
							     'OutputCheck'   => undef,
							     'Confirm'       => 'ClaimArchivePlate',
							     'DataInfos'     => {'purpose' => GetArchivePurpose},
							 },
			       },
			      
      'cell lysis' => {'96 well flat plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						'Configuration' => 'OneToNone',
						'Headers'       => ['96 well flat plate'],
						'InputCheck'    => 'GetAvailArchiveInInprogress',
						'OutputCheck'   => undef,
						'Confirm'       => 'CellLysis',
					    },
		       '96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						 'Configuration' => 'OneToNone',
						 'Headers'       => ['96 well round plate'],
						 'InputCheck'    => 'GetAvailArchiveInInprogress',
						 'OutputCheck'   => undef,
						 'Confirm'       => 'CellLysis',
					     },	
		   },
      
      'dna purification' => {'96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						       'Configuration' => 'OneToOne',
						       'Headers'       => ['96 well flat plate', '96 well round plate'],
						       'InputCheck'    => 'GetAvailSubclonesInInprogress',
						       'OutputCheck'   => 'CheckIfUsedAsOutput',
						       'Confirm'       => 'DnaPurification',
						   }
			 },
      'claim dna plate' => {'purify plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					       'Configuration' => 'OneToNone',
					       'Headers'       => ['96 well round plate'],
					       'InputCheck'    => 'GetAvailSubclonesOutInprogress',
					       'OutputCheck'   => undef,
					       'Confirm'       => 'ClaimArchivePlate',
					   },
			    'inoc plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					     'Configuration' => 'OneToNone',
					     'Headers'       => ['96 well round plate'],
					     'InputCheck'    => 'GetAvailSubclonesInInprogress',
					     'OutputCheck'   => undef,
					     'Confirm'       => 'ClaimArchivePlate',
					 }
			},
      'rearray dna plates' => {'384 well AB load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'FourToOne',
							    'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well AB plate'],
							    'InputCheck'    => 'GetAvailSequenceToRearray',
							    'OutputCheck'   => 'CheckIfUsedAsOutput',
							    'Confirm'       => 'RearraySequencePlates',
							},
			   },
      'setup Biomek' => {'none' => {'SqlPackage'    => 'TouchScreen::BiomekSql',
				    'Configuration' => 'FiveToNone',
				    'Headers'       => ['FWD Resevoir', 'FWD Brew', 'REV Resevoir', 'REV Brew', 'Buddy'],
				    'InputCheck'    => 'CheckBiomekSetupInfo',
				    'OutputCheck'   => undef,
				    'Confirm'       => 'SetupBiomek',
				}
		     },
      'add brew to Biomek' => {'none' => {'SqlPackage'    => 'TouchScreen::BiomekSql',
					  'Configuration' => 'ThreeToNone',
					  'Headers'       => ['Resevoir', 'Brew', 'Buddy'],
					  'InputCheck'    => 'CheckBiomekAddInfo',
					  'OutputCheck'   => undef,
					  'Confirm'       => 'AddBrewToBiomek',
				      }
			   },
      'sequence' => {'96 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					      'Configuration' => 'OneToTwo',
					      'Headers'       => ['96 well round plate', 'FWD 96 well load plate', 'REV 96 well load plate'],
					      'InputCheck'    => 'GetAvailArchiveInInprogress',
					      'OutputCheck'   => 'CheckIfUsedAsOutput',
					      'Confirm'       => 'Sequence96',
					      'ConfirmOptions'=> {'GetFwdPrimerId'  => undef,
								  'GetFwdDyeChemId' => undef,
								  'GetFwdEnzId'     => undef,
								  'GetRevPrimerId'  => undef,
								  'GetRevDyeChemId' => undef,
								  'GetRevEnzId'     => undef,
								  'GetReagentNameFwd'  => undef,
								  'GetReagentNameRev'  => undef},
					  },
		     
		     '384 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					       'Configuration' => 'TwoToOne',
					       'Headers'       => ['96 well round plate','96 well round plate', '384 well round plate'],
					       'InputCheck'    => 'GetAvailArchiveInInprogress',
					       'OutputCheck'   => 'CheckIfUsedAsOutput',
					       'Confirm'       => 'Sequence384',
					       'ConfirmOptions'=> {'GetFwdPrimerId'  => undef,
								   'GetFwdDyeChemId' => undef,
								   'GetFwdEnzId'     => undef,
								   'GetRevPrimerId'  => undef,
								   'GetRevDyeChemId' => undef,
								   'GetRevEnzId'     => undef,
								   'GetReagentNameFwd'  => undef,
								   'GetReagentNameRev'  => undef},
					       
					   },
					     ,
		     
		     '384 well AB load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						  'Configuration' => 'TwoToOne',
						  'Headers'       => ['96 well round plate','96 well round plate', '384 well AB plate'],
						  'InputCheck'    => 'GetAvailArchiveInInprogress',
						  'OutputCheck'   => 'CheckIfUsedAsOutput',
						  'Confirm'       => 'Sequence384',
						  'ConfirmOptions'=> {'GetFwdPrimerId'  => undef,
								      'GetFwdDyeChemId' => undef,
								      'GetFwdEnzId'     => undef,
								      'GetRevPrimerId'  => undef,
								      'GetRevDyeChemId' => undef,
								      'GetRevEnzId'     => undef,
								      'GetReagentNameFwd'  => undef,
								      'GetReagentNameRev'  => undef},
						  
					      },
		 },
      
      'biomek sequencing' => {'96 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						       'Configuration' => 'OneToTwo',
						       'Headers'       => ['96 well round plate', 'FWD 96 well load plate', 'REV 96 well load plate'],
						       'InputCheck'    => 'GetAvailArchiveInInprogress',
						       'OutputCheck'   => 'CheckIfUsedAsOutput',
						       'Confirm'       => 'SequenceBiomek96',
						   },
			      '384 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							'Configuration' => 'TwoToOne',
							'Headers'       => ['96 well round plate','96 well round plate', '384 well round plate'],
							'InputCheck'    => 'GetAvailArchiveInInprogress',
							'OutputCheck'   => 'CheckIfUsedAsOutput',
							'Confirm'       => 'SequenceBiomek384',
						    },
			      '384 well AB load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							   'Configuration' => 'TwoToOne',
							   'Headers'       => ['96 well round plate','96 well round plate', '384 well AB load plate'],
							   'InputCheck'    => 'GetAvailArchiveInInprogress',
							   'OutputCheck'   => 'CheckIfUsedAsOutput',
							   'Confirm'       => 'SequenceBiomek384new',
						       },
			  },
      
      'resuspend dna' => {'384 well AB plate from biomek' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							      'Configuration' => 'OneToNone',
							      'Headers'       => ['384 well round plate'],
							      'InputCheck'    => 'GetAvailSequenceOutOrInInprogress',
							      'OutputCheck'   => undef,
							      'Confirm'       => 'ResuspendDna',
							  },
			  
			  '384 well plate from biomek' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							   'Configuration' => 'OneToNone',
							   'Headers'       => ['384 well round plate'],
							   'InputCheck'    => 'GetAvailSequenceOutInprogress',
							   'OutputCheck'   => undef,
							   'Confirm'       => 'ResuspendDna',
						       },
			  '96 well plate from biomek' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							  'Configuration' => 'OneToNone',
							  'Headers'       => ['96 well round plate'],
							  'InputCheck'    => 'GetAvailSequenceOutInprogress',
							  'OutputCheck'   => undef,
							  'Confirm'       => 'ResuspendDna',
						      },
			  '384 well plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					       'Configuration' => 'OneToNone',
					       'Headers'       => ['384 well round plate'],
					       'InputCheck'    => 'GetAvailSequenceOutInprogress',
					       'OutputCheck'   => undef,
					       'Confirm'       => 'ResuspendDna',
					   },
			  '96 well plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					      'Configuration' => 'OneToNone',
					      'Headers'       => ['96 well round plate'],
					      'InputCheck'    => 'GetAvailSequenceOutInprogress',
					      'OutputCheck'   => undef,
					      'Confirm'       => 'ResuspendDna',
					  },
			  '384 well AB plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
						  'Configuration' => 'OneToNone',
						  'Headers'       => ['384 well round plate'],
						  'InputCheck'    => 'GetAvailSequenceOutInprogress',
						  'OutputCheck'   => undef,
						  'Confirm'       => 'ResuspendDna',
					      },
		      },
      'rearray sequence plates' => {'384 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							      'Configuration' => 'FourToOne',
							      'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well round plate'],
							      'InputCheck'    => 'GetAvailSequenceToRearray',
							      'OutputCheck'   => 'CheckIfUsedAsOutput',
							      'Confirm'       => 'RearraySequencePlates',
							  },
				    '384 well AB load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								 'Configuration' => 'FourToOne',
								 'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well AB plate'],
								 'InputCheck'    => 'GetAvailSequenceToRearray',
								 'OutputCheck'   => 'CheckIfUsedAsOutput',
								 'Confirm'       => 'RearraySequencePlates',
							     },
				},
      'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
				    'Configuration' => 'OneToNone',
				    'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
				    'InputCheck'    => 'GetFailBarcodeDesc',
				    'OutputCheck'   => 0,
				    'Confirm'       => 'FailBarcode',
				    'DataInfos'     => {'A1' => 0, 
							'A2' => 0, 
							'B1' => 0, 
							'B2' => 0},
				}
		     },
      
      'abandon barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
				       'Configuration' => 'OneToNone',
				       'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
				       'InputCheck'    => 'GetFailBarcodeDesc',
				       'OutputCheck'   => 0,
				       'Confirm'       => 'AbandonBarcode',
				       'DataInfos'     => {'A1' => 0, 
							   'A2' => 0, 
							   'B1' => 0, 
							   'B2' => 0},
				   }
			},
      'rearray dna plate' => {'384 well AB load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							   'Configuration' => 'FourToOne',
							   'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well AB plate'],
							    'InputCheck'    => 'GetAvailArchiveInInprogress',
							   'OutputCheck'   => 'CheckIfUsedAsOutput',
							   'Confirm'       => 'RearrayDNAPlates',
						       },
			  },
      'biomek sequencing test' => {'384 well AB load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToOne',
								'Headers'       => ['384 well FWD load plate', '384 well REV load plate'],
								'InputCheck'    => 'GetAvailSubclonesOutInprogress',
								'OutputCheck'   => 'CheckIfUsedAsOutput',
								'Confirm'       => 'SequenceBiomek1to1_384',
							    },
			       },
      
  },
 
 'Freezer Management' => 
 {'assign archive plate to storage location' => {'384 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
									 'Configuration' => 'OneToDefined',
									 'Headers'       => ['freezer column barcode', 'Slot Position', 'archive barcode'],
												     'InputCheck'    => 'GetFreezerColumnDesc',
												     'OutputCheck'   => 'CheckIfArchiveInFreezer384',
												     'Confirm'       => 'PutArchivePlateInFreezerSlot',
												     'OutputDefined' => 'GetAvailableFreezerPositions',
												 },
									     '96 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												    'Configuration' => 'OneToDefined',
												    'Headers'       => ['freezer column barcode', 'Slot Position', 'archive barcode'],
												    'InputCheck'    => 'GetFreezerColumnDesc',
												    'OutputCheck'   => 'CheckIfArchiveInFreezer96',
												    'Confirm'       => 'PutArchivePlateInFreezerSlot',
												    'OutputDefined' => 'GetAvailableFreezerPositions',
												},
									     'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											'Configuration' => 'OneToDefined',
											'Headers'       => ['freezer column barcode', 'Slot Position', 'barcode'],
											'InputCheck'    => 'GetFreezerColumnDesc',
											'OutputCheck'   => 'CheckIfBarcodeInFreezer',
											'Confirm'       => 'PutArchivePlateInFreezerSlot',
											'OutputDefined' => 'GetAvailableFreezerPositions',
										    },
									 },
			      'retire archive plate from storage location' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												      'Configuration' => 'OneToNone',
												      'Headers'       => ['archive barcode'],
												      'InputCheck'    => 'GetFreezerBarcodeDesc96',
												      'Confirm'       => 'RetireArchivePlateFromFreezer',
												  },
									       '384 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												       'Configuration' => 'OneToNone',
												       'Headers'       => ['archive barcode'],
												       'InputCheck'    => 'GetFreezerBarcodeDesc384',
												       'Confirm'       => 'RetireArchivePlateFromFreezer',
												   },
									       'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												       'Configuration' => 'OneToNone',
												       'Headers'       => ['archive barcode'],
												       'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
												       'Confirm'       => 'RetireArchivePlateFromFreezer',
												   },
									   },
			      'retire all archives in a storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
									  },
			      'assign freezer box to storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
										      'Configuration' => 'OneToDefined',
										      'Headers'       => ['freezer column barcode', 'Slot Position', 'box barcode'],
										      'InputCheck'    => 'GetFreezerColumnDesc',
										      'OutputCheck'   => 'CheckIfBarcodeInFreezer',
										      'Confirm'       => 'PutArchivePlateInFreezerSlot',
										      'OutputDefined' => 'GetAvailableFreezerPositions',
										    },
								       },
			      'retire freezer box from storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											'Configuration' => 'OneToNone',
											'Headers'       => ['box barcode'],
											'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
											'Confirm'       => 'RetireArchivePlateFromFreezer',
										    },
									 },
			      'assign tube to freezer box location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
										   'Configuration' => 'OneToDefined',
										   'Headers'       => ['box barcode', 'box position', 'tube barcode'],
										   'InputCheck'    => 'GetFreezerBoxWellDescWithCheck',
										   'OutputCheck'   => 'CheckIfBarcodeInFreezer',
										   'Confirm'       => 'PutArchivePlateInFreezerSlot',
										   'OutputDefined' => 'GetAvailableFreezerPositions',
									       },
								       },
			      'retire tube from freezer box location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
										     'Configuration' => 'OneToNone',
										     'Headers'       => ['tube barcode'],
										     'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
										     'Confirm'       => 'RetireArchivePlateFromFreezer',
										 },
								      },
			  },
			     'Storage Management' => 
			     {'assign archive plate to storage location' => {'384 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												     'Configuration' => 'OneToDefined',
												     'Headers'       => ['freezer column barcode', 'Slot Position', 'archive barcode'],
												     'InputCheck'    => 'GetFreezerColumnDesc',
												     'OutputCheck'   => 'CheckIfArchiveInFreezer384',
												     'Confirm'       => 'PutArchivePlateInFreezerSlot',
												     'OutputDefined' => 'GetAvailableFreezerPositions',
												 },
									     '96 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												    'Configuration' => 'OneToDefined',
												    'Headers'       => ['freezer column barcode', 'Slot Position', 'archive barcode'],
												    'InputCheck'    => 'GetFreezerColumnDesc',
												    'OutputCheck'   => 'CheckIfArchiveInFreezer96',
												    'Confirm'       => 'PutArchivePlateInFreezerSlot',
												    'OutputDefined' => 'GetAvailableFreezerPositions',
												},
									     'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											'Configuration' => 'OneToDefined',
											'Headers'       => ['freezer column barcode', 'Slot Position', 'barcode'],
											'InputCheck'    => 'GetFreezerColumnDesc',
											'OutputCheck'   => 'CheckIfBarcodeInFreezer',
											'Confirm'       => 'PutArchivePlateInFreezerSlot',
											'OutputDefined' => 'GetAvailableFreezerPositions',
										    },
									 },
			      'retire archive plate from storage location' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												      'Configuration' => 'OneToNone',
												      'Headers'       => ['archive barcode'],
												      'InputCheck'    => 'GetFreezerBarcodeDesc96',
												      'Confirm'       => 'RetireArchivePlateFromFreezer',
												  },
									       '384 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												       'Configuration' => 'OneToNone',
												       'Headers'       => ['archive barcode'],
												       'InputCheck'    => 'GetFreezerBarcodeDesc384',
												       'Confirm'       => 'RetireArchivePlateFromFreezer',
												   },
									       'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												       'Configuration' => 'OneToNone',
												       'Headers'       => ['archive barcode'],
												       'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
												       'Confirm'       => 'RetireArchivePlateFromFreezer',
												   },
									   },
			      'retire all archives in a storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
                                                                              'freezer box' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
                                                                              'freezer rack' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
									  },
			      'retire all contents in a storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
                                                                              'freezer box' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
                                                                              'freezer rack' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
									  },
			      'assign freezer box to storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
										      'Configuration' => 'OneToDefined',
										      'Headers'       => ['freezer column barcode', 'Slot Position', 'box barcode'],
										      'InputCheck'    => 'GetFreezerColumnDesc',
										      'OutputCheck'   => 'CheckIfBarcodeInFreezer',
										      'Confirm'       => 'PutArchivePlateInFreezerSlot',
										      'OutputDefined' => 'GetAvailableFreezerPositions',
										    },
								       },
			      'retire freezer box from storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											'Configuration' => 'OneToNone',
											'Headers'       => ['box barcode'],
											'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
											'Confirm'       => 'RetireArchivePlateFromFreezer',
										    },
									 },
			      'assign tube to freezer box location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
										   'Configuration' => 'OneToDefined',
										   'Headers'       => ['box barcode', 'box position', 'tube barcode'],
										   'InputCheck'    => 'GetFreezerBoxWellDescWithCheck',
										   'OutputCheck'   => 'CheckIfBarcodeInFreezer',
										   'Confirm'       => 'PutArchivePlateInFreezerSlot',
										   'OutputDefined' => 'GetAvailableFreezerPositions',
									       },
								       },
			      'retire tube from freezer box location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
										     'Configuration' => 'OneToNone',
										     'Headers'       => ['tube barcode'],
										     'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
										     'Confirm'       => 'RetireArchivePlateFromFreezer',
										 },
								      },
			      'expunge from storage' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
						       'Configuration' => 'OneToNone',
						       'Headers'       => ['Barcode'], 
						       'InputCheck'    => 'hasItBeExpunged',
						       'Confirm'       => 'expungeFromStorage',}
					 },
			      'expunge all' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
						       'Configuration' => 'OneToNone',
						       'Headers'       => ['Barcode'], 
						       'InputCheck'    => 'isFreezerRackOrColumnOccupied',
						       'Confirm'       => 'expungeAll',}
					 },
			  },
			     'freezer location' => 
			     {'assign archive plate to storage location' => {'384 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												     'Configuration' => 'OneToDefined',
												     'Headers'       => ['freezer column barcode', 'Slot Position', 'archive barcode'],
												     'InputCheck'    => 'GetFreezerColumnDesc',
												     'OutputCheck'   => 'CheckIfArchiveInFreezer384',
												     'Confirm'       => 'PutArchivePlateInFreezerSlot',
												     'OutputDefined' => 'GetAvailableFreezerPositions',
												 },
									     '96 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												    'Configuration' => 'OneToDefined',
												    'Headers'       => ['freezer column barcode', 'Slot Position', 'archive barcode'],
												    'InputCheck'    => 'GetFreezerColumnDesc',
												    'OutputCheck'   => 'CheckIfArchiveInFreezer96',
												    'Confirm'       => 'PutArchivePlateInFreezerSlot',
												    'OutputDefined' => 'GetAvailableFreezerPositions',
												},
									     'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											'Configuration' => 'OneToDefined',
											'Headers'       => ['freezer column barcode', 'Slot Position', 'barcode'],
											'InputCheck'    => 'GetFreezerColumnDesc',
											'OutputCheck'   => 'CheckIfBarcodeInFreezer',
											'Confirm'       => 'PutArchivePlateInFreezerSlot',
											'OutputDefined' => 'GetAvailableFreezerPositions',
										    },
									 },
			      'retire archive plate from storage location' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												      'Configuration' => 'OneToNone',
												      'Headers'       => ['archive barcode'],
												      'InputCheck'    => 'GetFreezerBarcodeDesc96',
												      'Confirm'       => 'RetireArchivePlateFromFreezer',
												  },
									       '384 archive plate' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
												       'Configuration' => 'OneToNone',
												       'Headers'       => ['archive barcode'],
												       'InputCheck'    => 'GetFreezerBarcodeDesc384',
												       'Confirm'       => 'RetireArchivePlateFromFreezer',
												   },
									       'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											  'Configuration' => 'OneToNone',
											  'Headers'       => ['archive barcode'],
											  'InputCheck'    => 'GetFreezerBarcodeDescToCheckout',
											  'Confirm'       => 'RetireArchivePlateFromFreezer',
										      },
									   },
			      'retire all archives in a storage location' => {'none' => {'SqlPackage'    => 'TouchScreen::FreezeSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['freezer storage barcode'],
											 'InputCheck'    => 'GetFreezerDesc',
											 'Confirm'       => 'RetireAllArchivesFromStorageLoc',
										     },
									  },
			  },
			     'plate ligation' => 
			     {'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Barcode'],
							    'InputCheck'    => 'GetFailBarcodeDesc',
							    'OutputCheck'   => 0,
							    'Confirm'       => 'FailBarcode',
							}
					     },
			  },
			     
			     'm13 Production' => 
			     {'pick' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToMany',
								'Headers'       => ['Agar Plate', '96 well archive plates'],
								'InputCheck'    => 'GetAvailM13AgarPlate',
								'OutputCheck'   => 'CheckIfUsedAsOutput',
								'Confirm'       => 'Pick96ProductionArchive',
							    },
					 '96 growth box' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							     'Configuration' => 'OneToMany',
							     'Headers'       => ['Agar Plate', '96 well growth box'],
							     'InputCheck'    => 'GetAvailM13AgarPlate',
							     'OutputCheck'   => 'CheckIfUsedAsOutput',
							     'Confirm'       => 'Pick96ProductionArchive',
							 },
				     },
			      
			      'claim archive plate' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								   'Configuration' => 'OneToNone',
								   'Headers'       => ['archive plate'],
								   'InputCheck'    => 'GetAvailM13ToClaim',
								   'OutputCheck'   => undef,
								   'Confirm'       => 'ClaimArchivePlate',
							       }
							
						    },
			      'claim growth box' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToNone',
								'Headers'       => ['growth box'],
								'InputCheck'    => 'GetAvailM13ToClaim',
								'OutputCheck'   => undef,
								'Confirm'       => 'ClaimArchivePlate',
							    },
						 },
			      
			      'archive growth' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									  'Configuration' => 'OneToOne',
									  'Headers'       => ['growth plate', 'archive plate'],
									  'InputCheck'    => 'GetAvailArchiveInInprogressM13',
									  'OutputCheck'   => 'CheckIfUsedAsOutput',
									  'Confirm'       => 'ArchiveToSubcloneTransfer', 
									  'PostConfirmOperation' => 'CompletePses',
								      },
						   
					       },
			      'dna purification' => {'96 archive to 96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
											     'Configuration' => 'OneToOne',
											     'Headers'       => ['96 well archive plate', '96 well round plate'],
											     'InputCheck'    => 'GetAvailArchiveInInprogressM13',
											     'OutputCheck'   => 'CheckIfUsedAsOutput',
											     'Confirm'       => 'ArchiveToSubcloneTransfer',
											 },
						     '96 growth to 96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
											    'Configuration' => 'OneToOne',
											    'Headers'       => ['96 well growth box', '96 well round plate'],
											    'InputCheck'    => 'GetAvailArchiveInCompletedM13',
											    'OutputCheck'   => 'CheckIfUsedAsOutput',
											    'Confirm'       => 'ArchiveToSubcloneTransfer',
											},
						 },
			      
			      'sequence' => {'96 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								      'Configuration' => 'OneToOne',
								      'Headers'       => ['96 well round plate', '96 well load plate'],
								      'InputCheck'    => 'GetAvailSubclonesOutInprogressM13',
								      'OutputCheck'   => 'CheckIfUsedAsOutput',
								      'Confirm'       => 'Sequence96m13',
								      'ConfirmOptions'=> {'GetFwdPrimerId'  => undef,
											  'GetFwdDyeChemId' => undef,
											  'GetFwdEnzId'     => undef,
											  'GetReagentName'  => undef,},
								  },
					     
					     
					     '384 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								       'Configuration' => 'FourToOne',
								       'Headers'       => ['96 well round plate','96 well round plate','96 well round plate','96 well round plate', '384 well round plate'],
								       'InputCheck'    => 'GetAvailSubclonesOutInprogressM13',
								       'OutputCheck'   => 'CheckIfUsedAsOutput',
								       'Confirm'       => 'Sequence384m13',
								       'ConfirmOptions'=> {'GetFwdPrimerId'  => undef,
											   'GetFwdDyeChemId' => undef,
											   'GetFwdEnzId'     => undef,
											   'GetReagentName'  => undef,},
								   }
					 },
			      
			      'biomek sequencing' => {'96 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									     'Configuration' => 'OneToOne',
									     'Headers'       => ['96 well round plate', '96 well load plate'],
									     'InputCheck'    => 'GetAvailSubclonesOutInprogressM13',
									     'OutputCheck'   => 'CheckIfUsedAsOutput',
									     'Confirm'       => 'SequenceBiomek96m13',
									 },
						    
						    
						    '384 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									      'Configuration' => 'FourToOne',
									      'Headers'       => ['96 well round plate','96 well round plate','96 well round plate','96 well round plate', '384 well round plate'],
									      'InputCheck'    => 'GetAvailSubclonesOutInprogressM13',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'SequenceBiomek384m13',
								   }
					 },
			      
			      
			      'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
							    'InputCheck'    => 'GetFailBarcodeDesc',
							    'OutputCheck'   => 0,
							    'Confirm'       => 'FailBarcode',
							    'DataInfos'     => {'A1' => 0, 
										'A2' => 0, 
										'B1' => 0, 
										'B2' => 0},
							}
					     },
			      
			      'abandon barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
							       'InputCheck'    => 'GetFailBarcodeDesc',
							       'OutputCheck'   => 0,
							       'Confirm'       => 'AbandonBarcode',
							       'DataInfos'     => {'A1' => 0, 
										   'A2' => 0, 
										   'B1' => 0, 
										   'B2' => 0},
							   }
						},
			  },
			     
			     
			     'Prefinish' => 
			     {'rearray subclones' => {'96 well flat bottom' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
										'Configuration' => 'OneToNone',
										'Headers'       => ['Barcode'], 
										'InputCheck'    => '',
										'OutputCheck'   => 0,
										'Confirm'       => '',
									    },
						  },
			  },
			     'Directed Sequencing' => 
			     {
				 'verify growths' => {'none' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['Rearray Plate', 'No Grow Selection'], 
								 'InputCheck'    => 'GetAvailBarcodeOutInprogress',
								 'Confirm'       => 'VerifyGrowths', 
								 'DataInfos'     => {'No Grow Selection' => 0},
							     },
						  },
				 'archive targeted subclones' => {'96 round plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
										       'Configuration' => 'OneToOne',
										       'Headers'       => ['Rearray Plate', 'Archive Plate'], 
										       'InputCheck'    => 'GetAvailArchiveTargetedSubclones',
										       'OutputCheck'   => 'CheckIfUsedAsOutput',
										       'Confirm'       => 'ArchiveTargetedSubclones',,
										   },
							      },

				 'claim growth plate' => {'96 well round plate' => {'SqlPackage'   => 'TouchScreen::PrefinishSql',
										   'Configuration' => 'OneToNone',
										   'Headers'       => ['flat plate'],
										   'InputCheck'    => 'GetAvailBarcodeInInprogress',
										   'Confirm'       => 'ClaimPfPlate',
									       },
						       },
			      
				 'cell lysis' => {'96 well flat plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
									   'Configuration' => 'OneToNone',
									   'Headers'       => ['Rearray Plate'], 
								           'InputCheck'    => 'GetAvailBarcodeInInprogress',
									   'Confirm'       => 'PrepProcessing', 
								       },
						  '96 well round plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
									    'Configuration' => 'OneToNone',
									    'Headers'       => ['Rearray Plate'], 
								            'InputCheck'    => 'GetAvailBarcodeInInprogress',
									    'Confirm'       => 'PrepProcessing', 
									},
					      },
				 
				 'dna purification' => {'96 well round plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
										  'Configuration' => 'OneToOne',
										  'Headers'       => ['Rearray Plate', 'Dna Purification Plate'], 
										  'InputCheck'    => 'GetAvailBarcodeInInprogress',
										  'OutputCheck'   => 'CheckIfUsedAsOutput',
										  'Confirm'       => 'PrepProcessing', 
									      },
						    },
				 
				 'claim bead plate' => {'none' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['96 well round plate'],
								  'InputCheck'    => 'GetAvailBarcodeInInprogress',
								  'Confirm'       => 'ClaimPfPlate',
							      }
						   },
				 'elution' => {'96 well round plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
									 'Configuration' => 'OneToOne',
									 'Headers'       => ['Dna Purification Plate', 'Elution Plate'], 
								         'InputCheck'    => 'GetAvailBarcodeInInprogress',
									 'OutputCheck'   => 'CheckIfUsedAsOutput',
									 'Confirm'       => 'ElutionTransfer', 
								     },
					   },
				 
				 'rearray dna' => {'384 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                        'Configuration' => 'FourToOne',
                                                                        'Headers'       => ['Elution Plate A1','Elution Plate A2','Elution Plate B1','Elution Plate B2','384 well Plate'],
                                                                        'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                        'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                        'Confirm'       => 'RearrayElutionPlates',
                                                                    },
                                                   '384 well plate NO elution' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                                   'Configuration' => 'FourToOne',
                                                                                   'Headers'       => ['Elution Plate A1','Elution Plate A2','Elution Plate B1','Elution Plate B2','384 well Plate'],
                                                                                   'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                                                   'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                                   'Confirm'       => 'RearrayPlatesWithNoQuadCheck',
                                                                               },
                                                   '384 well plate with primer plate check' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                                                'Configuration' => 'FourToOne',
                                                                                                'Headers'       => ['Elution Plate A1','Elution Plate A2','Elution Plate B1','Elution Plate B2','384 well Plate'],
                                                                                                'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                                                'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                                                'Confirm'       => 'RearrayPlatesWithQuadCheck',
                                                                                            },
                                               },
                                 
                                 'rearray oligo' => {'384 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                          'Configuration' => 'FourToOne',
                                                                          'Headers'       => ['Primer Plate A1','Primer Plate A2','Primer Plate B1','Primer Plate B2','384 well Primer Plate'],
                                                                          'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                                          'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                          'Confirm'       => 'RearrayPrimerPlates',
                                                                      },
                                                     
                                                 },
                                 
                                 
				 'sequence' => {'96 well round plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
									  'Configuration' => 'OneToOne',
									  'Headers'       => ['Elution Plate','Sequence Plate'],
									  'InputCheck'    => 'GetAvailPrefinishSequence',
									  'OutputCheck'   => 'CheckIfUsedAsOutput',
									  'Confirm'       => 'SequencePrefinish',
									  'ConfirmOptions'=> {'GetPfPrimerId'  => undef,
											      'GetPfDyeChemId' => undef,
											      'GetPfEnzId'     => undef,
											      'GetReagentName' => undef,},
								      },
                                                '384 well universal brews' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                               'Configuration' => 'OneToNone',
                                                                               'Headers'       => ['Rearrayed 384 Plate'],
                                                                               'InputCheck'    => 'GetAvailPrefinishSequence',
                                                                               'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                               'Confirm'       => 'SequencePrefinish384Universal',
                                                                               'ConfirmOptions'=> {'GetPfPrimerId'  => undef,
                                                                                                   'GetPfDyeChemId' => undef,
                                                                                                   'GetPfEnzId'     => undef,
                                                                                                   'GetReagentName' => undef,},
                                                                           },
						'96 well round plate with oligos' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
										      'Configuration' => 'TwoToOne',
										      'Headers'       => ['Elution Plate', 'Oligo Plate', 'Sequence Plate'], 
										      'InputCheck'    => 'GetAvailPrefinishOligoSequence',
										      'OutputCheck'   => 'CheckIfUsedAsOutput',
										      'Confirm'       => 'SequenceWithCustomPrimers',
										      'ConfirmOptions'=> {'GetReagentName'  => undef,},
										  },
						'384 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                     'Configuration' => 'TwoToNone',
                                                                     'Headers'       => ['384 well Sequence plate', '384 well Primer Plate'], 
                                                                     'InputCheck'    => 'GetAvailPrefinishOligoSequence384',
                                                                     'OutputCheck'   => undef,
                                                                     'Confirm'       => 'SequenceWithCustomPrimers384',
                                                                     'ConfirmOptions'=> {'GetReagentName'  => undef,},
                                                                 },
                                                'unique 384 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                            'Configuration' => 'TwoToNone',
                                                                            'Headers'       => ['384 well Sequence plate', '384 well Primer Plate'], 
                                                                            'InputCheck'    => 'GetAvailPrefinishOligoSequence384',
                                                                            'OutputCheck'   => undef,
                                                                            'Confirm'       => 'SequenceWithCustomPrimers384_scheduled',
                                                                            'ConfirmOptions'=> {'GetReagentName'  => undef,},
                                                                            'PostConfirmOperation' => 'confirm_pse_scheduling',
                                                                        } 
					    },
                                 
                                 'add control dna' => {'none' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                  'Configuration' => 'OneToNone',
								  'Headers'       => ['Sequence Plate'], 
								  'InputCheck'    => 'GetAvailWholeBarcodeInOutInprogress',
								  'Confirm'       => 'AddControlDna', 
							      },
						       '384 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                            'Configuration' => 'OneToNone',
                                                                            'Headers'       => ['Sequence Plate'], 
                                                                            'InputCheck'    => 'GetAvailWholeBarcodeInOutInprogress',
                                                                            'Confirm'       => 'AddControlDna384', 
                                                                        },
						       
						   },
				 
				 'resuspend dna' => {'96 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
									 'Configuration' => 'OneToNone',
									 'Headers'       => ['96 well sequence plate'],
								         'InputCheck'    => 'GetAvailBarcodeInOutInprogress',
									 'Confirm'       => 'SeqDnaToSeqDnaTransferWithNoDNAPSE',
								     },
                                                     '384 well plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                          'Configuration' => 'OneToNone',
                                                                          'Headers'       => ['384 well sequence plate'],
                                                                          'InputCheck'    => 'GetAvailBarcodeInOutInprogress',
                                                                          'Confirm'       => 'SeqDnaToSeqDnaTransfer384WithNoDNAPSE',
                                                                      },
						 },
                                 'rearray sequence plates' => {'384 well load plate' => {'SqlPackage'    => 'TouchScreen::TangoSql',
                                                                                         'Configuration' => 'TenToNone',
											 'Headers'       => ['A1 Deck', 'A1 Plate', 'A2 Deck', 'A2 Plate','B1 Deck', 'B1 Plate', 'B2 Deck', 'B2 Plate', '384 Deck', '384 Plate'],
											 'InputCheck'    => 'CheckTangoSetupInfo',
											 'Confirm'       => 'SetupTango',
										     },
							   },
                                 
				 'checkin oligo plate' => {'none' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
								      'Configuration' => 'OneToNone',
								      'Headers'       => ['Oligo Plate'], 
								      'InputCheck'    => 'GetAvailBarcodeInInprogress',
								      'Confirm'       => 'ClaimPfPlate',
								  },
                                                           '384 well primer plate' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
                                                                                       'Configuration' => 'OneToNone',
                                                                                       'Headers'       => ['Oligo Plate'], 
                                                                                       'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                                                       'Confirm'       => 'ClaimPfPlate',
                                                                                   },
						       },
				 
				 'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['Barcode'],
							       'InputCheck'    => 'GetFailBarcodeDesc',
							       'OutputCheck'   => 0,
							       'Confirm'       => 'FailBarcode',
							   }
						},
			     },
			     'Growth Prep' => 
     			      {
				  'streak' => {'growth streak agar plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									  'Configuration' => 'OneToDefined',
									  'Headers'       => ['Source BC','Source DNA', 'Dest Streak Plate'], 
									  'InputCheck'    => 'CheckAvailStreak',
									  'OutputDefined' => 'GetAvailableStreaks',
									  'OutputCheck'   => 'CheckStreakPtr',
									  'Confirm'       => 'ConfirmScheduledStreak',
								      },
					   },			   

			     'inoculate' => {'250mL growth inoc flask' => {'SqlPackage'    => 'TouchScreen::LibSql',
									    'Configuration' => 'OneToMany',
									    'Headers'       => ['streaked agar plate', 'inoc flask'], 
									    'InputCheck'    => 'GetAvailClone',
									    'OutputCheck'   => 'CheckIfUsedAsOutput',
									    'Confirm'       => 'NewGrowth',}
					  },
			      
			      'transfer growth' => {'250mL centrifuge bottle' => {'SqlPackage'    => 'TouchScreen::LibSql',
										  'Configuration' => 'OneToOne',
										  'Headers'       => ['inoc flask', 'centrifuge bottle'], 
										  'InputCheck'    => 'GetAvailGrowthOutInprogress',
										  'OutputCheck'   => 'CheckIfUsedAsOutput',
										  'Confirm'       => 'ProcessGrowth',}
						},
			      'create glycerol stock' => {'96 well flat plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
										   'Configuration' => 'OneToDefined',
										   'Headers'       => ['96 well flat plate', 'Well', 'centrifuge bottle'], 
										   'InputCheck'    => 'GetGlycerolPlateInfo',
										   'OutputCheck'   => 'GetAvailGlycerol',
										   'Confirm'       => 'CreateGlycerolGrowth',
										   'OutputDefined' => 'GetAvailableWellsInGrowthPlate'},
                    'small agar plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
                                           'Configuration' => 'OneToDefined',
                                           'Headers'       => ['small agar plate', 'centrifuge bottle'],
                                           'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                           'OutputCheck'   => 'GetAvailGlycerol',
                                           'Confirm'       => 'CreateGlycerolGrowth',
                                          }, 
						      },
			      
			      'pellet cell debris' => {'250mL centrifuge bottle' => {'SqlPackage'    => 'TouchScreen::LibSql',
										     'Configuration' => 'OneToOne',
										     'Headers'       => ['centrifuge bottle', 'centrifuge bottle'], 
										     'InputCheck'    => 'GetAvailGrowthInInprogress',
										     'OutputCheck'   => 'CheckIfUsedAsOutput',
										     'Confirm'       => 'ProcessGrowth',}
						   },
			      'isopropanol precipitation' => {'250mL centrifuge bottle' => {'SqlPackage'    => 'TouchScreen::LibSql',
											    'Configuration' => 'OneToOne',
											    'Headers'       => ['centrifuge bottle', 'centrifuge bottle'], 
											    'InputCheck'    => 'GetAvailGrowthOutInprogress',
											    'OutputCheck'   => 'CheckIfUsedAsOutput',
											    'Confirm'       => 'ProcessGrowth',}
									   },
			      
			      'suspend dna' => {'50mL dna suspension tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									'Configuration' => 'OneToOne',
									'Headers'       => ['centrifuge bottle', 'conical tube'], 
									'InputCheck'    => 'GetAvailGrowthOutInprogress',
									'OutputCheck'   => 'CheckIfUsedAsOutput',
									'Confirm'       => 'ProcessGrowth',}
					    },
			      
			      'ethanol precipitation' => {'50mL EtOH ppt tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
										  'Configuration' => 'OneToOne',
										  'Headers'       => ['conical tube','EtOH precip tube'], 
										  'InputCheck'    => 'GetAvailGrowthOutInprogress',
										  'OutputCheck'   => 'CheckIfUsedAsOutput',
										  'Confirm'       => 'ProcessGrowth',
									      }
						      },
			      
			      'transfer resuspended dna' => {'1.7mL rna digest tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											 'Configuration' => 'OneToOne',
											 'Headers'       => ['EtOH precip tube','rna digest tube'], 
											 'InputCheck'    => 'GetAvailGrowthOutInprogress',
											 'OutputCheck'   => 'CheckIfUsedAsOutput',
											 'Confirm'       => 'ProcessGrowth',
										     }
						      },
			      'digest rna' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							  'Configuration' => 'OneToNone',
							  'Headers'       => ['rna digest tube'], 
							  'InputCheck'    => 'GetAvailGrowthOutInprogress',
							  'OutputCheck'   => undef,
							  'Confirm'       => 'ProcessGrowth',
							  }
						      },
			      
			      'phenol:chlor extraction 1' => {'1.7mL phenol:chlor ext.1 tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												  'Configuration' => 'OneToOne',
												  'Headers'       => ['rna digest tube','1.7mL phenol:chlor ext.1 tube'], 
												  'InputCheck'    => 'GetAvailGrowthInInprogress',
												  'OutputCheck'   => 'CheckIfUsedAsOutput',
												  'Confirm'       => 'ProcessGrowth',
											      }
						      },
			      
			      'phenol:chlor extraction 2' => {'1.7mL phenol:chlor ext.2 tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												  'Configuration' => 'OneToOne',
												  'Headers'       => ['1.7mL phenol:chlor ext.1 tube','1.7mL phenol:chlor ext.2 tube'], 
												  'InputCheck'    => 'GetAvailGrowthOutInprogress',
												  'OutputCheck'   => 'CheckIfUsedAsOutput',
												  'Confirm'       => 'ProcessGrowth',
											      }
							  },
			      
			      'chloroform extraction' => {'1.7mL chloroform ext.tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											  'Configuration' => 'OneToOne',
											  'Headers'       => ['1.7mL phenol:chlor ext.2 tube','1.7mL chloroform ext.tube'], 
											  'InputCheck'    => 'GetAvailGrowthOutInprogress',
											  'OutputCheck'   => 'CheckIfUsedAsOutput',
											  'Confirm'       => 'ProcessGrowth',
										      }
						      },
			      
			      'isopropanol precipitation 2' => {'1.7mL isoprop precip 2 tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												  'Configuration' => 'OneToOne',
												  'Headers'       => ['1.7mL chloroform ext.tube','1.7mL isoprop precip 2 tube'], 
												  'InputCheck'    => 'GetAvailGrowthOutInprogress',
												  'OutputCheck'   => 'CheckIfUsedAsOutput',
												  'Confirm'       => 'ProcessGrowth',
											      }
							    },
			      
			      
			      'finalize dna' => {'1.7mL growth dna tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									     'Configuration' => 'OneToOne',
									     'Headers'       => ['conical tube','dna tube'], 
									     'InputCheck'    => 'GetAvailGrowthOutInprogress',
									     'OutputCheck'   => 'CheckIfUsedAsOutput',
									     'Confirm'       => 'ProcessAndFinalizeGrowth'}
						                             ###'PostConfirmOperation' => 'FinalizeDnaGrowth',

					     },
			      'abandon growth' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							      'Configuration' => 'OneToNone',
							      'Headers'       => ['Barcode'],
							      'InputCheck'    => 'GetFailBarcodeDesc',
							      'OutputCheck'   => 0,
							      'Confirm'       => 'AbandonBarcode',
							   }
					       },
			      
			      'fail growth' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							   'Configuration' => 'OneToNone',
							   'Headers'       => ['Barcode'],
							   'InputCheck'    => 'GetFailBarcodeDesc',
							   'OutputCheck'   => 0,
							   'Confirm'       => 'FailBarcode',
						       }
					       },
			      
			  },

			     'Short Growth Prep' => 
			     {'inoculate' => {'250mL growth inoc flask' => {'SqlPackage'    => 'TouchScreen::LibSql',
									    'Configuration' => 'OneToMany',
									    'Headers'       => ['streaked agar plate', 'inoc flask'], 
									    'InputCheck'    => 'GetAvailClone',
									    'OutputCheck'   => 'CheckIfUsedAsOutput',
									    'Confirm'       => 'NewGrowth',}
					  },
			      
			      'transfer growth' => {'250mL centrifuge bottle' => {'SqlPackage'    => 'TouchScreen::LibSql',
										  'Configuration' => 'OneToOne',
										  'Headers'       => ['inoc flask', 'centrifuge bottle'], 
										  'InputCheck'    => 'GetAvailGrowthOutInprogress',
										  'OutputCheck'   => 'CheckIfUsedAsOutput',
										  'Confirm'       => 'ProcessGrowth',}
						},
			      'create glycerol stock' => {'96 well flat plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
										   'Configuration' => 'OneToDefined',
										   'Headers'       => ['96 well flat plate', 'Well', 'centrifuge bottle'], 
										   'InputCheck'    => 'GetGlycerolPlateInfo',
										   'OutputCheck'   => 'GetAvailGlycerol',
										   'Confirm'       => 'CreateGlycerolGrowth',
										   'OutputDefined' => 'GetAvailableWellsInGrowthPlate'}
						      },
			      
			      'pellet cell debris' => {'250mL centrifuge bottle' => {'SqlPackage'    => 'TouchScreen::LibSql',
										     'Configuration' => 'OneToOne',
										     'Headers'       => ['centrifuge bottle', 'centrifuge bottle'], 
										     'InputCheck'    => 'GetAvailGrowthInInprogress',
										     'OutputCheck'   => 'CheckIfUsedAsOutput',
										     'Confirm'       => 'ProcessGrowth',}
						   },
			      'isopropanol precipitation' => {'250mL centrifuge bottle' => {'SqlPackage'    => 'TouchScreen::LibSql',
											    'Configuration' => 'OneToOne',
											    'Headers'       => ['centrifuge bottle', 'centrifuge bottle'], 
											    'InputCheck'    => 'GetAvailGrowthOutInprogress',
											    'OutputCheck'   => 'CheckIfUsedAsOutput',
											    'Confirm'       => 'ProcessGrowth',}
									   },
			      
			      'suspend dna' => {'50mL dna suspension tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									'Configuration' => 'OneToOne',
									'Headers'       => ['centrifuge bottle', 'conical tube'], 
									'InputCheck'    => 'GetAvailGrowthOutInprogress',
									'OutputCheck'   => 'CheckIfUsedAsOutput',
									'Confirm'       => 'ProcessGrowth',}
					    },
			      
			      'ethanol precipitation' => {'50mL EtOH ppt tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
										  'Configuration' => 'OneToOne',
										  'Headers'       => ['conical tube','EtOH precip tube'], 
										  'InputCheck'    => 'GetAvailGrowthOutInprogress',
										  'OutputCheck'   => 'CheckIfUsedAsOutput',
										  'Confirm'       => 'ProcessGrowth',
									      }
						      },
			      
			      'isopropanol precipitation 2' => {'1.7mL isoprop precip 2 tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												  'Configuration' => 'OneToOne',
												  'Headers'       => ['1.7mL chloroform ext.tube','1.7mL isoprop precip 2 tube'], 
												  'InputCheck'    => 'GetAvailGrowthOutInprogress',
												  'OutputCheck'   => 'CheckIfUsedAsOutput',
												  'Confirm'       => 'ProcessGrowth',
											      }
							    },
			      
			      
			      'finalize dna' => {'1.7mL growth dna tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									     'Configuration' => 'OneToOne',
									     'Headers'       => ['conical tube','dna tube'], 
									     'InputCheck'    => 'GetAvailGrowthOutInprogress',
									     'OutputCheck'   => 'CheckIfUsedAsOutput',
									     'Confirm'       => 'ProcessAndFinalizeGrowth'}
									     ####'PostConfirmOperation' => 'FinalizeDnaGrowth',}
					     },
			      'abandon growth' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							      'Configuration' => 'OneToNone',
							      'Headers'       => ['Barcode'],
							      'InputCheck'    => 'GetFailBarcodeDesc',
							      'OutputCheck'   => 0,
							      'Confirm'       => 'AbandonBarcode',
							   }
					       },
			      
			      'fail growth' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							   'Configuration' => 'OneToNone',
							   'Headers'       => ['Barcode'],
							   'InputCheck'    => 'GetFailBarcodeDesc',
							   'OutputCheck'   => 0,
							   'Confirm'       => 'FailBarcode',
						       }
					       },
			  },			      
			     'Library Construction' => 
			     {'archive final dna' => {'96 flat plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
									  'Configuration' => 'OneToDefined',
									  'Headers'       => ['96 well flat plate', 'Well', 'final dna tube'], 
									  'InputCheck'    => 'GetGlycerolPlateInfo',
									  'OutputCheck'   => 'GetAvailGrowthForArchive',
									  'Confirm'       => 'CreateFinalDnaArchive',
									  'OutputDefined' => 'GetAvailableWellsInGrowthPlate',
								      },
						  },
			      'sonicate' => {'1.7mL sonication tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									 'Configuration' => 'OneToOne',
									 'Headers'       => ['growth tube', 'sonication tube'], 
									 'InputCheck'    => 'GetAvailGrowthToSonicate',
									 'OutputCheck'   => 'CheckIfUsedAsOutput',
									 'Confirm'       => 'CreateLibrary',
								     },
					     'resonicate 1.7mL sonication tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
										    'Configuration' => 'OneToNone',
										    'Headers'       => ['sonication tube'], 
										    'InputCheck'    => 'GetAvailLibraryResonicate',
										    'OutputCheck'   => undef,
										    'Confirm'       => 'ProcessLibraryResonicate',
										},
					 },
			      'load sonication gel' => {'sonication gel 1' => {'SqlPackage'    => 'TouchScreen::LibSql',
									       'Configuration' => 'OneToDefined',
									       'Headers'       => ['sonication gel', 'gel lane', 'sonication tube'], 
									       'InputCheck'    => 'CheckIfUsedAsOutput',
									       'OutputCheck'   => 'GetAvailSonicationToLoad1',
									       'Confirm'       => 'LoadSonicationGel1',
									       'OutputDefined' => 'GetGelPositions1',
									   },
							'sonication gel 2' => {'SqlPackage'    => 'TouchScreen::LibSql',
									       'Configuration' => 'OneToDefined',
									       'Headers'       => ['sonication gel', 'gel lane', 'sonication tube'], 
									       'InputCheck'    => 'CheckIfUsedAsOutput',
									       'OutputCheck'   => 'GetAvailSonicationToLoad2',
									       'Confirm'       => 'LoadSonicationGel2',
									       'OutputDefined' => 'GetGelPositions2',
									   },
							'sonication gel 3' => {'SqlPackage'    => 'TouchScreen::LibSql',
									       'Configuration' => 'OneToDefined',
									       'Headers'       => ['sonication gel', 'gel lane', 'sonication tube'], 
									       'InputCheck'    => 'CheckIfUsedAsOutput',
									       'OutputCheck'   => 'GetAvailSonicationToLoad3',
									       'Confirm'       => 'LoadSonicationGel3',
									       'OutputDefined' => 'GetGelPositions3',
									   },
						    },
			      'check sonication gel' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								    'Configuration' => 'ManyToNone',
								    'Headers'       => ['sonication gel lane', 'status'], 
								    'InputCheck'    => 'GetAvailLibraryGel',
								    'OutputCheck'   => undef,
								    'Confirm'       => 'CheckSonicationGel',
								    'InputDefined'  => 'GetLibraryOnGel',
								    'StatusButton'  => 1,
								},
						     },
			      'add mung bean nuclease' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								      'Configuration' => 'OneToNone',
								      'Headers'       => ['sonication tube'], 
								      'InputCheck'    => 'GetAvailLibraryPassCheckGel',
								      'OutputCheck'   => undef,
								      'Confirm'       => 'ProcessLibrary',
								  },
						       },
			      'add phenol to mung' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['sonication tube'], 
								  'InputCheck'    => 'GetAvailLibraryInInprogress',
								  'OutputCheck'   => undef,
								  'Confirm'       => 'ProcessLibrary',
							      },
						   },
			      'mung phenol extraction' => {'1.7mL phenol extraction tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											      'Configuration' => 'OneToOne',
											      'Headers'       => ['sonication tube', 'phenol extraction tube'], 
											      'InputCheck'    => 'GetAvailLibraryInInprogress',
											      'OutputCheck'   => 'CheckIfUsedAsOutput',
											      'Confirm'       => 'ProcessLibrary',
											  },
						       },
			      'load fraction gel' => {'fraction gel' => {'SqlPackage'    => 'TouchScreen::LibSql',
									 'Configuration' => 'OneToDefined',
									 'Headers'       => ['fraction gel', 'gel lane', 'phenol extraction tube'], 
									 'InputCheck'    => 'CheckIfUsedAsOutput',
									 'OutputCheck'   => 'GetAvailLibraryToLoadFractionGel',
									 'Confirm'       => 'LoadFractionGel',
									 'OutputDefined' => 'GetFractionGelPositions',
								     },
						  },
			      'extract fraction' => {'1.7mL fraction tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
										'Configuration' => 'ManyToThree',
									       'Headers'       => ['gel lane', '1-1.5kb fraction', '1.5-2kb fraction', '2-4kb fraction'], 
										'InputCheck'    => 'GetAvailLibraryGel',
										'OutputCheck'   => 'CheckIfUsedAsOutput',
										'Confirm'       => 'CreateFractions',
										'InputDefined'  => 'GetLibraryOnGel',
										'StatusButton'  => 1,  
									   },
                                                     '3-6.5kb fractions' => {'SqlPackage'    => 'TouchScreen::LibSql',
                                                                              'Configuration' => 'ManyToThree',
                                                                              'Headers'       => ['gel lane', '0.3-0.5kb fraction', '4-6.5kb fraction', '6.5-9.5kb fraction'],
                                                                              'InputCheck'    => 'GetAvailLibraryGel',
                                                                              'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                              'Confirm'       => 'CreateFractions3_65',
                                                                              'InputDefined'  => 'GetLibraryOnGel',
                                                                              'StatusButton'  => 1,  
									   },
						       },
			      'add phenol to fraction' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								      'Configuration' => 'OneToNone',
								      'Headers'       => ['fraction tube'], 
								      'InputCheck'    => 'GetAvailFractionOutInprogress',
								      'OutputCheck'   => undef,
								      'Confirm'       => 'ProcessFraction',

								  },
						       },
			      'fraction phenol extraction 1' => {'1.7mL fraction phenol ext. 1 tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
													 'Configuration' => 'OneToOne',
													 'Headers'       => ['fraction tube', 'extraction tube'], 
													 'InputCheck'    => 'GetAvailFractionInInprogress',
													 'OutputCheck'   => 'CheckIfUsedAsOutput',
													 'Confirm'       => 'ProcessFraction',
												     },
							     },
			      'fraction phenol extraction 2' => {'1.7mL fraction phenol ext. 2 tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
													 'Configuration' => 'OneToOne',
													 'Headers'       => ['extraction tube 1', 'extraction tube 2'], 
													 'InputCheck'    => 'GetAvailFractionOutInprogress',
													 'OutputCheck'   => 'CheckIfUsedAsOutput',
													 'Confirm'       => 'ProcessFraction',
												     },
							     },

			      
			      'load fraction quantitation gel' => {'fraction quantitation gel 1' => {'SqlPackage'    => 'TouchScreen::LibSql',
												     'Configuration' => 'OneToDefined',
												     'Headers'       => ['quantitate fraction gel', 'gel lane', 'phenol extraction tube 2'], 
												     'InputCheck'    => 'CheckIfUsedAsOutput',
												     'OutputCheck'   => 'GetAvailFractionToLoad1',
												     'Confirm'       => 'LoadFractionQuantitationGel1', 
												     'OutputDefined' => 'GetGelPositions1',
												 },
								   'fraction quantitation gel 2' => {'SqlPackage'    => 'TouchScreen::LibSql',
												     'Configuration' => 'OneToDefined',
												     'Headers'       => ['quantitate fraction gel', 'gel lane', 'phenol extraction tube 2'], 
												     'InputCheck'    => 'CheckIfUsedAsOutput',
												     'OutputCheck'   => 'GetAvailFractionToLoad2',
												     'Confirm'       => 'LoadFractionQuantitationGel2',
												     'OutputDefined' => 'GetGelPositions2',
												 },
								   'fraction quantitation gel 3' => {'SqlPackage'    => 'TouchScreen::LibSql',
												     'Configuration' => 'OneToDefined',
												     'Headers'       => ['quantitate fraction gel', 'gel lane', 'phenol extraction tube 2'], 
												     'InputCheck'    => 'CheckIfUsedAsOutput',
												     'OutputCheck'   => 'GetAvailFractionToLoad3',
												     'Confirm'       => 'LoadFractionQuantitationGel3',
												     'OutputDefined' => 'GetGelPositions3',
												 },
							       },
			      'check fraction quantitation gel' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
									       'Configuration' => 'ManyToNone',
									       'Headers'       => ['quantitate fraction gel', 'status'], 
									       'InputCheck'    => 'GetAvailFractionGel',
									       'OutputCheck'   => undef,
									       'Confirm'       => 'CheckFractionGel',
									       'InputDefined'  => 'GetFractionOnGel',
									       'StatusButton'  => 1,
									   },
								},
			      'dry down fraction' => {'0.7mL ligation tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
										'Configuration' => 'OneToOne',
										'Headers'       => ['extraction tube 2', 'ligation tube'], 
										'InputCheck'    => 'GetAvailFractionPassCheckGel',
										'OutputCheck'   => 'CheckIfUsedAsOutput',
										'Confirm'       => 'ProcessFraction',
									    },
						  },
			      'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Barcode'],
							    'InputCheck'    => 'GetFailBarcodeDesc',
							    'OutputCheck'   => 0,
							    'Confirm'       => 'FailBarcode',
						}
					     },
			  },
			     'Ligation' => 
			     {'ligate fraction' => {'0.7mL ligation tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									      'Configuration' => 'OneToNone',
									      'Headers'       => ['ligation tube'], 
									      'InputCheck'    => 'GetAvailFractionToLigate',
									      'OutputCheck'   => 0,
									      'Confirm'       => 'CreateLigation',
									      'ConfirmOptions'=> {'GetVlIdfromReagent'  => undef},
									  },
						    '1.7mL fraction phenol ext. tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											  'Configuration' => 'OneToNone',
											  'Headers'       => ['ligation tube'], 
											  'InputCheck'    => 'GetAvailFractionToLigate',
											  'OutputCheck'   => 0,
											  'Confirm'       => 'CreateLigation',
											  'ConfirmOptions'=> {'GetVlIdfromReagent'  => undef},
										      },
						    '1.7mL mung phenol ext.tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
										     'Configuration' => 'OneToNone',
										     'Headers'       => ['ligation tube'], 
										     'InputCheck'    => 'GetAvailFractionToLigate',
										     'OutputCheck'   => 0,
										     'Confirm'       => 'CreateLigation',
										     'ConfirmOptions'=> {'GetVlIdfromReagent'  => undef},
										 },
						},
			      'dilute ligation' => {'ligation tube to dilution tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											 'Configuration' => 'OneToOne',
											 'Headers'       => ['ligation tube', 'ligation dilution tube'], 
											 'InputCheck'    => 'GetAvailLigatedFraction',
											 'OutputCheck'   => 'CheckIfUsedAsOutput',
											 'Confirm'       => 'DiluteLigation',
										     },
						    'fraction phenol ext. tube to dilution tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												     'Configuration' => 'OneToOne',
												     'Headers'       => ['ligation tube', 'ligation dilution tube'], 
												     'InputCheck'    => 'GetAvailLigatedFraction',
												     'OutputCheck'   => 'CheckIfUsedAsOutput',
												     'Confirm'       => 'DiluteLigation',
												 },	
						    'mung phenol ext.tube to dilution tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												'Configuration' => 'OneToOne',
												'Headers'       => ['ligation tube', 'ligation dilution tube'], 
												'InputCheck'    => 'GetAvailLigatedFraction',
												'OutputCheck'   => 'CheckIfUsedAsOutput',
												'Confirm'       => 'DiluteLigation',
											    },
						},
			      
			      'load dilution gel' => {'dilution gel 1' => {'SqlPackage'    => 'TouchScreen::LibSql',
									   'Configuration' => 'OneToDefined',
									   'Headers'       => ['dilution gel', 'gel lane', 'dilution tube'], 
									   'InputCheck'    => 'CheckIfUsedAsOutput',
									   'OutputCheck'   => 'GetAvailLigationToLoad1',
									   'Confirm'       => 'LoadDilutionGel1',
									   'OutputDefined' => 'GetGelPositions1',
								       },
						      'dilution gel 2' => {'SqlPackage'    => 'TouchScreen::LibSql',
									   'Configuration' => 'OneToDefined',
									   'Headers'       => ['dilution gel', 'gel lane', 'dilution tube'], 
									   'InputCheck'    => 'CheckIfUsedAsOutput',
									   'OutputCheck'   => 'GetAvailLigationToLoad2', 
									   'Confirm'       => 'LoadDilutionGel2',
									   'OutputDefined' => 'GetGelPositions2',
								       },
						      'dilution gel 3' => {'SqlPackage'    => 'TouchScreen::LibSql',
									   'Configuration' => 'OneToDefined',
									   'Headers'       => ['dilution gel', 'gel lane', 'dilution tube'], 
									   'InputCheck'    => 'CheckIfUsedAsOutput',
									   'OutputCheck'   => 'GetAvailLigationToLoad3',
									   'Confirm'       => 'LoadDilutionGel3',
									   'OutputDefined' => 'GetGelPositions3',
								       },
						  },
			      'check dilution gel' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'ManyToNone',
								  'Headers'       => ['dilution gel', 'status'], 
								  'InputCheck'    => 'GetAvailLigationGel',
								  'OutputCheck'   => undef,
								  'Confirm'       => 'CheckLigationGel',
								  'InputDefined'  => 'GetLigationOnGel',
								  'StatusButton'  => 1,
							      },
						   },
			      'confirm dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								'Configuration' => 'OneToNone',
								'Headers'       => ['ligation tube', 'Target', 'Titer', 'Purpose', 'Priority', 'Pick Qc'], 
								'InputCheck'    => 'GetAvailLigationPassCheckGel',
								 'OutputCheck'   => 0,
								'Confirm'       => 'ConfirmDilution',
								'DataInfos'     => {'target' => GetProjectTarget, 
										    'titer' => 0, 
										    'purpose' => GetProjectPurpose, 
										    'priority' => GetProjectPriority,
										    'pick qc'  => 0}, 
							    },
						 },
			      'retire dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['dilution tube'],
							       'InputCheck'    => 'GetAvailDilutionToRetire',
							       'OutputCheck'   => 0,
							       'Confirm'       => 'RetireDilutionOrLigation',
							   },
						},
			      'retire ligation' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['ligation tube'],
							       'InputCheck'    => 'GetAvailLigationToRetire',
							       'OutputCheck'   => 0,
							       'Confirm'       => 'RetireDilutionOrLigation',
							   },
						},
			  },

			     'Restriction Digest Subcloning' =>  			      
			     {'add phenol to fraction' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								      'Configuration' => 'OneToNone',
								      'Headers'       => ['spin column tube'],
								      'InputCheck'    => 'GetAvailFractionOutInprogress',
								      'OutputCheck'   => undef,
								      'Confirm'       => 'ProcessFraction',
								  },
						       },
			      'fraction phenol extraction' => {'1.7mL fraction phenol ext. tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												     'Configuration' => 'OneToOne',
												     'Headers'       => ['spin column tube', 'extraction tube'],
												     'InputCheck'    => 'GetAvailFractionInInprogress',
												     'OutputCheck'   => 'CheckIfUsedAsOutput',
												     'Confirm'       => 'ProcessFraction',
												 },
							   },
			      'create fraction dilution' => {'1.7mL fraction dilution tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												'Configuration' => 'OneToOne',
												'Headers'       => [ 'extraction tube', 'dilution tube'],
												'InputCheck'    => 'GetAvailFractionOutInprogress',
												'OutputCheck'   => 'CheckIfUsedAsOutput',
												'Confirm'       => 'ProcessFractionDilution',
											    },
						       },
			      'dry down fraction' => {'1.7mL fraction phenol ext. tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['extraction tube'],
											 'InputCheck'    => 'GetAvailFractionToDryDown',
											 'OutputCheck'   => undef,
											 'Confirm'       => 'ProcessFraction',
										     },
						      '1.7mL mung phenol ext. tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											'Configuration' => 'OneToNone',
											'Headers'       => ['mung phenol ext. tube'], 
											'InputCheck'    => 'GetAvailFractionOutInprogress',
											'OutputCheck'   => undef,
											'Confirm'       => 'ProcessFraction',
										    },
						  },
			      'add mung bean nuclease' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								     'Configuration' => 'OneToNone',
								     'Headers'       => ['extraction tube'],
								     'InputCheck'    => 'GetAvailFractionToDryDown',
								     'OutputCheck'   => undef,
								      'Confirm'       => 'ProcessFraction',
								  },
						       },
			      'add phenol to mung' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['extraction tube'], 
								  'InputCheck'    => 'GetAvailFractionInInprogress',
								  'OutputCheck'   => undef,
								  'Confirm'       => 'ProcessFraction',
							      },
						   },
			      'mung phenol extraction' => {'1.7mL mung phenol ext. tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											     'Configuration' => 'OneToOne',
											     'Headers'       => ['extraction tube', 'mung phenol ext. tube'], 
											     'InputCheck'    => 'GetAvailFractionInInprogress',
											     'OutputCheck'   => 'CheckIfUsedAsOutput',
											     'Confirm'       => 'ProcessFraction',
											 },
						       },
			  },
			     'Mini Prep' => 
			     {'inoculate' => {'96 archive plate to falcon tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
										    'Configuration' => 'OneToDefined',
										    'Headers'       => ['96 well plate', 'well location','falcon tube'],
										    'InputCheck'    => 'GetAvailMiniPrepInocInput',
										    'OutputCheck'   => 'CheckIfUsedAsOutput',
										    'Confirm'       => 'InoculateMiniPrep',
										    'OutputDefined' => 'GetMiniPrepPlateLocations',
										},
					      '384 archive plate to falcon tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
										     'Configuration' => 'OneToDefined',
										     'Headers'       => ['384 well plate', 'well location', 'falcon tube'],
										     'InputCheck'    => 'GetAvailMiniPrepInocInput',
										     'OutputCheck'   => 'CheckIfUsedAsOutput',
										     'Confirm'       => 'InoculateMiniPrep',
										     'OutputDefined' => 'GetMiniPrepPlateLocations',
										 },
					      'agar plate to falcon tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									      'Configuration' => 'OneToMany',
									      'Headers'       => ['agar plate', 'falcon tube'],
									      'InputCheck'    => 'GetAvailPlasmidAgarPlateOut',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'InoculateMiniPrepCreateSubclones',
									  },
					  },
			      
			      'cell lysis' => {'lysis spin column tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									    'Configuration' => 'OneToOne',
									    'Headers'       => ['falcon tube', 'lysis spin column tube'],
									    'InputCheck'    => 'GetAvailSubclonesOutInprogressMiniPrep',
									    'OutputCheck'   => 'CheckIfUsedAsOutput',
									    'Confirm'       => 'SubcloneToSubcloneTransfer96',
									},
					   },
			      
			      'dna purification' => {'purification spin column tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
											 'Configuration' => 'OneToOne',
											 'Headers'       => ['lysis spin column tube', 'purification spin column tube'],
											 'InputCheck'    => 'GetAvailSubclonesOutInprogressMiniPrep',
											 'OutputCheck'   => 'CheckIfUsedAsOutput',
											 'Confirm'       => 'SubcloneToSubcloneTransfer96',
										     },
						 },
			      
			      'elution' => {'elution spin column tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									   'Configuration' => 'OneToOne',
									   'Headers'       => ['purification spin column tube', 'elution spin column tube'],
									   'InputCheck'    => 'GetAvailSubclonesOutInprogressMiniPrep',
									   'OutputCheck'   => 'CheckIfUsedAsOutput',
									   'Confirm'       => 'SubcloneToSubcloneTransfer96',
								       },
					},

			      
			      'load concentration gel' => {'dna concentration gel' => {'SqlPackage'    => 'TouchScreen::LibSql',
										       'Configuration' => 'OneToDefined',
										       'Headers'       => ['concentration gel', 'gel lane', 'elution spin column tube'], 
										       'InputCheck'    => 'CheckIfUsedAsOutput',
										       'OutputCheck'   => 'GetAvailConcentrationsToLoad',
										       'Confirm'       => 'LoadConcentrationGel',
										       'OutputDefined' => 'GetGelPositions1',
										   },
						       },
			      'check concentration gel' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								       'Configuration' => 'ManyToNone',
								       'Headers'       => ['concentration fraction gel', 'status'], 
								       'InputCheck'    => 'GetAvailSubcloneGel',
								       'OutputCheck'   => undef,
#								       'Confirm'       => 'CheckSubcloneGel',
								       'InputDefined'  => 'GetSubcloneOnGel',
								       'StatusButton'  => 1,
								   },
							},
			      
			      
			      
			      
			  },
			     'Shatter' => 
			     {'transfer to sonication tube' => {'96 well plate to 1.7mL sonication tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
													     'Configuration' => 'OneToOne',
													     'Headers'       => ['96 well flat plate', '1.7mL sonication tube'], 
													     'InputCheck'    => 'GetAvailSubclonesToShatter',
													     'OutputCheck'   => 'CheckIfUsedAsOutput',
													     'Confirm'       => ''}
								,
								'elution tube to 1.7mL sonication tube' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
													    'Configuration' => 'OneToOne',
													    'Headers'       => ['96 well flat plate', '1.7mL sonication tube'], 
													    'InputCheck'    => 'GetAvailSubclonePassCheckGel',
													    'OutputCheck'   => 'CheckIfUsedAsOutput',
													    'Confirm'       => 'SubcloneToSubcloneTransfer96',},
							    },
			
			      'sonicate' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							'Configuration' => 'OneToNone',
							'Headers'       => ['sonication tube'], 
							'InputCheck'    => 'GetAvailSubclonesToSonicate',
							'OutputCheck'   => 'CheckIfUsedAsOutput',
							'Confirm'       => 'CreateShatterLibrary',},
					 },
			      
			      'load sonication gel' => {'sonication gel' => {'SqlPackage'    => 'TouchScreen::LibSql',
									       'Configuration' => 'OneToDefined',
									       'Headers'       => ['sonication gel', 'gel lane', 'sonication tube'], 
									       'InputCheck'    => 'CheckIfUsedAsOutput',
									       'OutputCheck'   => 'GetAvailShatterSonicationToLoad',
									       'Confirm'       => 'LoadShatterSonicationGel',
									       'OutputDefined' => 'GetGelPositions1',
									   },
						    },
			      'check sonication gel' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								    'Configuration' => 'ManyToNone',
								    'Headers'       => ['sonication gel lane', 'status'], 
								    'InputCheck'    => 'GetAvailLibraryGel',
								    'OutputCheck'   => undef,
								    'Confirm'       => 'CheckSonicationGel',
								    'InputDefined'  => 'GetLibraryOnGel',
								    'StatusButton'  => 1,
								},
						     },
			      'add mung bean nuclease' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								      'Configuration' => 'OneToNone',
								      'Headers'       => ['sonication tube'], 
								      'InputCheck'    => 'GetAvailLibraryPassCheckGel',
								      'OutputCheck'   => undef,
								      'Confirm'       => 'ProcessLibrary',
								  },
						       },
			      'add phenol to mung' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['sonication tube'], 
								  'InputCheck'    => 'GetAvailLibraryInInprogress',
								  'OutputCheck'   => undef,
								  'Confirm'       => 'ProcessLibrary',
							      },
						   },
			      'mung phenol extraction' => {'1.7mL mung phenol ext. tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											    'Configuration' => 'OneToOne',
											    'Headers'       => ['sonication tube', 'phenol extraction tube'], 
											    'InputCheck'    => 'GetAvailLibraryInInprogress',
											    'OutputCheck'   => 'CheckIfUsedAsOutput',
											    'Confirm'       => 'ProcessLibrary',
											},
						       },
			      'load fraction gel' => {'fraction gel' => {'SqlPackage'    => 'TouchScreen::LibSql',
									 'Configuration' => 'OneToDefined',
									 'Headers'       => ['fraction gel', 'gel lane', 'phenol extraction tube'], 
									 'InputCheck'    => 'CheckIfUsedAsOutput',
									 'OutputCheck'   => 'GetAvailLibraryToLoadShatterFractionGelne',
								 'Headers'       => ['extraction tube 2'], 
								 'InputCheck'    => 'GetAvailFractionOutInprogress',
								 'OutputCheck'   => 'CheckIfUsedAsOutput',
								 'Confirm'       => 'ProcessFraction',
							     },
						  },
			  },
			     
			     'WGS Library Construction' => 
			     {'confirm dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								'Configuration' => 'OneToNone',
								'Headers'       => ['ligation tube', 'Target', 'Titer', 'Purpose', 'Priority', 'Pick Qc'], 
								'InputCheck'    => 'GetAvailLigationOutInprogress',
								'OutputCheck'   => 0,
								'Confirm'       => 'ConfirmDilution',
								'DataInfos'     => {'target' => GetProjectTarget, 
										    'titer' => 0, 
										    'purpose' => GetProjectPurpose, 
										    'priority' => GetProjectPriority,
										    'pick qc'  => 0}, 
							    },
						 },
			  },
			     'Library Core Support' => 
			     {'create 1:10 dilution' => {'96 flat plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
									     'Configuration' => 'OneToOne',
									     'Headers'       => ['final dna archive', '1:10 dilution'], 
									     'InputCheck'    => 'GetAvailDilutionInput',
									     'OutputCheck'   => 'CheckIfUsedAsOutput',
									     'Confirm'       => 'ProcessTransferGrowthsIn96WellPlate',}
						     },
			  },
			     'Plasmid Plating' => 
			     {'claim dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							      'Configuration' => 'OneToNone',
							      'Headers'       => ['dilution tube'], 
							      'InputCheck'    => 'GetAvailPlasmidDilutionsToClaim',
							      'OutputCheck'   => 0,
							      'Confirm'       => 'ProcessLigation',
                                                          },
                                                   'from incoming dna' => {'SqlPackage'    => 'TouchScreen::LibSql',
                                                                           'Configuration' => 'OneToNone',
                                                                           'Headers'       => ['dilution tube'], 
                                                                           'InputCheck'    => 'GetAvailPlasmidDilutionsToClaim',
                                                                           'OutputCheck'   => 0,
                                                                           'Confirm'       => 'ProcessLigation',
                                                                       },
                                               },
			      'electroporate' => {'15mL conical tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
									  'Configuration' => 'OneToMany',
									  'Headers'       => ['mircorfuge tube', 'conical tube'], 
									  'InputCheck'    => 'GetAvailLigationInInprogress',
									  'OutputCheck'   => 'CheckIfUsedAsOutput',
									  'Confirm'       => 'ProcessElectroporate',},
                                                  'from incoming dna' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
									  'Configuration' => 'OneToMany',
									  'Headers'       => ['mircorfuge tube', 'conical tube'], 
									  'InputCheck'    => 'GetAvailBarcodeInInprogress',
									  'OutputCheck'   => 'CheckIfUsedAsOutput',
									  'Confirm'       => 'ProcessDNA',}
                                              },
			      'plate' => {'agar plate' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
							   'Configuration' => 'OneToOne',
							   'Headers'       => ['conical tube', 'plate', 'update prior status'], 
							   'InputCheck'    => 'GetAvailBarcodeOutInprogress',
							   'OutputCheck'   => 'CheckIfUsedAsOutput',
							   'Confirm'       => 'ProcessDNA',
                                                           'DataInfos'     => {'update prior status' => 0,
                                                                                                                                        }
                                                           ,}
				      },
			      'fail agar plate' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['agar plate', 'failure'], 
							       'InputCheck'    => 'GetAvailLigationOutInprogress',
							       'OutputCheck'   => undef,
							       'Confirm'       => 'FailAgarPlate',
							       'DataInfos'     => {'failure' => 0},
							   },
						},
			      'retire dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['dilution tube'],
							       'InputCheck'    => 'GetAvailDilutionToRetire',
							       'OutputCheck'   => 0,
							       'Confirm'       => 'RetireDilutionOrLigation',
							   },
						},
			  },
			     
			     'm13 Plating' => 
			     {
				 'claim dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['dilution tube'], 
								 'InputCheck'    => 'GetAvailM13DilutionsToClaim',
								 'OutputCheck'   => 0,
								 'Confirm'       => 'ProcessLigation',},
						  },
				 'electroporate' => {'claim dilution to 50mL conical tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											       'Configuration' => 'OneToMany',
											       'Headers'       => ['mircorfuge tube', 'conical tube'], 
											       'InputCheck'    => 'GetAvailLigationInInprogress',
											       'OutputCheck'   => 'CheckIfUsedAsOutput',
											       'Confirm'       => 'ProcessElectroporate',},
						     
						     'claim dilution to 15mL Falcon tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											      'Configuration' => 'OneToMany',
											      'Headers'       => ['mircorfuge tube', 'falcon tube'], 
											      'InputCheck'    => 'GetAvailLigationInInprogress',
											      'OutputCheck'   => 'CheckIfUsedAsOutput',
											      'Confirm'       => 'ProcessElectroporate',},
						     'dilute ligation to 50mL conical tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
												'Configuration' => 'OneToMany',
												'Headers'       => ['mircorfuge tube', 'conical tube'], 
												'InputCheck'    => 'GetAvailLigationOutInprogress',
												'OutputCheck'   => 'CheckIfUsedAsOutput',
												'Confirm'       => 'ProcessElectroporate',},
						     'dilute ligation to 15mL Falcon tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											       'Configuration' => 'OneToMany',
											       'Headers'       => ['mircorfuge tube', 'falcon tube'], 
											       'InputCheck'    => 'GetAvailLigationOutInprogress',
											       'OutputCheck'   => 'CheckIfUsedAsOutput',
											       'Confirm'       => 'ProcessElectroporate',},
						 },
				 'plate' => {'conical tube to agar plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
									      'Configuration' => 'OneToOne',
									      'Headers'       => ['conical tube', 'plate'], 
									      'InputCheck'    => 'GetAvailLigationOutInprogress',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'ProcessLigation',},
					     'Falcon tube to agar plate' => {'SqlPackage'    => 'TouchScreen::LibSql',
									     'Configuration' => 'OneToOne',
									     'Headers'       => ['conical tube', 'plate'], 
									     'InputCheck'    => 'GetAvailLigationOutInprogress',
									     'OutputCheck'   => 'CheckIfUsedAsOutput',
									     'Confirm'       => 'ProcessLigation',},
					 },
				 'fail agar plate' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['agar plate', 'failure'], 
								  'InputCheck'    => 'GetAvailLigationOutInprogress',
								  'OutputCheck'   => undef,
								  'Confirm'       => 'FailAgarPlate',
								  'DataInfos'     => {'failure' => 0},
							      }
						   },
				 'claim ligation' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['ligation tube'], 
								 'InputCheck'    => 'GetAvailLigationToClaim',
								 'OutputCheck'   => 0,
								 'Confirm'       => 'ProcessLigation',},
						  },
				 'dilute ligation' => {'1.7mL ligation dilution tube' => {'SqlPackage'    => 'TouchScreen::LibSql',
											  'Configuration' => 'OneToOne',
											  'Headers'       => ['ligation tube', 'dilution tube'], 
											  'InputCheck'    => 'GetAvailLigationInInprogress',
											  'OutputCheck'   => 'CheckIfUsedAsOutput',
											  'Confirm'       => 'ProcessLigation',
										      },
						   },
				 'retire dilution' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['dilution tube'],
								  'InputCheck'    => 'GetAvailDilutionToRetire',
								  'OutputCheck'   => 0,
								  'Confirm'       => 'RetireDilutionOrLigation',
							      },
						   },
				 'retire ligation' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
								  'Configuration' => 'OneToNone',
								  'Headers'       => ['ligation tube'],
								  'InputCheck'    => 'GetAvailLigationToRetire',
								  'OutputCheck'   => 0,
								  'Confirm'       => 'RetireDilutionOrLigation',
							      },
						   },
			     },
     'Old Plasmid Picking' => {'count colonies' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							      'Configuration' => 'OneToNone',
							      'Headers'       => ['agar plate', 'total colonies', 'total pickable'], 
							      'InputCheck'    => 'GetAvailCountColonyAgarPlate',
							      'OutputCheck'   => 0,
							      'Confirm'       => 'CountColonies',
                                                              'DataInfos'     => {'total colonies' => 0,
                                                                                  'total pickable' => 0,
                                                                              },
							  },
                                                   'from incoming dna' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                           'Configuration' => 'OneToNone',
                                                                           'Headers'       => ['agar plate', 'total colonies', 'total pickable'], 
                                                                           'InputCheck'    => 'GetAvailCountColonyAgarPlate',
                                                                           'OutputCheck'   => 0,
                                                                           'Confirm'       => 'CountColonies',
                                                                           'DataInfos'     => {'total colonies' => 0,
                                                                                               'total pickable' => 0,
                                                                                           },
							  },
                                                    'ribosomal' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                    'Configuration' => 'OneToNone',
                                                                    'Headers'       => ['agar plate', 'total colonies', 'total pickable'], 
                                                                    'InputCheck'    => 'GetAvailCountColonyAgarPlate',
                                                                    'OutputCheck'   => 0,
                                                                    'Confirm'       => 'CountColonies',
                                                                    'DataInfos'     => {'total colonies' => 0,
                                                                                        'total pickable' => 0,
                                                                                    },
							  },
					       },
			      'pick' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToOne',
								'Headers'       => ['Agar Plate', '96 well archive plates', 'status', 'archive purpose'],
								'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick96Anything',
								'OutputCheck'   => 'CheckProjectTarget',
								'Confirm'       => 'Pick96PlasmidArchive',
								'PostConfirmOperation' => 'AutoAbandonAgarPlates',
								'DataInfos'     => {'status' => 0,
										    'archive purpose' => 0,
										},
							    },
					 
                                         'incoming dna to 96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToOne',
								'Headers'       => ['Agar Plate', '96 well archive plates', 'status', 'archive purpose'],
								'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick96Anything',
								'OutputCheck'   => 'CheckProjectTarget',
								'Confirm'       => 'Pick96PlasmidArchive',
								'DataInfos'     => {'status' => 0,
										    'archive purpose' => 0,
										},
                                                            },
                                         'ribosomal to 96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                             'Configuration' => 'OneToOne',
                                                                             'Headers'       => ['Agar Plate', '96 well archive plates', 'status', 'archive purpose'],
                                                                             'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick96Anything',
                                                                             'OutputCheck'   => 'CheckProjectTarget',
                                                                             'Confirm'       => 'Pick96PlasmidArchive',
                                                                             'DataInfos'     => {'status' => 0,
                                                                                                 'archive purpose' => 0,
                                                                                             },
                                                             },

					 '384 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								 'Configuration' => 'OneToMany',
								 'Headers'       => ['Agar Plate', '384 well archive plates'],
								 'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick384',
								 'OutputCheck'   => 'CheckProjectTarget',
								 'Confirm'       => 'Pick384ProductionArchive',
								 'PostConfirmOperation' => 'AutoAbandonAgarPlates',
							     },
                                         'incoming dna to 384 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                                 'Configuration' => 'OneToMany',
                                                                                 'Headers'       => ['Agar Plate', '384 well archive plates'],
                                                                                 'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick384',
                                                                                 'OutputCheck'   => 'CheckProjectTarget',
                                                                                 'Confirm'       => 'Pick384ProductionArchive',
                                                                                 'PostConfirmOperation' => 'AutoAbandonAgarPlates',
                                                                             },
                                         'ribosomal to 384 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                              'Configuration' => 'OneToMany',
                                                                              'Headers'       => ['Agar Plate', '384 well archive plates'],
                                                                              'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick384',
                                                                              'OutputCheck'   => 'CheckProjectTarget',
                                                                              'Confirm'       => 'Pick384ProductionArchive',
                                                                              'PostConfirmOperation' => 'AutoAbandonAgarPlates',
                                                                          }
				     },
                               
                           },
     'Plasmid Picking' => 
			     {'claim agar plate' => {'agar plate' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
								      'Configuration' => 'OneToNone',
								      'Headers'       => ['agar plate'], 
								      'InputCheck'    => 'GetAndCheckBarcodeOutInprogress',
								      'OutputCheck'   => 0,
								      'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                                  },
                                                     'from incoming dna' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                             'Configuration' => 'OneToNone',   
                                                                             'Headers'       => ['agar plate'], 
                                                                             'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                             'OutputCheck'   => 0,
                                                                             'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                                         },
                                                     'ribosomal to agar plate' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                                'Configuration' => 'OneToNone',
                                                                                'Headers'       => ['agar plate'], 
                                                                                'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                                #'InputCheck'    => 'GetAndCheckBarcodeOutInprogress',
                                                                                'OutputCheck'   => 0,
                                                                                'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                                            },
						 },
			      'count colonies' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							      'Configuration' => 'OneToNone',
							      'Headers'       => ['agar plate', 'total colonies', 'total pickable'], 
							      'InputCheck'    => 'GetAvailCountColonyAgarPlate',
							      'OutputCheck'   => 0,
							      'Confirm'       => 'CountColonies',
                                                              'DataInfos'     => {'total colonies' => 0,
                                                                                  'total pickable' => 0,
                                                                              },
							  },
                                                   'from incoming dna' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                           'Configuration' => 'OneToNone',
                                                                           'Headers'       => ['agar plate', 'total colonies', 'total pickable'], 
                                                                           'InputCheck'    => 'GetAvailCountColonyAgarPlate',
                                                                           'OutputCheck'   => 0,
                                                                           'Confirm'       => 'CountColonies',
                                                                           'DataInfos'     => {'total colonies' => 0,
                                                                                               'total pickable' => 0,
                                                                                           },
							  },
					       },
			      'pick' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToOne',
								'Headers'       => ['Agar Plate', '96 well archive plates', 'status', 'archive purpose'],
								'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick96Anything',
								'OutputCheck'   => 'CheckProjectTarget',
								'Confirm'       => 'Pick96PlasmidArchive',
								'PostConfirmOperation' => 'AutoAbandonAgarPlates',
								'DataInfos'     => {'status' => 0,
										    'archive purpose' => 0,
										},
							    },
					 
                                         'incoming dna to 96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToOne',
								'Headers'       => ['Agar Plate', '96 well archive plates', 'status', 'archive purpose'],
								'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick96Anything',
								'OutputCheck'   => 'CheckProjectTarget',
								'Confirm'       => 'Pick96PlasmidArchive',
								'DataInfos'     => {'status' => 0,
										    'archive purpose' => 0,
										},
							    },
					 
					 '384 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								 'Configuration' => 'OneToMany',
								 'Headers'       => ['Agar Plate', '384 well archive plates'],
								 'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick384',
								 'OutputCheck'   => 'CheckProjectTarget',
								 'Confirm'       => 'Pick384ProductionArchive',
								 'PostConfirmOperation' => 'AutoAbandonAgarPlates',
							     },
                                         'incoming dna to 384 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                                 'Configuration' => 'OneToMany',
                                                                                 'Headers'       => ['Agar Plate', '384 well archive plates'],
                                                                                 'InputCheck'    => 'GetAvailPlasmidAgarPlateToPick384',
                                                                                 'OutputCheck'   => 'CheckProjectTarget',
                                                                                 'Confirm'       => 'Pick384ProductionArchive',
                                                                                 'PostConfirmOperation' => 'AutoAbandonAgarPlates',
                                                                             }
				     },
			      'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
							    'InputCheck'    => 'GetFailBarcodeDesc',
							    'OutputCheck'   => 0,
							    'Confirm'       => 'FailBarcode',
							    'DataInfos'     => {'A1' => 0, 
										'A2' => 0, 
										'B1' => 0, 
										'B2' => 0},
							},
					     },
			      'fail agar plate' => {'none' => {'SqlPackage'    => 'TouchScreen::LibSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['agar plate', 'failure'], 
							       'InputCheck'    => 'GetAvailFailAgarPlate',
							       'OutputCheck'   => undef,
							       'Confirm'       => 'FailAgarPlate',
							       'DataInfos'     => {'failure' => 0},
							   },
						},
			      'abandon barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							       'Configuration' => 'OneToNone',
							       'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
							       'InputCheck'    => 'GetFailBarcodeDesc',
							       'OutputCheck'   => 0,
							       'Confirm'       => 'AbandonBarcode',
							       'DataInfos'     => {'A1' => 0, 
										   'A2' => 0, 
										   'B1' => 0, 
										   'B2' => 0},
							   },
						},
			  },
			     'm13 Picking' => 
			     {'claim agar plate' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToNone',
								'Headers'       => ['agar plate'], 
								'InputCheck'    => 'GetAvailM13AgarPlate',
								'OutputCheck'   => 0,
								'Confirm'       => 'ProcessLigation',}
						 },
			      'pick' => {'96 archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								'Configuration' => 'OneToMany',
								'Headers'       => ['Agar Plate', '96 well archive plates'],
								'InputCheck'    => 'GetAvailM13AgarPlateToPick',
								'OutputCheck'   => 'CheckIfUsedAsOutput',
								'Confirm'       => 'Pick96ProductionArchive',
							    },
				     }, 
			  },  

			     'Archive Prep' =>  			      
			     {'claim archive' => {'none' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                             'Configuration' => 'OneToNone',
                                                             'Headers'       => ['archive plate'],
                                                             'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                             'OutputCheck'   => undef,
                                                             'Confirm'       => 'NoTransfer',
#                                                             'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                         },
                                                  'from incoming dna' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                          'Configuration' => 'OneToNone',
                                                                          'Headers'       => ['archive plate'],
                                                                          'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                          'OutputCheck'   => undef,
                                                                          'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                                      },
                                                  'fosmid replicate plate' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                               'Configuration' => 'OneToNone',
                                                                               'Headers'       => ['archive plate'],
                                                                               'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                               'OutputCheck'   => undef,
                                                                               'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                                           },
                                                  'from inoculation' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                               'Configuration' => 'OneToNone',
                                                                               'Headers'       => ['archive plate'],
                                                                               'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                                               'OutputCheck'   => undef,
                                                                               'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                                                           },
                                              },							
                              'prep archive' => {'384' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                           'Configuration' => 'OneToTwo',
                                                           'Headers'       => ['Archive Plate', 'Forward 384 well plate', 'Reverse 384 well plate'],
                                                           'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                           'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                           'Confirm'       => 'PrepIncomingArchive',
                                                       },
                                                 'from incoming dna to 384' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                                'Configuration' => 'OneToTwo',
                                                                                'Headers'       => ['Archive Plate', 'Forward 384 well plate', 'Reverse 384 well plate'],
                                                                                'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                                                'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                                'Confirm'       => 'PrepIncomingArchive',
                                                                            },
                                                 'fosmid replicate plate' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                        'Configuration' => 'OneToTwo',
                                                                        'Headers'       => ['Fosmid Plate', 'Forward 384 well plate', 'Reverse 384 well plate'],
                                                                        'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                                        'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                        'Confirm'       => 'PrepIncomingArchive',
                                                                    },
                                             },							
                          },
			     'Plasmid Production' =>  			      
			     {'claim archive plate' => {'96' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['archive plate'],
								 'InputCheck'    => 'GetAvailBarcodeInInprogress',
								 'OutputCheck'   => undef,
								 'Confirm'       => 'NoTransfer',
#								 'Confirm'       => 'ProcessDNAWithNoDNAPSE',
 
							     },
							
							'384' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                                          'Configuration' => 'OneToNone',
								  'Headers'       => ['archive plate'],
								  'InputCheck'    => 'GetAvailBarcodeInInprogress',
								  'OutputCheck'   => undef,
#								  'Confirm'       => 'ProcessDNAWithNoDNAPSE',
								  'Confirm'       => 'NoTransfer',
							      },

							'384 fosmid plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									       'Configuration' => 'OneToNone',
									       'Headers'       => ['archive plate',],
									       'InputCheck'    => 'GetAvailBarcodeInOutInprogress',
									       'OutputCheck'   => undef,
									       'Confirm'       => 'ClaimArchivePlateInoc',
									       'DataInfos'     => {'A1' => 0, 
												   'A2' => 0, 
												   'B1' => 0, 
												   'B2' => 0},
									   },
							
						    },
			      
			      'inoculate' => {'96 to 96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									      'Configuration' => 'OneToOne',
									      'Headers'       => ['96 well archive plate', '96 well round plate'],
									      'InputCheck'    => 'GetAvailArchivesToInoculate96',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'Inoculate96to96',
									  },
					      
					      '96 to 96 well growth box' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									     'Configuration' => 'OneToOne',
									     'Headers'       => ['96 well archive plate', '96 well flat plate'],
									     'InputCheck'    => 'GetAvailArchivesToInoculate96',
									     'OutputCheck'   => 'CheckIfUsedAsOutput',
									     'Confirm'       => 'Inoculate96to96',
									 }
					      ,
					      '384 to 96 well flat plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									      'Configuration' => 'OneToDefined',
									      'Headers'       => ['384 well archive plate', 'Sectors', 'Barcode'],
									      'InputCheck'    => 'GetAvailArchivesToInoculate384',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'Inoculate384to96',
									      'OutputDefined' => 'GetAvailableQuads',
									  },
					      '384 to 96 well round plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									      'Configuration' => 'OneToDefined',
									      'Headers'       => ['384 well archive plate', 'Sectors', 'Barcode'],
									      'InputCheck'    => 'GetAvailArchivesToInoculate384',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'Inoculate384to96',
									      'OutputDefined' => 'GetAvailableQuads',
									  },
					      '384 fosmid plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								     'Configuration' => 'OneToDefined',
								     'Headers'       => ['384 well archive plate', 'Sectors', 'Barcode'],
								     'InputCheck'    => 'GetAvailArchivesToInoculate384',
								     'OutputCheck'   => 'CheckIfUsedAsOutput',
								     'Confirm'       => 'Inoculate384to96',
								     'OutputDefined' => 'GetAvailableQuads',
								 }
					  },
			      'fail barcode' => {'none' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
							    'Configuration' => 'OneToNone',
							    'Headers'       => ['Barcode', 'A1', 'A2', 'B1', 'B2'],
							    'InputCheck'    => 'GetFailBarcodeDesc',
							    'OutputCheck'   => 0,
							    'Confirm'       => 'FailBarcode',
							    'DataInfos'     => {'A1' => 0, 
										'A2' => 0, 
										'B1' => 0, 
										'B2' => 0},
							}
					     },
			  },
     'Inoculation' =>  			      
     {'claim dna' => {'from incoming dna' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                              'Configuration' => 'OneToNone',
                                              'Headers'       => ['dna plate'],
                                              'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                              'OutputCheck'   => undef,
                                              'Confirm'       => 'ProcessDNA',
                                          },
                      'regular production' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                               'Configuration' => 'OneToNone',
                                               'Headers'       => ['dna plate'],
                                               'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                               'OutputCheck'   => undef,
                                               'Confirm'       => 'ProcessDNA',
                                           },
                      'fosmid production' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                               'Configuration' => 'OneToNone',
                                               'Headers'       => ['dna plate'],
                                               'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                               'OutputCheck'   => undef,
					      'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                           },
                      
                 },
      
      'inoculate' => {'384 from incoming dna to 96 round' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                              'Configuration' => 'OneToFour',
                                                              'Headers'       => ['384 dna plate', 'A1-96 well plate', 'A2-96 well plate', 'B1-96 well plate', 'B2-96 well plate'],
                                                              'InputCheck'    => 'GetAvailBarcodeInInprogress384',
                                                              'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                              'Confirm'       => 'RearrayDNA384to4_96',
                                                          },
                      '384 production dna to 96 round' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                              'Configuration' => 'OneToFour',
                                                              'Headers'       => ['384 dna plate', 'A1-96 well plate', 'A2-96 well plate', 'B1-96 well plate', 'B2-96 well plate'],
                                                              'InputCheck'    => 'GetAvailBarcodeInInprogress384',
                                                              'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                              'Confirm'       => 'RearrayDNA384to4_96',
                                                          },
                      '96 from incoming dna to 96 round' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                             'Configuration' => 'OneToOne',
                                                             'Headers'       => ['96 dna plate', '96 well plate'],
                                                             'InputCheck'    => 'GetAvailBarcodeInInprogress96',
                                                             'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                             'Confirm'       => 'ProcessDNA',
                                                         },
                      '384 to 384 well transfer' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                                     'Configuration' => 'OneToOne',
                                                     'Headers'       => ['384 well plate', '384 well plate'],
                                                     'InputCheck'    => 'GetAvailBarcodeInInprogress384',
                                                     'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                     'Confirm'       => 'ProcessDNA',
                                                 },
                  },

},  
   'Prepping' =>  			      
     {'claim dna' => {'from incoming dna' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                              'Configuration' => 'OneToNone',
                                              'Headers'       => ['dna plate'],
                                              'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                              'OutputCheck'   => undef,
                                              'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                          },
                      'from inoculation' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                             'Configuration' => 'OneToNone',
                                             'Headers'       => ['dna plate'],
                                             'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                             'OutputCheck'   => undef,
                                             'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                         },
                      
                  },
      'cell lysis' => {'from incoming dna' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                               'Configuration' => 'OneToNone',
                                               'Headers'       => ['dna plate'],
                                               'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                               'OutputCheck'   => 'CheckIfUsedAsOutput',
                                               'Confirm'       => 'ProcessDNA',
                                           },
                       'from inoculation' => {'SqlPackage'    => 'TouchScreen::IncomingSql',
                                              'Configuration' => 'OneToNone',
                                              'Headers'       => ['dna plate'],
                                              'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                              'OutputCheck'   => 'CheckIfUsedAsOutput',
                                              'Confirm'       => 'ProcessDNA',
                                          },
                   },
  },
     
     'Clone Receiving' => 
     {     'claim dna' => {'dna resource item to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
							   'Configuration' => 'OneToNone',
							   'Headers'       => ['Container Type', 'Process For'],
							   'InputCheck'    => 'GetAvailClaimBarcode',
							   'OutputCheck'   => undef,
							   'Confirm'       => 'ClaimBarcodeBySector',
						       },
                           
		       },
           'make glycerol stock' => {'dna resource item to corning tray' => {'SqlPackage'    => 'TouchScreen::LibSql',
                                                                             'Configuration' => 'OneToDefined',
                                                                             'Headers'       => ['96 well flat plate', 'Well', 'agar plate'], 
                                                                             'InputCheck'    => 'GetGlycerolPlateInfo',
                                                                             'OutputCheck'   => 'GetAvailDNAResouceItem',
                                                                             'Confirm'       => 'CreateGlycerolMapping',
                                                                             'OutputDefined' => 'GetAvailableWellsInGrowthPlate'}
                                 },
       },
     
     'Clone Setup' => 
			     {'set up beckman block' => {'external library 384-well plate to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
														'Configuration' => 'OneToDefined',
														'Headers'       => ['Mapping Library', 'Sectors', 'Beckman Block'],
														'InputCheck'    => 'GetAvailCloneOutScheduled384',
														'OutputCheck'   => 'CheckIfUsedAsOutput',
														'Confirm'       => 'SetupBlock384',
														'OutputDefined' => 'GetAvailableQuads',
													    },
							 'external library 96-well plate to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
													       'Configuration' => 'OneToOne',
													       'Headers'       => ['Mapping Library', 'Beckman Block'], 
													       'InputCheck'    => 'GetAvailCloneOutScheduled',
													       'OutputCheck'   => 'CheckIfUsedAsOutput',
													       #'Confirm'       => 'CloneTransfer96',
													       'Confirm'       => 'SetupBlock96',
													   },
							 'growth streak agar plate to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
													 'Configuration' => 'OneToOne',
													 'Headers'       => ['Mapping Library', 'Beckman Block'], 
													 'InputCheck'    => 'GetAvailCloneOutInprogress',
													 'OutputCheck'   => 'CheckIfUsedAsOutput',
													 'Confirm'       => 'SetupBlockFromStreak',
												     },

  'dna resource item to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
					   'Configuration' => 'OneToDefined',
					   'Headers'       => ['Mapping Library', 'Sectors', 'Beckman Block'], 
					   'InputCheck'    => 'GetAvailCloneInInprogress384',
					   'OutputCheck'   => 'CheckIfUsedAsOutput',
					   'Confirm'       => 'SetupBlockIn_scheduled',
					   'OutputDefined' => 'GetAvailableQuadsIn',
				           'PostConfirmOperation' => 'confirm_pse_scheduling',
					       
												     },
 '384 well archive plate to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
					       'Configuration' => 'OneToDefined',
					       'Headers'       => ['Mapping Library', 'Sectors', 'Beckman Block'], 
					       'InputCheck'    => 'GetAvailCloneInInprogress384',
					       'OutputCheck'   => 'CheckIfUsedAsOutput',
					       'Confirm'       => 'SetupBlockIn_scheduled',
					       'OutputDefined' => 'GetAvailableQuadsIn',
					       'PostConfirmOperation' => 'confirm_pse_scheduling',
						   
												     },
							 '384 well archive plate to 384 well archive plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
													 'Configuration' => 'OneToDefined',
													 'Headers'       => ['Mapping Library', 'Sectors', 'Beckman Block'], 
													 'InputCheck'    => 'GetAvailCloneInInprogress384',
													 'OutputCheck'   => 'CheckIfUsedAsOutput',
												  'Confirm'       => 'SetupBlock384In',
												  'OutputDefined' => 'GetAvailableQuadsIn'

												     },
							 'corning tray to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
													 'Configuration' => 'OneToOne',
													 'Headers'       => ['Corning Tray', 'Beckman Block'], 
													 'InputCheck'    => 'GetAvailCloneGrowthInScheduled',
													 'OutputCheck'   => 'CheckIfUsedAsOutput',
													 'Confirm'       => 'CloneTransfer96',
												     },
						     },
			      'streak' => {'growth streak agar plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									  'Configuration' => 'OneToDefined',
									  'Headers'       => ['Source BC','Source DNA', 'Dest Streak Plate'], 
									  'InputCheck'    => 'CheckAvailStreak',
									  'OutputDefined' => 'GetAvailableStreaks',
									  'OutputCheck'   => 'CheckStreakPtr',
									  'Confirm'       => 'ConfirmScheduledStreak',
								      },
					   },			   
					   

			      
			      'beckman block to shaker' => {'beckman block to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											'Configuration' => 'OneToNone',
											'Headers'       => ['Beckman Block'], 
											'InputCheck'    => 'GetAvailCloneOutInprogress',
											'Confirm'       => 'CloneTransfer96',}
							},
			      
			      
			      'beckman block from shaker' => {'beckman block to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											  'Configuration' => 'OneToNone',
											  'Headers'       => ['Beckman Block'], 
											  'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
											  'Confirm'       => 'CloneTransfer96',}
							  },
			      
			      
			      'spin down beckman block' => {'beckman block to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											'Configuration' => 'OneToNone',
											'Headers'       => ['Beckman Block'], 
											'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
											'Confirm'       => 'CloneTransfer96',}
							},
			      
			      
			      'make glycerol stock' => {'beckman block to corning tray' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											    'Configuration' => 'OneToOne',
											    'Headers'       => ['Beckman Block', 'Corning Tray'], 
											    'InputCheck'    => 'GetAvailCloneInCompOrInprog',
											    'OutputCheck'   => 'CheckIfUsedAsOutput',
											    'Confirm'       => 'CloneTransfer96WithNoCompletionComplete',
                                                                                        },
                                                    },
			      'verify growths' => {'beckman block to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['beckman block', 'No Grow Selection'], 
								 'InputCheck'    => 'GetAvailVerifyGrowths',
								 'OutputDefined' => 'GetEquipmentSlot',
								 'Confirm'       => 'VerifyGrowths', 
								 'DataInfos'     => {'No Grow Selection' => 0},
							     },
						  },
			     },			      
			     
			     'Brinkmann Prep' => 
			     {
			     	'brinkmann setup' => {'none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									      'Configuration' => 'EquipmentSlotToPlate',
									      'Headers'       => ['Machine', 'Carousel Location', 'Beckman Block'], 
									      'InputCheck'    => 'GetAvailMachineInInprogress',
								     	      'OutputCheck'   => 'GetAvailCloneLibInInprogressOutOfFreezer',
								     	      'OutputDefined'   => 'GetEquipmentCultureSlot',
									      'Confirm'       => 'CloneTransfer96WithEquipment',
									  },
						  
						   'corning tray to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										      'Configuration' => 'TwoToNone',
										       'Headers'       => ['Beckman Block', 'Carousel Location'], 
										      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
										      'Confirm'       => 'CloneTransfer96',},
					      },
			     	'dna transfer' => {'corning tray' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									      'Configuration' => 'EquipmentSlotToPlate',
									      'Headers'       => ['Machine', 'Carousel Location', 'Corning Tray'], 
									      'InputCheck'    => 'GetAvailMachineInInprogress',
								     	      'OutputCheck'   => 'CheckIfUsedAsOutput',
								     	      'OutputDefined'   => 'GetAvailEquipmentSlotInInprogress',
									      'Confirm'       => 'CloneTransfer96OutWithEquipment',
									  },
						  
						  'corning tray to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										      'Configuration' => 'OneToNone',
										       'Headers'       => ['Beckman Block'], 
										      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
										      'Confirm'       => 'CloneTransfer96',},
					      },
			     	'fail brinkmann setup' => {'none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									      'Configuration' => 'OneToNone',
									      'Headers'       => ['Beckman Block', 'Fail Option'], 
									      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									      'Confirm'       => 'MappingFailBarcode',
								              'DataInfos'     => {'Fail Option' => 0,
										                 },
									  },
					      },
			     },
			     'Manual Prep' => 
			     {
			     	'resuspend dna' => {'beckman block to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									      'Configuration' => 'OneToNone',
									      'Headers'       => ['Beckman Block'], 
									      'InputCheck'    => 'GetAvailCloneLibInInprogressOutOfFreezer', 
									      'Confirm'       => 'CloneTransfer96',
									  },
						  
						  'corning tray to beckman block' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										      'Configuration' => 'OneToNone',
										       'Headers'       => ['Beckman Block'], 
										      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
										      'Confirm'       => 'CloneTransfer96',},
					      },
			      
			      'spin down beckman block' => {'beckman block to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								       'Configuration' => 'OneToNone',
								       'Headers'       => ['Beckman Block'], 
								       'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
								       'Confirm'       => 'CloneTransfer96',
							   },
							},
			      'draw off supernatant' => {'beckman block to receiver plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									      'Configuration' => 'OneToOne',
									      'Headers'       => ['Beckman Block', 'Receiver Plate'], 
									      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									      'OutputCheck'   => 'CheckIfUsedAsOutput',
									      'Confirm'       => 'CloneTransfer96',
							},
						     },
			      'spin down receiver plate 1' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											    'Configuration' => 'OneToNone',
											    'Headers'       => ['Receiver Plate'], 
											    'InputCheck'    => 'GetAvailCloneOutInprogress',
											    'Confirm'       => 'CloneTransfer96',
							      },
							   },
			      'receiver plate to speedvac' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['Receiver Plate'], 
									'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									'Confirm'       => 'CloneTransfer96',
								},
							 },
			      'receiver plate from speedvac' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['Receiver Plate'], 
									'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									'Confirm'       => 'CloneTransfer96',
								},
							 },
			      'add te to receiver plate' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['Receiver Plate'], 
									'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									'Confirm'       => 'CloneTransfer96',
							    },
							 },
			      'receiver plate to water bath' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['Receiver Plate'], 
									'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									'Confirm'       => 'CloneTransfer96',}
							 },
			      
			      'receiver plate from water bath' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['Receiver Plate'], 
									'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
									'Confirm'       => 'CloneTransfer96',}
							 },
			      
 			      'spin down receiver plate 2' => {'receiver plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											    'Configuration' => 'OneToNone',
											    'Headers'       => ['Receiver Plate'], 
											    'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
											    'Confirm'       => 'CloneTransfer96',}
							   },
			      
			      'dna transfer' => {'receiver plate to corning tray' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										      'Configuration' => 'OneToOne',
										      'Headers'       => ['Receiver Plate', 'Corning Tray'], 
										      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
										      'OutputCheck'   => 'CheckIfUsedAsOutput',
										      'Confirm'       => 'CloneTransfer96',}
					     },
			      'record potassium acetate pH' => {'none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
									    'Configuration' => 'OneToNone',
									    'Headers'       => ['Reagent Barcode', 'pH'], 
									    'InputCheck'    => 'CheckIfAvailReagent',
									    'Confirm'       => 'RecordPH',
									    'DataInfos'     => {'pH' => 0},
									},
							    },
			  },
			     'Digest' => 
			     {'digest setup' => {'corning tray to cycle plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										       'Configuration' => 'OneToOne',
										       'Headers'       => ['Corning Tray', 'Cycle Plate'], 
										       'InputCheck'    => 'GetAvailCloneInOutInprogressCompleted',
										       'OutputCheck'   => 'CheckIfUsedAsOutput',
										       'Confirm'       => 'LoadCyclePlate',},
                                                 'corning tray to multi enzyme cycle plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										       'Configuration' => 'OneToOne',
										       'Headers'       => ['Corning Tray', 'Cycle Plate'], 
										       'InputCheck'    => 'GetAvailCloneInOutInprogressCompleted',
										       'OutputCheck'   => 'CheckIfUsedAsOutput',
										       'Confirm'       => 'LoadCyclePlate2Enzymes',},
						 },
			      
			      'cycle plate to water bath' => {'cycle plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											'Configuration' => 'OneToNone',
											'Headers'       => ['Cycle Plate'], 
											'InputCheck'    => 'GetAvailCloneOutInprogress',
											'Confirm'       => 'CloneTransfer96',}
							  },
			      
			      'cycle plate from water bath' => {'cycle plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											  'Configuration' => 'OneToNone',
											  'Headers'       => ['Cycle Plate'], 
											  'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
											  'Confirm'       => 'CloneTransfer96',}
							    },
			      'add loading dye to cycle plate' =>  {'cycle plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
											      'Configuration' => 'OneToNone',
											      'Headers'       => ['Cycle Plate'], 
											      'InputCheck'    => 'GetAvailCloneGrowthInInprogress',
											      'Confirm'       => 'CloneTransfer96',
											      'PostConfirmOperation' => 'LogActiveReagentLoadDye',}
								},
			  },
			     'Run Digest Gel' => 
			     {'pour gel' => {'gel' => {'SqlPackage'    => 'TouchScreen::MappingSql',
						       'Configuration' => 'TwoInputOutputPair',
						       'Headers'       => ['Comb', 'Top Digest Gel', 'Comb', 'Bottom Digest Gel'], 
						       'InputCheck'    => 'CheckIfUsedCombAsOutput',
						       'OutputCheck'    => 'CheckIfUsedGelPositionAsOutput',
						       'Confirm'       => 'SetupGel',
						       'PostConfirmOperation' => 'LogActiveReagentGelBuffer'}
					 },
			      'digest gel loading' => {'gel' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								 'Configuration' => 'TwoToOne',
								 'Headers'       => ['Gel Rig Barcode', 'Cycle Plate', 'Digest Gel', 'Time (hr)', 'Voltage'], 
								 'InputCheck'    => 'GetAvailDigestLoading',
								 'OutputCheck'   => 'CheckIfGelPosition',
								 'Confirm'       => 'DigestGelLoading',
								 'PostConfirmOperation' => 'LogActiveReagentBufferMarker',
								 'DataInfos'     => {'Time (hr)' => 0,
										     'Voltage'  => 0},}
						   },   
			      'reload digest gel' => {'cycle plate to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['Cycle Plate'], 
								 'InputCheck'    => 'GetAvailDigestReLoading',
								 'Confirm'       => 'CloneTransfer96',}
						   },   
			      'digest gel staining' => {'digest stain tray' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										'Configuration' => 'OneToOne',
										'Headers'       => ['Digest Gel', 'Digest Gel Stain Tray'], 
										'InputCheck'    => 'GetAvailCloneOutInprogress',
										'OutputCheck'   => 'CheckIfTrayAvailable',
										'Confirm'       => 'DigestGelStaining',
										'PostConfirmOperation' => 'LogActiveReagentStainBuffer',}
						    },   
			      
			      'digest gel to scan plate' => {'scan plate' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										'Configuration' => 'OneToOne',
										'Headers'       => ['Digest Gel Stain Tray', 'Scan Plate'], 
										'InputCheck'    => 'GetAvailCloneOutInprogressInDigestStainTray',
										'OutputCheck'   => 'CheckIfScanPlateAvailable',
										'Confirm'       => 'DigestGelToScanPlate',}
						    },   
			      
			      
			      'scan digest gel image' => {'gel image' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								     'Configuration' => 'OneToOne',
								     'Headers'       => ['Digest Stain Tray', 'Gel Image', 'file name'], 
								     'InputCheck'    => 'CheckIfAvailableScanPlateForSetup',
								     'Confirm'       => 'ScanImage',
								     'DataInfos'     => {'file name' => GenerateFileName},
								     'PostConfirmOperation' => 'CompletePses',
								 }
						     },   
			      
			      'transfer gel image' => {'none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								     'Configuration' => 'OneToNone',
								     'Headers'       => ['Gel Image', 'file name'], 
								     'InputCheck'    => 'GetAvailDigestStainTray',
								     'Confirm'       => 'transferImage',
								     'DataInfos'     => {'file name' => GenerateFileName},
								     'PostConfirmOperation' => 'CompletePses',
								 }
						     },   
			      
			      'qc gel image' => {'none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
								     'Configuration' => 'OneToNone',
								     'Headers'       => ['Gel Image', 'file name', 'confirm'], 
								     'InputCheck'    => 'GetAvailDigestStainTray',
								     'Confirm'       => 'qcImage',
								     'DataInfos'     => {'confirm' => 0},
								     'PostConfirmOperation' => 'CompletePses',
								 }
						     },   
			      
			      'dilute buffer' => {'reagent container to none' => {'SqlPackage'    => 'TouchScreen::MappingSql',
										  'Configuration' => 'OneToNone',
										  'Headers'       => ['buffer reagent'], 
										  'InputCheck'    => 'CheckIfAvailReagent',
										  'Confirm'       => 'DiluteBuffer',
									      }
					      },
			      
			   },
			     
 'Oligo Ordering' => 
			     {'aliquot oligo' => {'none' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
							     'Configuration' => 'OneToDefined',
							     'Headers'       => ['Primer Source', 'Columns', 'Target Plate'], 
							     'InputCheck'    => 'GetAvailOligoOutInprogress',
							     'OutputCheck'   => 'CheckIfUsedAsOutput',
							     'Confirm'       => 'aliquotOligo',
							     'OutputDefined' => 'AliquotOptions',
							 },
					      },
			      'create oligo plate' => {'none' => {'SqlPackage'    => 'TouchScreen::PrefinishSql',
								  'Configuration' => 'FourToOne',
								  'Headers'       => ['AB - Oligo Tube', 'CD - Oligo Tube', 'EF - Oligo Tube', 'GH - Oligo Tube', '96 well oligo plate'], 
								  'InputCheck'    => 'GetAvailOligoOutInprogress',
								  'OutputCheck'   => 'CheckIfUsedAsOutput',
								  'Confirm'       => 'AliquotOligoTubes',
							      },
						   },
			  },
 'Fosmid Production' => {'create out-of-house subclones' => {'384 well archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
											  'Configuration' => 'OneToNone',
											  'Headers'       => ['384 well Fosmid Plate', 'plate name', 'Clone Prefix'], 
											  'InputCheck'    => 'CheckIfUsedAsOutput',
											  'Confirm'       => 'CreateOutOfHouseFosmids384',
											  'DataInfos'     => {'plate name'  => 0, 
													      'Clone Prefix' => 'GetClonePrefix'},
										      },
							     '96 well archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
											 'Configuration' => 'OneToNone',
											 'Headers'       => ['96 well Fosmid Plate', 'plate name', 'Clone Prefix'], 
											 'InputCheck'    => 'CheckIfUsedAsOutput',
											 'Confirm'       => 'CreateOutOfHouseFosmids96',
											 'DataInfos'     => {'plate name'  => 0, 
													     'Clone Prefix' => 0},	
										     },
							 },
			 'claim fosmid archive' => {'384 well plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									 'Configuration' => 'OneToNone',
									 'Headers'       => ['384 well Fosmid Plate'], 
									 'InputCheck'    => 'GetAvailFosmidSubclonesOutInprogress',
									 'Confirm'       => 'ClaimArchivePlate',
										       },
						    '96 well plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['384 well Fosmid Plate'], 
									'InputCheck'    => 'GetAvailFosmidSubclonesOutInprogress',
									'Confirm'       => 'ClaimArchivePlate',
								    },
						},
			 
			 'replicate' => {'384 well archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								      'Configuration' => 'OneToOne',
								      'Headers'       => ['384 well Fosmid Plate', '384 well replicated plate'], 
								      'InputCheck'    => 'GetAvailBarcodeInInprogress',
								      'Confirm'       => 'ReplicateFosmidPlates',
								      'OutputCheck'   => 'CheckIfUsedAsOutput',
								  },
					 '96 well archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
								     'Configuration' => 'OneToTwo',
								     'Headers'       => ['96 well Fosmid Plate', '96 well replicated plate', '96\ well replicated plate'], 
								     'InputCheck'    => 'GetAvailBarcodeInInprogress',
								     'Confirm'       => 'ReplicateFosmidPlates',
								     'OutputCheck'   => 'CheckIfUsedAsOutput',
								 },
                                         '3 384 well archive plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
                                                                        'Configuration' => 'OneToThree',
                                                                        'Headers'       => ['384 well Fosmid Plate', '384 well replicated plate', '384 well replicated plate', '384 well replicated plate'],
                                                                        'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                                        'Confirm'       => 'ReplicateFosmidPlates',
                                                                        'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                                    },
                                     },
		     },   
			 
			     
			     'Darwin Production Final' => {'digesting' => {'96-well digesting tray' => {'SqlPackage'    => 'TouchScreen::EstSql',
													'Configuration' => 'OneToOne',
													'Headers'       => ['384 well AB Plate'], 
													'InputCheck'    => 'GetAvailSequenceInInprogress',
													'Confirm'       => 'SeqDnaToSeqDnaTransfer',
												    },
								       },
							   'receive plates' => {'384-well archive plate' => {'SqlPackage'    => 'TouchScreen::EstSql',
													     'Configuration' => 'OneToNone',
													     'Headers'       => ['384-well archive plate', 'Plate Name', 'Comment'], 
													     'InputCheck'    => 'CheckIfUsedAsOutput',
													     'Confirm'       => 'ReceivePlate',
													     'DataInfos'     => {'plate name' => 'GetPlateName',
																 'comment' => 0},
													     ,
													 },
										'96-well archive plate' => {'SqlPackage'    => 'TouchScreen::EstSql',
													    'Configuration' => 'OneToOne',
													    'Headers'       => ['96-well archive plate', 'Plate Name', 'Comment'], 
													    'InputCheck'    => 'CheckIfUsedAsOutput',
													    'Confirm'       => 'ReceivePlate',
													    'DataInfos'     => {'plate name' => 'GetPlateName',
																'comment' => 0},
													},
									    },   
							   
						       },
			     'Amplification_old' => 
			     {'claim dna' => {'96 well genomic plate to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										  'Configuration' => 'OneToNone',
										  'Headers'       => ['96 well Source DNA Plate'], 
										  'InputCheck'    => 'GetAvailBarcodeInInprogress',,
										  'OutputCheck'   => undef,
										  'Confirm'       => 'ProcessDNA',
									      },
					  },


			      'rearray dna' => {'96 well genomic plate to 96 rearray dna' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
											      'Configuration' => 'OneToOne',
											      'Headers'       => ['96 well Source DNA Plate', '96 well Rearrayed Plate'], 
											      'InputCheck'    => 'GetAvailBarcodeInInprogressOrCompleted',
											      'OutputCheck'   => 'CheckIfUsedAsOutput',
											      'Confirm'       => 'CreateRearrayPlate',
									      },
					  },


			      'create pcr fragment' => {'96 well genomic plate to 96 well plate' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
												     'Configuration' => 'OneToDefined',
												     'Headers'       => ['96 well Source DNA Plate', 'PrimersDestinationCombination', '96 well Plate'], 
												     'InputCheck'    => 'GetAvailBarcodeInInprogressOrCompleted',
												     'OutputCheck'   => 'CheckIfCorrectPCROutput',
												     'Confirm'       => 'CreatePcrFragments',
												     'OutputDefined' => 'PCRFragmentOptions'},
							'96 rearray dna to 96 well plate' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										     'Configuration' => 'OneToDefined',
										     'Headers'       => ['96 well Source DNA Plate', 'PrimersDestinationCombination', '96 well Plate'], 
										     'InputCheck'    => 'GetAvailBarcodeOutInprogress',
										     'OutputCheck'   => 'CheckIfCorrectPCROutput',
										     'Confirm'       => 'CreatePcrFragments',
										     'OutputDefined' => 'PCRFragmentRearrayOptions'},
						    },
			      'add PCR control brew' => {'96 well plate to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										     'Configuration' => 'OneToNone',
										     'Headers'       => ['96 well pcr plate',], 
										     'InputCheck'    => 'GetAvailBarcodeOutInprogress',
										     'Confirm'       => 'ProcessDNA',
										 },
							 '96 rearray dna to 96 rearray dna' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										     'Configuration' => 'OneToNone',
										     'Headers'       => ['96 well pcr plate',], 
										     'InputCheck'    => 'GetAvailBarcodeInInprogress',
										     'Confirm'       => 'ProcessDNA',
										 },},
			      'load gel' => {'96 well plate to 96 lane gel' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										'Configuration' => 'FourToOne',
										'Headers'       => ['96 well pcr plate', '96 well pcr plate', '96 well pcr plate', '96 well pcr plate', '96 lane gel'], 
										'InputCheck'    => 'GetAvailBarcodeInInprogress',
										'OutputCheck'   => 'CheckIfUsedAsOutput',
										'Confirm'       => 'PcrTransfer2Gel',
									    },
					     '96 rearray dna to 96 rearray lane gel' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										'Configuration' => 'FourToOne',
										'Headers'       => ['96 well pcr plate', '96 well pcr plate', '96 well pcr plate', '96 well pcr plate', '96 lane gel'], 
										'InputCheck'    => 'GetAvailBarcodeInInprogress',
										'OutputCheck'   => 'CheckIfUsedAsOutput',
										'Confirm'       => 'PcrTransfer2Gel',
									    },
					 },
			      
			      'check gel' => {'96 lane gel to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['96 lane gel', 'Fail gel selection'], 
									'InputCheck'    => 'GetAvailBarcodeOutInprogress',
									'Confirm'       => 'VerifyGel',
									'DataInfos'     => {'Fail Gel Selection' => 0},
								    },
					      '96 rearray lane gel to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
									'Configuration' => 'OneToNone',
									'Headers'       => ['96 lane gel', 'Fail gel selection'], 
									'InputCheck'    => 'GetAvailBarcodeOutInprogress',
									'Confirm'       => 'VerifyGel',
									'DataInfos'     => {'Fail Gel Selection' => 0},
								    },
					  },

			      
			      'cleanup pcr reaction' => {'96 well plate to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										     'Configuration' => 'OneToNone',
										     'Headers'       => ['96 well plate', 'Clean Up Type'], 
										     'InputCheck'    => 'GetAvailRearrayPlates',
										     'OutputCheck'   => 'CheckIfUsedAsOutput',
										     'Confirm'       => 'ProcessDNA',
										     'DataInfos'     => {'clean up type'  => 0},
										 },
							 '96 rearray dna to rearray' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										      'Configuration' => 'OneToNone',
										      'Headers'       => ['96 well plate', 'Clean Up Type'], 
										      'InputCheck'    => 'GetAvailRearrayPlates',
										      'OutputCheck'   => 'CheckIfUsedAsOutput',
										      'Confirm'       => 'ProcessDNA',
										      'DataInfos'     => {'clean up type'  => 0},
										  },
						     },
													 
			      'sequencing' => {'96 well plate to 384 well plate' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										     'Configuration' => 'SixToOne',
										     'Headers'       => ['96 well source plate','FWD Primer','REV Primer','96 well source plate','FWD Primer','REV Primer', '384 well Load Plate'], 
										     'InputCheck'    => 'GetAvailSeqInputs',
										     'OutputCheck'   => 'CheckIfUsedAsOutput',
										     'Confirm'       => 'SequencePcr96to384',
										 },
					       '96 well plate to 384 well plate rearray' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										     'Configuration' => 'SixToOne',
										     'Headers'       => ['96 well source plate','FWD Primer','REV Primer','96 well source plate','FWD Primer','REV Primer', '384 well Load Plate'], 
										     'InputCheck'    => 'GetAvailSeqInputs',
										     'OutputCheck'   => 'CheckIfUsedAsOutput',
										     'Confirm'       => 'SequencePcr96to384',
										 }
					   },
			      
			      'add sequencing control brew' => {'384 well plate to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
											     'Configuration' => 'OneToNone',
											     'Headers'       => ['384 well Plate'], 
											     'InputCheck'    => 'GetAvailBarcodeOutInprogress',
											     'OutputCheck'   => 'CheckIfUsedAsOutput',
											     'Confirm'       => 'AddSeqControlBrew',
											      },
								'384 well plate rearray to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
											     'Configuration' => 'OneToNone',
											     'Headers'       => ['384 well Plate'], 
											     'InputCheck'    => 'GetAvailBarcodeOutInprogress',
											     'OutputCheck'   => 'CheckIfUsedAsOutput',
											     'Confirm'       => 'AddSeqControlBrew',
											      },
						     },
			      'sequence clean up' => {'384 well plate to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										   'Configuration' => 'OneToNone',
										   'Headers'       => ['384 well Plate', 'clean up type'], 
										   'InputCheck'    => 'GetAvailBarcodeOutInprogress',
										   'Confirm'       => 'ProcessDNA',
										   'DataInfos'     => {'clean up type'  => 0},
									       },
						      '384 well plate rearray to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
										   'Configuration' => 'OneToNone',
										   'Headers'       => ['384 well Plate', 'clean up type'], 
										   'InputCheck'    => 'GetAvailBarcodeOutInprogress',
										   'Confirm'       => 'ProcessDNA',
										   'DataInfos'     => {'clean up type'  => 0},
									       },
						     },
			      'resuspend dna' => {'384 well plate to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
									       'Configuration' => 'OneToNone',
									       'Headers'       => ['384 well Plate'], 
									       'InputCheck'    => 'GetAvailBarcodeInInprogress',
									       'Confirm'       => 'ProcessDNA',
									   },
                                                  '384 well plate rearray to none' => {'SqlPackage'    => 'TouchScreen::ReseqSql',
									       'Configuration' => 'OneToNone',
									       'Headers'       => ['384 well Plate'], 
									       'InputCheck'    => 'GetAvailBarcodeInInprogress',
									       'Confirm'       => 'ProcessDNA',
									   },

					      },
			      
			  },
			  'Funded Project Management' => 
			  {'accept dna resource item order' => {'none' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  #'Headers'       => ['DNA Source Item Order', '# DNA Source Items'], 
												  'Headers'       => ['DNA Source Item Order'], 
												  #'InputCheck'    => 'GetAvailResourceItemOrderOutInprogressOrCompleted',
												  'InputCheck'    => 'GetAvailResourceItemOrderOutInprogress',
												  'Confirm'       => 'AcceptDNAResourceItemOrder',												  
								                                  'OutputDefined' => 'GetAvailableDNAResourceItems',
												  'BarcodePrinter'=> 1,
												  },
			  					'dna resource item order to none' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  #'Headers'       => ['DNA Source Item Order', '# DNA Source Items'], 
												  'Headers'       => ['DNA Source Item Order'], 
												  #'InputCheck'    => 'GetAvailResourceItemOrderOutInprogressOrCompleted',
												  'InputCheck'    => 'GetAvailResourceItemOrderOutInprogress',
												  'Confirm'       => 'AcceptDNAResourceItemOrder',												  
								                                  'OutputDefined' => 'GetAvailableDNAResourceItems',
												  'BarcodePrinter'=> 1,
												  },
						 },
			   'fail dna resource item order' => {'batch' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  'Headers'       => ['DNA Source Item Order', 'Reason'], 
												  'InputCheck'    => 'GetAvailResourceItemsOutScheduledWithNoAccept',
												  'Confirm'       => 'FailDNAResourceItemOrder',
									                          'DataInfos'     => {'reason' => 0},
												  },
                                                              'item' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  'Headers'       => ['DNA Source Item Order', 'Reason'], 
												  'InputCheck'    => 'GetAvailBarcodeOutScheduled',
												  'Confirm'       => 'FailDNAResourceItemOrder',
									                          'DataInfos'     => {'reason' => 0},
												  },
						 },
			   'phage test' => {'batch' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  'Headers'       => ['DNA Source Item Order', 'status'], 
												  'InputCheck'    => 'GetAvailDNAResourceItemOrderForPhageTest',
												  #'InputCheck'    => 'GetAvailResourceItemsOutScheduled',
												  'Confirm'       => 'PhageTest',
								                                  'StatusButton'  => 1,
												  },
						 
			   		    'item' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  'Headers'       => ['DNA Source Item', 'status'], 
												  #'InputCheck'    => 'GetAvailResourceItemOutScheduled',
												  'InputCheck'    => 'GetAvailDNAResourceItemForPhageTest',
												  'Confirm'       => 'PhageTest',
								                                  'StatusButton'  => 1,
												  },
						 },
			   'qc test' => {'batch' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  'Headers'       => ['DNA Source Item Order', 'status'], 
												  'InputCheck'    => 'GetAvailResourceItemsInInprogress',
												  'Confirm'       => 'QCTest',
									                          #'DataInfos'     => {'status' => 0},
								                                  'StatusButton'  => 1,
												  
												  },
						 
			   		    'item' => {'SqlPackage'    => 'TouchScreen::FundedProjectManagement',
												  'Configuration' => 'OneToNone',
												  'Headers'       => ['DNA Source Item', 'status'], 
												  'InputCheck'    => 'GetAvailBarcodeInInprogress',
												  'Confirm'       => 'QCTest',
									                          #'DataInfos'     => {'status' => 0},
								                                  'StatusButton'  => 1,
												  },
						 },
			  },

     'Sequence' => 
     {     'claim dna' => {'clone from incoming dna' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                       'Configuration' => 'OneToNone',
                                       'Headers'       => ['96 well round plate'],
                                       'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                       'OutputCheck'   => undef,
							 'Confirm'       => 'ProcessDNAWithNoCompletion',
						     },
			   'sequenced dna from incoming dna' => {'SqlPackage'    => 'TouchScreen::SeqSql',
								 'Configuration' => 'OneToNone',
								 'Headers'       => ['384 well plate'],
								 'InputCheck'    => 'GetAvailBarcodeOutInprogress',
								 'OutputCheck'   => undef,
								 'Confirm'       => 'Claim384OnePseToFour'},

			   

                           'clone from fingerprinting' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                       'Configuration' => 'OneToNone',
                                       'Headers'       => ['96 well round plate'],
                                       'InputCheck'    => 'GetAvailBarcodeOutInprogressOrCompleted',
                                       'OutputCheck'   => undef,
                                       'Confirm'       => 'ProcessDNA',
                                   },
                           'corning tray to clone from fingerprinting' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                       'Configuration' => 'OneToNone',
                                       'Headers'       => ['96 well round plate'],
                                       'InputCheck'    => 'GetAvailBarcodeOutInprogressOrCompleted',
                                       'OutputCheck'   => undef,
                                       'Confirm'       => 'ProcessDNA',
                                   },
                           'subclone' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['96 well round plate'],
                                          'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                          'OutputCheck'   => undef,
                                          'Confirm'       => 'ProcessDNA',
                                      },
			   'archive plate' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['384 well plate'],
                                          'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                          'OutputCheck'   => undef,
                                          'Confirm'       => 'ProcessDNA',
                                      },
 
                       },
           'rearray dna' => {'clone' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                         'Configuration' => 'FourToOne',
                                         'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well load plate'],
                                         'InputCheck'    => 'GetAvailRearrayBarcodeInInprogress',
                                         'OutputCheck'   => 'CheckIfUsedAsRearrayOutput',
                                         'Confirm'       => 'RearrayDNAPlates',
                                     },
                             'corning tray to clone' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                         'Configuration' => 'FourToOne',
                                         'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well load plate'],
                                         'InputCheck'    => 'GetAvailRearrayBarcodeInInprogress',
                                         'OutputCheck'   => 'CheckIfUsedAsRearrayOutput',
                                         'Confirm'       => 'RearrayDNAPlates',
                                     },
                             'subclone' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                            'Configuration' => 'FourToOne',
                                            'Headers'       => ['A1', 'A2', 'B1', 'B2', '384 well load plate'],
                                            'InputCheck'    => 'GetAvailRearrayBarcodeInInprogress',
                                            'OutputCheck'   => 'CheckIfUsedAsRearrayOutput',
                                            'Confirm'       => 'RearrayDNAPlates',
                                        },
                         },
           
           'sequence' => {'corning tray to 96 well load plate' => {'SqlPackage'    => 'TouchScreen::NewProdSql',
					      'Configuration' => 'OneToTwo',
					      'Headers'       => ['96 well round plate', 'FWD 96 well load plate', 'REV 96 well load plate'],
					      'InputCheck'    => 'GetAvailArchiveInInprogress',
					      'OutputCheck'   => 'CheckIfUsedAsOutput',
					      'Confirm'       => 'Sequence96',
					      'ConfirmOptions'=> {'GetFwdPrimerId'  => undef,
								  'GetFwdDyeChemId' => undef,
								  'GetFwdEnzId'     => undef,
								  'GetRevPrimerId'  => undef,
								  'GetRevDyeChemId' => undef,
								  'GetRevEnzId'     => undef,
								  'GetReagentNameFwd'  => undef,
								  'GetReagentNameRev'  => undef},
					  },
                          '384 well load plate' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToTwo',
                                                       'Headers'       => ['384 well rearry plate', '384 well FWD load plate', '384 well REV load plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                       'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                       'Confirm'       => 'Sequence_1_2_384',
                                                   },
                          '384 well AB load plate to 384 well load plate' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                    'Configuration' => 'OneToTwo',
                                                    'Headers'       => ['384 well rearry plate', '384 well FWD load plate', '384 well REV load plate'],
                                                    'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                    'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                    'Confirm'       => 'Sequence_1_2_384',
                                                   },
                          'both direction' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToTwo',
                                                       'Headers'       => ['384 well rearry plate', '384 well FWD load plate', '384 well REV load plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                       'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                       'Confirm'       => 'Sequence_1_2_384_scheduled',
						       'PostConfirmOperation' => 'confirm_pse_scheduling',
                                                   },
                          'unique both direction' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToTwo',
                                                       'Headers'       => ['384 well rearry plate', '384 well FWD load plate', '384 well REV load plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                       'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                       'Confirm'       => 'Sequence_1_2_384_scheduled',
						       'PostConfirmOperation' => 'sequence_dna_creation',
                                                   },
                          'one direction' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToOne',
                                                       'Headers'       => ['384 well rearry plate', '384 well load plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                       'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                       'Confirm'       => 'Sequence_1_1_384',
                                                   },
                          'none' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToNone',
                                                       'Headers'       => ['384 well plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                       'OutputCheck'   => undef,
                                                       'Confirm'       => 'Sequence_1_0_384',
                                                   },
                          'unique' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToNone',
                                                       'Headers'       => ['384 well plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeInInprogress',
                                                       'OutputCheck'   => undef,
                                                       'Confirm'       => 'Sequence_1_0_384_scheduled',
						       'PostConfirmOperation' => 'confirm_pse_scheduling',
                                                   },
                      },
           
           'create sequenced dna' => {'both direction' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToTwo',
                                                       'Headers'       => ['384 well rearry plate', '384 well FWD load plate', '384 well REV load plate'],
                                                       'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                       'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                       'Confirm'       => 'create_sequenced_dna_384',
                                                   },
                          'one direction' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                    'Configuration' => 'OneToOne',
                                                    'Headers'       => ['384 well rearry plate', '384 well load plate'],
                                                    'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                                    'OutputCheck'   => 'CheckIfUsedAsOutput',
                                                    'Confirm'       => 'create_sequenced_dna_384',
                                                   },
                      },
           
            'create 384 primer plate' => {'none' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                                       'Configuration' => 'OneToNone',
                                                       'Headers'       => ['384 well load plate'],
                                                       'InputCheck'    => 'CheckIfUsedAsOutput',
                                                       'OutputCheck'   => undef,
                                                       'Confirm'       => 'create_384_primer_plate',
                                                   },
                      },
            'precipitation' => {'none' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['384 well load plate'],
                                          'InputCheck'    => 'GetAvailWholeBarcodeInOutInprogress',
                                          'OutputCheck'   => undef,
                                          'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                      },
                           },
            'resuspend dna' => {'none' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['384 well load plate'],
                                          #'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                           'InputCheck'    => 'GetAvailWholeBarcodeInOutInprogress',
                                         'OutputCheck'   => undef,
                                          'Confirm'       => 'NoTransfer',
                                      },
                               '96 well load plate to none' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['96 well load plate'],
                                          'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                          'OutputCheck'   => undef,
                                          'Confirm'       => 'ProcessDNAWithNoDNAPSE',
                                      },
			       'unique' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['384 well load plate'],
                                          #'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                           'InputCheck'    => 'GetAvailWholeBarcodeInOutInprogress',
                                         'OutputCheck'   => undef,
                                          'Confirm'       => 'NoTransfer',
                                      },
                               '384 well AB load plate to none' => {'SqlPackage'    => 'TouchScreen::SeqSql',
                                          'Configuration' => 'OneToNone',
                                          'Headers'       => ['384 well load plate'],
                                          'InputCheck'    => 'GetAvailBarcodeOutInprogress',
                                          'OutputCheck'   => undef,
                                          'Confirm'       => 'ProcessDNA',
                                      },
                           },
           'setup Biomek' => {'none' => {'SqlPackage'    => 'TouchScreen::BiomekSql',
                                         'Configuration' => 'FiveToNone',
                                         'Headers'       => ['FWD Resevoir', 'FWD Brew', 'REV Resevoir', 'REV Brew', 'Buddy'],
                                         'InputCheck'    => 'CheckBiomekSetupInfo',
                                         'OutputCheck'   => undef,
                                         'Confirm'       => 'SetupBiomek',
                                     },
                          },
           'add brew to Biomek' => {'none' => {'SqlPackage'    => 'TouchScreen::BiomekSql',
                                               'Configuration' => 'ThreeToNone',
                                               'Headers'       => ['Resevoir', 'Brew', 'Buddy'],
                                               'InputCheck'    => 'CheckBiomekAddInfo',
                                               'OutputCheck'   => undef,
                                               'Confirm'       => 'AddBrewToBiomek',
                                           }
                                },
       },
     
    );




our $TheCode = 2862;

our %BARCODE_DESCRIPTION = ('0g' => Prefix0g,
				   '0f' => Prefix0f,
				   '0h' => Prefix0h,
				   #'12' => PrefixSubclone,
				   #'13' => PrefixSubclone,
				   #'14' => PrefixSubclone,
				   #'15' => PrefixSubclone,
				   #'16' => PrefixSequence,
				   #'17' => PrefixSequence,
				   #'22' => PrefixSequence,
				   #'1a' => PrefixSubclone,
				   #'2h' => PrefixSubclone,
				   #'2i' => PrefixSubclone,
				   #'1c' => PrefixSubclone,
				   #'1m' => PrefixGrowth,
				   #'1n' => PrefixGrowth,
				   #'1o' => PrefixGrowth,
				   #'1q' => PrefixGrowth,
				   #'1M' => PrefixGrowth,
				   #'1N' => PrefixGrowth,
				   #'1O' => PrefixGrowth,
				   #'1P' => PrefixGrowth,
				   #'1Q' => PrefixGrowth,
				   #'1X' => PrefixGrowth,
				   #'1Y' => PrefixGrowth,
				   #'1Z' => PrefixGrowth,
				   #'20' => PrefixGrowth,
				   #'1w' => PrefixLibrary,
				   #'1x' => PrefixLibrary,
				   #'1u' => PrefixFraction,
				   #'1D' => PrefixFraction,
				   #'1E' => PrefixFraction,
				   #'1J' => PrefixFraction,
				   #'1K' => PrefixFraction,
				   #'1L' => PrefixFraction,
				   #'1t' => PrefixLibrary,
				   #'1r' => PrefixFractionOrLigation,
				   #'1v' => PrefixLigation,
				   #'1p' => PrefixGrowthOrLigation,
				   #'1s' => PrefixLigation,
				   #'1y' => PrefixLigation,
				   #'11' => PrefixLigation,
				   #'1j' => PrefixLigation,
				   #'1A' => PrefixGrowth,
				   #'1B' => PrefixGrowth,
				   #'1C' => PrefixBarcodeDesc,
				   #'1b' => PrefixBarcodeDesc,
				   #'1R' => PrefixFinSubclone,
				   #'1S' => PrefixFinSubclone,
				   #'1T' => PrefixFinSubclone,
				   #'1U' => PrefixFinSubclone,
				   #'1V' => PrefixFinSubclone,
 				   #'1l' => PrefixCloneLib,
				   #'28' => PrefixCloneLib,
 				   #'29' => PrefixCloneLib,
				   #'23' => PrefixCloneGrowthLib,
				   #'24' => PrefixCloneLib,
				   #'25' => PrefixCloneGrowthLib,
				   #'26' => PrefixCloneLib,
				   #'27' => PrefixCloneLib,
				   #'2a' => PrefixCloneGrowthLib,
				   '0j' => PrefixEquip,
				   #'2b' => PrefixGenome,
				   #'2c' => PrefixPcr,
				   #'2d' => PrefixPcr,
				   #'2n' => PrefixCarouselPlateLocation,
				   #'21' => PrefixPrimer,
				   

		       );



#use Data::Dumper;
#use IO::File;
#my $fh = IO::File->new(">/tmp/pctrl");
#print $fh Dumper(\%PROCESS_CNTRL);
#$fh->close;

1;

__END__

# $Header$
