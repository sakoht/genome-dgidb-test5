package Genome;

use warnings;
use strict;

# if the POE modules are dynamically loaded when doing a "step over", the debugger will run away
# detect the debugger, and pre-load POE
BEGIN {
    if ($ENV{PERL5DB}) {
        warn "Debugger detected.  Using some modules which trigger runaway debugging...\n";
        for my $mod (qw/Workflow::Server::Remote/) {
            warn "\t$mod...\n";
            eval "use $mod";
            die $@ if $@;
        }
        warn "Module pre-use completed!";
        warn "Close any extra debug windows which may have been created by the POE engine.\n";
    }
};

# software infrastructure
use UR;

# this keeps available parts of the UR pre-0.01 API we still use
use UR::ObjectV001removed;

# environmental configuration
use Genome::Config;

# linkage to certain GC LIMS classes
use GSCApp;

# ensure our access to the GSC schema is rw, and that our special env variables match up
unless (App::Init->initialized) {
    App::DB->db_access_level('rw');
}
if (App::DB::TableRow->use_dummy_autogenerated_ids || UR::DataSource->use_dummy_autogenerated_ids) {
    unless (App::Init->initialized) {
        App::DB::TableRow->use_dummy_autogenerated_ids(1);
    }
    UR::DataSource->use_dummy_autogenerated_ids(1);
}
if (App::DBI->no_commit || UR::DBI->no_commit) {
    unless (App::Init->initialized) {
        App::DBI->no_commit(1);
    }
    UR::DBI->no_commit(1);
}

# GSCApp removes our overrides to can/isa for Class::Autoloader.  Tell it to put them back.
App::Init->_restore_isa_can_hooks();

# this ensures that the search system is updated when certain classes are updated 
Genome::Search->register_callbacks('UR::Object');

# DB::single is set to this value in many places, creating a source-embedded break-point
# set it to zero in the debugger to turn off the constant stopping...
$DB::stopper = 1;

# the standard namespace declaration for a UR namespace
UR::Object::Type->define(
    class_name => 'Genome',
    is => ['UR::Namespace'],
    english_name => 'genome',
);

1;

=pod

=head1 NAME

Genome - the namespace for genome analysis and modeling 

=head1 SYNOPSIS

use Genome;

# modules in the genome namespace will now dynomically load

 $m = Genome::Model->get(...);

# modules in the GSC namespace will also load

 $r = GSC::RunLaneSolexa->get(...);

=head1 BUGS

For defects with any software in the genome namespace,
contact software@genome.wustl.edu.

=head1 SEE ALSO

B<Genome::Model>, B<Genome::Model::Tools>

B<Genome::Taxon>, B<Genome::PopulationGroup>, B<Genome::Individual>,
B<Genome::Sample>, B<Genome::Library>, B<Genome::InstrumentData>

=cut

