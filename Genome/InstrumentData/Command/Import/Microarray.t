#!/usr/bin/env perl
use strict;
use warnings;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = "1";
$ENV{UR_DBI_NO_COMMIT} = "1";
use above "Genome";
use Test::More tests => 11;
use File::Temp;

my $sample_name = 'H_KU-6888-D59687';
my $dummy_id = UR::DataSource->next_dummy_autogenerated_id -1;
my $source_dir = '/gsc/var/cache/testsuite/data/Genome-InstrumentData-Command-Import-Microarray/test_files'; 

ok (-s $source_dir, "our example imported file exists");

my $sample = Genome::Sample->get(name => $sample_name);

ok($sample, "found sample $sample_name")
    or die "exiting because the sample does not exist";

my $tmp_dir = File::Temp::tempdir('Genome-InstrumentData-Command-Import-Microarray-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $tmp_allocation = Genome::Disk::Allocation->__define__(
                                                           id => '-123459',
                                                           disk_group_name => 'info_alignments',
                                                           group_subdirectory => 'test',
                                                           mount_path => '/tmp/mount_path',
                                                           allocation_path => 'microarray_data/imported/-830001',
                                                           allocator_id => '-123459',
                                                           kilobytes_requested => 100000,
                                                           kilobytes_used => 0,
                                                           owner_id => $dummy_id,
                                                           owner_class_name => 'Genome::InstrumentData::Imported::Microarray',
                                                       );

no warnings;
*Genome::Disk::Allocation::absolute_path = sub { return $tmp_dir };
*Genome::Disk::Allocation::reallocate = sub { 1 };
*Genome::Disk::Allocation::deallocate = sub { 1 };
use warnings;

isa_ok($tmp_allocation,'Genome::Disk::Allocation'); 

my $cmd = Genome::InstrumentData::Command::Import::Microarray->create(
    sample_name => $sample_name,
    original_data_path => $source_dir,
    sequencing_platform => 'illumina microarray',
    allocation =>  $tmp_allocation
);

ok($cmd, "constructed an import command");

my @errors = $cmd->__errors__;

is(scalar(@errors),0, "no errors in cmd");

my $result = $cmd->execute();

ok($result, "execution was successful");

my $i = Genome::InstrumentData::Imported->get(  
    sample_name => $sample_name, 
    sequencing_platform => 'illumina microarray',      
);

my $disk = Genome::Disk::Allocation->get(owner_class_name => $i->class, owner_id => $i->id);

ok($disk, "found an allocation owned by the new instrument data");

my $owner_class = $disk->owner_class_name;

is($owner_class, "Genome::InstrumentData::Imported::Microarray", "allocation belongs to a G::I::I::Microarray");

is($disk->owner_id, $i->id, "allocation owner ID matches imported instrument data id");

ok(-e $i->data_directory, "output directory is present");

my $du_source = "du -sb ".$source_dir;
my $du_destination = "du -sb ".$i->data_directory;
my $s_size = qx/ $du_source /;
my $d_size = qx/ $du_destination /;

my @source_size = split(' ', $s_size);
my @destination_size = split(' ', $d_size);

is($source_size[0],$destination_size[0], "Source directory disk usage matches target directory disk usage.")
    or die "Source directory disk usage DOES NOT match target directory disk usage.";
