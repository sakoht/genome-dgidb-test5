#!/gsc/bin/perl

use strict;
use warnings;

use Test::More tests => 67;

use above 'Genome';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    use_ok('Genome::InstrumentData::Alignment');
};

my $run_name = 'test_run_name';
my $subset_name = 'test_subset_name';

my $instrument_data_id = UR::DataSource->next_dummy_autogenerated_id;
my $mock_instrument_data = Genome::InstrumentData->create_mock(
                                                               id => $instrument_data_id,
                                                               run_name => $run_name,
                                                               subset_name => $subset_name,
                                                               sample_name => 'test_sample_name',
                                                               sequencing_platform => 'test_sequencing_platform',
                                                           );
$mock_instrument_data->set_always('is_external',0);
$mock_instrument_data->set_list('allocations',);
$mock_instrument_data->set_always('calculate_alignment_estimated_kb_usage',10);
$mock_instrument_data->set_always('sample_type','dna');
$mock_instrument_data->set_always('class','Genome::InstrumentData');

my $test_aligner = 'maq';
my $test_version = '0.7.1';
my $test_reference_name = 'refseq-for-test';
my $alignment = Genome::InstrumentData::Alignment->create(
                                                          instrument_data_id => $instrument_data_id,
                                                          aligner_name => $test_aligner,
                                                          aligner_version => $test_version,
                                                          reference_name => $test_reference_name,
                                                      );
isa_ok($alignment->reference_build,'Genome::Model::Build::ReferencePlaceholder');
my $aligner_label = $alignment->aligner_label;
is($aligner_label,'maq0_7_1','got expected aligner label');

my $alignment_path = $alignment->resolve_alignment_subdirectory();
my $expected_alignment_subdirectory = "alignment_data/$aligner_label/$test_reference_name/$run_name/${subset_name}_$instrument_data_id";
is($alignment_path,$expected_alignment_subdirectory,'got expected alignment subdirectory');

my $alignment_allocation = $alignment->get_allocation();
ok(!$alignment_allocation,'no disk allocation for alignment directory');

my $alignment_directory = $alignment->alignment_directory();
is($alignment_directory,undef, 'got undef alignment directory');

$alignment_allocation = $alignment->get_or_create_allocation();
isa_ok($alignment_allocation,'Genome::Disk::Allocation');
$mock_instrument_data->set_list('allocations',$alignment_allocation);

$alignment_directory = $alignment->get_or_create_alignment_directory();
is($alignment_directory,$alignment_allocation->absolute_path, 'found absolute path to alignment directory');

###############################
#Test file accessors before creating directory
ok(!scalar($alignment->alignment_file_paths),'alignment_file_paths returns undef');
ok(!scalar($alignment->aligner_output_file_paths),'aligner_output_file_paths returns undef');
ok(!scalar($alignment->unaligned_reads_list_paths),'unaligned_reads_list_paths returns undef');
ok(!scalar($alignment->unaligned_reads_fastq_paths),'unaligned_reads_fastq_paths returns undef');

# TODO: trap error messages and parse 
ok(!scalar($alignment->alignment_file_paths_for_subsequence_name),'no ref_seq_id passed to alignment_file_paths_for_subsequence_name');
ok(!scalar($alignment->alignment_file_paths_for_subsequence_name('test_ref_seq_id')),'alignment_directory does not exist');
ok(!scalar($alignment->get_alignment_statistics),'no aligner output file found for get_alignment_statistics');

ok(Genome::Utility::FileSystem->create_directory($alignment_directory),'create alignment directory '. $alignment_directory);

is($alignment->alignment_file_paths,0,'alignment_file_paths returns no file paths');
is($alignment->aligner_output_file_paths,0,'aligner_output_file_paths returns no file paths');
is($alignment->unaligned_reads_list_paths,0,'unaligned_reads_list_paths returns no file paths');
is($alignment->unaligned_reads_fastq_paths,0,'unaligned_reads_fastq_paths returns no file paths');
is($alignment->alignment_file_paths_for_subsequence_name('test_ref_seq_id'),0,'alignment_file_paths_for_subsequence_name returns no file paths');

ok($alignment->remove_alignment_directory,'remove the alignment directory');
ok(! -e $alignment_directory,'alignment directory no longer exists');
$mock_instrument_data->set_list('allocations',);
ok(!$alignment->get_allocation,'disk deallocated for alignment directory');

$mock_instrument_data->set_always('is_external',1);
ok($mock_instrument_data->is_external,'got external solexa instrument data');

my $external_alignment_path = $alignment->resolve_alignment_subdirectory();
is($external_alignment_path,"alignment_data/$aligner_label/$test_reference_name/$instrument_data_id/${subset_name}_$instrument_data_id",'got expected external alignment subdirectory');


my $real_alignment = Genome::InstrumentData::Alignment->create(
                                                               instrument_data_id => 2499312867,
                                                               aligner_name => 'maq',
                                                               aligner_version => '0.6.8',
                                                               reference_name => 'NCBI-human-build36',
                                                           );


ok(my @alignment_file_paths = $real_alignment->alignment_file_paths, "Got the alignment_file_paths");
for my $file_path (@alignment_file_paths) {
    ok (-e $file_path, "file path $file_path exists");
}

ok(my @aligner_output_file_paths = $real_alignment->aligner_output_file_paths, "Got the aligner_output_file_paths");
for my $file_path (@aligner_output_file_paths) {
    ok (-e $file_path, "file path $file_path exists");
}

ok(my @poorly_aligned_reads_list_paths = $real_alignment->unaligned_reads_list_paths, "Got the unaligned_reads_list_paths");
for my $file_path (@poorly_aligned_reads_list_paths) {
    ok (-e $file_path, "file path $file_path exists");
}

ok(my @poorly_aligned_reads_fastq_paths = $real_alignment->unaligned_reads_fastq_paths, "Got the unaligned_reads_fastq_paths");
for my $file_path (@poorly_aligned_reads_fastq_paths) {
    ok (-e $file_path, "file path $file_path exists");
}

SKIP: {
          skip "Not sure this is supposed to work for solexa", 1;
          ok(my @contaminants_file_path = $real_alignment->contaminants_file_path, "Got the contaminants_file_path");
          for my $file_path (@contaminants_file_path) {
              ok (-e $file_path, "file path $file_path exists");
          }
}

ok(my @instrument_data_alignment_files_for_refseq = $real_alignment->alignment_file_paths_for_subsequence_name("22"), "Got the alignment_files_for_refseq");
for my $file_path (@instrument_data_alignment_files_for_refseq) {
    ok (-e $file_path, "file path $file_path exists");
}

for my $aligner_output_file (@aligner_output_file_paths) {
    ok(my $alignment_statistics = $real_alignment->get_alignment_statistics($aligner_output_file), "Got the alignment statistics for '$aligner_output_file'");
    ok($alignment_statistics->{total}, "alignment statistics has a total");
    ok($alignment_statistics->{isPE}, "alignment statistics has a isPE");
    ok($alignment_statistics->{mapped}, "alignment statistics has a mapped");
    ok($alignment_statistics->{paired}, "alignment statistics has a paired");
    ok($real_alignment->verify_aligner_successful_completion($aligner_output_file),'verify aligner successful completion of');
}
