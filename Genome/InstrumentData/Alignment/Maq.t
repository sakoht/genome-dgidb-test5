#!/gsc/bin/perl

use strict;
use warnings;

use File::Path;
use Test::More;

use above 'Genome';

BEGIN {
    if (`uname -a` =~ /x86_64/) {
        plan tests => 32;
    } else {
        plan skip_all => 'Must run on a 64 bit machine';
    }
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
    use_ok('Genome::InstrumentData::Solexa');
    use_ok('Genome::InstrumentData::Command::Align::Maq');
}

my $samtools_version = Genome::Model::Tools::Sam->default_samtools_version;
my $picard_version = Genome::Model::Tools::Sam->default_picard_version;

my $gerald_directory = '/gsc/var/cache/testsuite/data/Genome-InstrumentData-Align-Maq/test_sample_name';

#Begin Test Case #1 ######################################################
#This test tests the case where the alignments are ok, but the header is bad.
#First it copies a bam file with the bad header to the correct  test directory and then will regenerate the bam file:
print ">>>Begin Test Case #1\n";
my $cp_cmd = "cp /gscmnt/sata828/info/alignment_data/maq0_7_1/refseq-for-test/test_run_name/4_-123456/all_sequences.bam /gscmnt/sata828/info/alignment_data/maq0_7_1/refseq-for-test/test_run_name/4_-123457/all_sequences.bam";
my $cp_rv = system($cp_cmd);

my $instrument_data = Genome::InstrumentData::Solexa->create_mock(
                                                                  id => '-123457',
                                                                  sequencing_platform => 'solexa',
                                                                  sample_name => 'test_sample_name',
                                                                  library_name => 'test_sample_name-lib1',
                                                                  run_name => 'test_run_name',
                                                                  subset_name => 4,
                                                                  run_type => 'Paired End Read 2',
                                                                  gerald_directory => $gerald_directory,
                                                                  #seq_id => '-923458',
                                                                  flow_cell_id => '33G',
                                                                  lane => '4',
                                                               
                                                              );
isa_ok($instrument_data,'Genome::InstrumentData::Solexa');
$instrument_data->set_always('sample_type','dna');
$instrument_data->set_always('resolve_quality_converter','sol2sanger');
$instrument_data->set_always('run_start_date_formatted','Fri Jul 10 00:00:00 CDT 2009');
$instrument_data->set_always('sample_id','2791246676');
$instrument_data->set_always('is_paired_end',1);
ok($instrument_data->is_paired_end,'instrument data is paired end');

my $fake_allocation = Genome::Disk::Allocation->__define__(
                                                       disk_group_name => 'info_alignments',
                                                       group_subdirectory => 'info',
                                                       mount_path => '/gscmnt/sata828',
                                                       #allocation_path => 'alignment_data/maq0_6_8/refseq-for-test/test_run_name/4_-123456',
                                                       allocation_path => 'alignment_data/maq0_7_1/refseq-for-test/test_run_name/4_-123457',
                                                       allocator_id => '-123457',
                                                       kilobytes_requested => 100000,
                                                       kilobytes_used => 0,
                                                       owner_id => $instrument_data->id,
                                                       owner_class_name => 'Genome::InstrumentData::Solexa',
                                                   );


isa_ok($fake_allocation,'Genome::Disk::Allocation');
$instrument_data->set_list('allocations',$fake_allocation);

my $alignment = Genome::InstrumentData::Alignment::Maq->create(
                                                          instrument_data_id => $instrument_data->id,
                                                          aligner_name => 'maq',
                                                          #aligner_version => '0.6.8',
                                                          aligner_version => '0.7.1',
                                                          reference_name => 'refseq-for-test',
                                                          samtools_version => $samtools_version,
                                                          picard_version => $picard_version,
                                                      );

# TODO: create mock event or use some fake event for logging

# once to find old data
ok($alignment->find_or_generate_alignment_data,'found old alignment data');

my $dir = $alignment->alignment_directory;
ok($dir, "alignments found/generated");
ok(-d $dir, "result is a real directory");


print "<<<End Test Case #1\n";
#####End Test Case #1#############################################################

#Begin Test Case #2 ##############################################################
#In this case, the alignments in the directory are ok and it should shortcut
#This test uses the data generated by Test Case #1

print ">>>Begin Test Case #2\n";
my $instrument_data2 = Genome::InstrumentData::Solexa->create_mock(
                                                                  id => '-123457',
                                                                  sequencing_platform => 'solexa',
                                                                  sample_name => 'test_sample_name',
                                                                  library_name => 'test_sample_name-lib1',
                                                                  run_name => 'test_run_name',
                                                                  subset_name => 4,
                                                                  run_type => 'Paired End Read 2',
                                                                  gerald_directory => $gerald_directory,
                                                                  #seq_id => '-923458',
                                                                  flow_cell_id => '33G',
                                                                  lane => '4',
                                                               
                                                              );
isa_ok($instrument_data2,'Genome::InstrumentData::Solexa');
$instrument_data2->set_always('sample_type','dna');
$instrument_data2->set_always('resolve_quality_converter','sol2sanger');
$instrument_data2->set_always('run_start_date_formatted','Fri Jul 10 00:00:00 CDT 2009');
$instrument_data2->set_always('sample_id','2791246676');
$instrument_data2->set_always('is_paired_end',1);
ok($instrument_data2->is_paired_end,'instrument data is paired end');

isa_ok($fake_allocation,'Genome::Disk::Allocation');
$instrument_data2->set_list('allocations',$fake_allocation);

my $alignment2 = Genome::InstrumentData::Alignment::Maq->create(
                                                          instrument_data_id => $instrument_data2->id,
                                                          aligner_name => 'maq',
                                                          #aligner_version => '0.6.8',
                                                          aligner_version => '0.7.1',
                                                          reference_name => 'refseq-for-test',
                                                          samtools_version => $samtools_version,
                                                          picard_version => $picard_version,
                                                      );

# TODO: create mock event or use some fake event for logging

# once to find old data
ok($alignment2->find_or_generate_alignment_data,'found old alignment data');

my $dir2 = $alignment2->alignment_directory;
ok($dir2, "alignments found/generated");
ok(-d $dir2, "result is a real directory");

print "<<<End Test Case #2\n";
#end Test Case #2  ################################################################


#Begin Test Case #3 ##############################################################
# This test case will generate new alignments

print ">>>Begin Test Case #3\n";
my $instrument_data3 = Genome::InstrumentData::Solexa->create_mock(
                                                               id => '-123458',
                                                               #seq_id => '-923458',
                                                               flow_cell_id => '33G',
                                                               lane => '4',
                                                               median_insert_size => '313',
                                                               sequencing_platform => 'solexa',
                                                               library_name => 'test_sample_name-lib1',
                                                               sample_name => 'test_sample_name',
                                                               run_name => 'test_run_name',
                                                               subset_name => 4,
                                                               run_type => 'Paired End Read 2',
                                                               gerald_directory => '/gsc/var/cache/testsuite/data/Genome-InstrumentData-Align-Maq/test_sample_name',
                                                           );
my @fastq_files = glob($instrument_data3->gerald_directory.'/*.txt');
$instrument_data3->set_always('sample_type','dna');
$instrument_data3->set_always('is_paired_end',1);
$instrument_data3->set_always('sample_id','2791246676');
$instrument_data3->set_always('run_start_date_formatted','Fri Jul 10 00:00:00 CDT 2009');
$instrument_data3->set_always('resolve_quality_converter','sol2phred');
$instrument_data3->set_always('class','Genome::InstrumentData::Solexa');

my $tmp_dir = File::Temp::tempdir('Align-Maq-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
my $tmp_allocation = Genome::Disk::Allocation->create_mock(
                                                           id => '-123459',
                                                           disk_group_name => 'info_alignments',
                                                           group_subdirectory => 'test',
                                                           mount_path => '/tmp/mount_path',
                                                           #allocation_path => 'alignment_data/maq0_6_8/refseq-for-test/test_run_name/4_-123458',
                                                           allocation_path => 'alignment_data/maq0_7_1/refseq-for-test/test_run_name/4_-123458',
                                                           allocator_id => '-123459',
                                                           kilobytes_requested => 100000,
                                                           kilobytes_used => 0,
                                                           owner_id => $instrument_data3->id,
                                                           owner_class_name => 'Genome::InstrumentData::Solexa',
                                                       );
$tmp_allocation->mock('absolute_path',
                      sub { return $tmp_dir; }
                  );
$tmp_allocation->set_always('reallocate',1);
$tmp_allocation->set_always('deallocate',1);
isa_ok($tmp_allocation,'Genome::Disk::Allocation');
$instrument_data3->set_list('allocations',$tmp_allocation);
$instrument_data3->set_list('fastq_filenames',@fastq_files);
$instrument_data3->set_always('calculate_alignment_estimated_kb_usage',10000);
$instrument_data3->set_always('run_start_date_formatted','Fri Jul 10 00:00:00 CDT 2009');
$instrument_data3->set_always('sample_id','2791246676');

my $alignment3 = Genome::InstrumentData::Alignment->create(
                                                       instrument_data_id => $instrument_data3->id,
                                                       aligner_name => 'maq',  
                                                       #aligner_version => '0.6.8',
                                                       aligner_version => '0.7.1',
                                                       reference_name => 'refseq-for-test',
                                                       samtools_version => $samtools_version,
                                                       picard_version => $picard_version,
                                                   );

# once to make new data
ok($alignment3->find_or_generate_alignment_data,'generated new alignment data for paired end data');
my $dir3 = $alignment3->alignment_directory;
ok($dir3, "alignments found/generated");
ok(-d $dir3, "result is a real directory");
ok($alignment3->remove_alignment_directory,'removed alignment directory '. $dir3);
ok(! -e $dir3, 'alignment directory does not exist');

print "<<<End Test Case #3\n";
#######End Test #3

#######Begin Test #4
#Run paired end as fragment

print ">>>Begin Test Case 4\n";
$tmp_allocation->allocation_path('alignment_data/maq0_7_1/refseq-for-test/test_run_name/fragment/4_-123458');
$tmp_dir = File::Temp::tempdir('Align-Maq-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
$instrument_data3->set_list('fastq_filenames',$fastq_files[0]);
$instrument_data3->set_always('run_start_date_formatted','Fri Jul 10 00:00:00 CDT 2009');
$instrument_data3->set_always('sample_id','2791246676');
my $alignment4 = Genome::InstrumentData::Alignment->create(
                                                       instrument_data_id => $instrument_data3->id,
                                                       aligner_name => 'maq',
                                                       aligner_version => '0.7.1',
                                                       samtools_version => $samtools_version,
                                                       picard_version => $picard_version,
                                                       reference_name => 'refseq-for-test',
                                                       force_fragment => 1,
                                                   );
ok($alignment4->find_or_generate_alignment_data,'generated new alignment data for paired end data as fragment alignment');
my $dir4 = $alignment4->alignment_directory;
ok($dir4, "alignments found/generated");
ok(-d $dir4, "result is a real directory");

my $expected_output_dir = "/gsc/var/cache/testsuite/data/Genome-InstrumentData-Alignment-Maq/expected_output";
ok(-d $expected_output_dir, "found expected output directory");
my @diff = `diff $expected_output_dir $dir4`;
is(scalar(@diff), 2, "found 2 difference as expected (the output dir has timings in it)")
    or do {
        #my $copy = "/tmp/maq-alignment-failed/$ENV{USER}";
        my $copy = "/tmp/maq-alignment-failed.$ENV{USER}.$$";
        system "cp -r $dir4 $copy";
        diag("RUN THIS TO DEBUG: diff $expected_output_dir $copy");
    }; #leave the old all_sequences.bam (seq_id not equal to id)

ok($alignment4->remove_alignment_directory,'removed alignment directory '. $dir4);
ok(! -e $dir4, 'alignment directory does not exist');
print "<<<End Test Case #4\n";
#######End Test #4

#######Begin Test #5
#Run paired end with forward-only filter
print ">>>Begin Test Case 5\n";
$tmp_allocation->allocation_path('alignment_data/maq0_7_1.filter_name~forward-only/refseq-for-test/test_run_name/4_-123458');
$tmp_dir = File::Temp::tempdir('Align-Maq-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
$instrument_data3->set_list('fastq_filenames',$fastq_files[0]);
$instrument_data3->set_always('run_start_date_formatted','Fri Jul 10 00:00:00 CDT 2009');
$instrument_data3->set_always('sample_id','2791246676');

my $alignment5 = Genome::InstrumentData::Alignment->create(
                                                       instrument_data_id => $instrument_data3->id,
                                                       aligner_name => 'maq',
                                                       aligner_version => '0.7.1',
                                                       samtools_version => $samtools_version,
                                                       picard_version => $picard_version,
                                                       reference_name => 'refseq-for-test',
                                                       filter_name => 'forward-only',
                                                   );
ok($alignment5->find_or_generate_alignment_data,'generated new alignment data for paired end data with filter applied');
my $dir5 = $alignment5->alignment_directory;
ok($dir5, "alignments found/generated");
ok(-d $dir5, "result is a real directory");
ok($alignment5->remove_alignment_directory,'removed alignment directory '. $dir5);
ok(! -e $dir5, 'alignment directory does not exist');

exit;
