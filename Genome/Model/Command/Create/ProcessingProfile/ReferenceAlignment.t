#!/gsc/bin/perl

# This tests processing profile reference alignment creation
# The test also contains checks to ensure the code-level name uniqueness and
# functional uniqueness constraints are working as well as the subclassing

use strict;
use warnings;

use Data::Dumper;
use above "Genome";
use Command;
use Test::More tests => 44;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    use_ok('Genome::ProcessingProfile');
    use_ok('Genome::ProcessingProfile::ReferenceAlignment');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
}

my $sample = 'H_GV-933124G-skin1-9017g';
my $pp_name = 'testing';
my %good_params = (
                   indel_finder_name       => 'maq0_6_3',
                   dna_type                => 'genomic dna',
                   align_dist_threshold    => '0',
                   reference_sequence_name => 'refseq-for-test',
                   genotyper_name          => 'maq0_6_3',
                   read_aligner_name       => 'maq0_6_3',
                   profile_name	           => $pp_name,
                   sequencing_platform     => 'solexa',
                   bare_args => [],
          );
my %start_params = %good_params;

my $create_pp_command = Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment->create(%start_params);

# check and create the processing profile
isa_ok($create_pp_command,'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
ok($create_pp_command->execute(), 'execute processing profile create');

# Get it and make sure there is one
my @processing_profiles = Genome::ProcessingProfile::ReferenceAlignment->get(name => $start_params{profile_name});
is(scalar(@processing_profiles),1,'expected one processing profile');

# check the type
my $pp = $processing_profiles[0];
isa_ok($pp ,'Genome::ProcessingProfile::ReferenceAlignment');

delete $start_params{profile_name};
delete $start_params{bare_args};

# Test the properties were set and the accessors functionality
for my $property_name (keys %start_params) {
    is($pp->$property_name,$start_params{$property_name},$property_name .' accessor');
}

######## Test enforced name uniqueness ########
my %unique_name_params = %good_params;
$unique_name_params{profile_name} = $pp_name;
$unique_name_params{genotyper_name} = 'maq0_6_4';
$unique_name_params{read_aligner_name} = 'maq0_6_4';
$unique_name_params{bare_args} = [];
my $create_pp_command_name_unique= Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment->create(%unique_name_params);

# Check to make sure a processing profile with the same name exists already
@processing_profiles = Genome::ProcessingProfile::ReferenceAlignment->get(name => $pp_name);
is(scalar(@processing_profiles),1,'expected one processing profile before attempted dupe creation');

# Attempt to create a processing profile with the same name but a different
# quality, we expect this to fail due to enforced name uniqueness
isa_ok($create_pp_command_name_unique,'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
diag('');
diag('Should see two error lines below since we cannot create a processing profile with the same name as an existing one.');
diag('');
ok(!$create_pp_command_name_unique->execute(), 'Create execution fails due to code level name uniqueness constraints');     

# Check to make sure that after attempted duplicate name creation exactly one processing profile still exists
@processing_profiles = Genome::ProcessingProfile::ReferenceAlignment->get(name => $pp_name);
is(scalar(@processing_profiles),1,'expected one processing profile after attempted dupe creation');


######## Test enforced functional uniqueness ########
my %functionally_unique_params = %good_params;
$functionally_unique_params{profile_name} = 'testing_again';
my $create_pp_command_functional_unique= Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment->create(%functionally_unique_params);

delete $functionally_unique_params{profile_name};
delete $functionally_unique_params{bare_args};
@processing_profiles = Genome::ProcessingProfile::ReferenceAlignment->get(%functionally_unique_params);
is(scalar(@processing_profiles),1,'expected one processing profile before attempted dupe creation');

# We expect this to fail due to enforced functional uniqueness
isa_ok($create_pp_command_functional_unique,'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
diag('');
diag('Should see two error lines below since we cannot create a processing profile with the same functionality as an existing one.');
diag('');
ok(!$create_pp_command_functional_unique->execute(), 'Create execution fails due to code level functional uniqueness constraints');     

# Check to make sure a processing profile with the same parameters still exists 
@processing_profiles = Genome::ProcessingProfile::ReferenceAlignment->get(%functionally_unique_params);
is(scalar(@processing_profiles),1,'expected one processing profile after attempted dupe creation');

################################################
diag('Subclassing tests...');

my %params = %good_params;
delete $params{profile_name};
delete $params{bare_args};
# For the parent class and the subclass, test create/get for all three cases of
# providing a type_name, not providing a type_name and providing a bad type_name
for my $class ( qw/Genome::ProcessingProfile Genome::ProcessingProfile::ReferenceAlignment/) {
    for my $specify_type ('reference alignment','','bogus' ) {
        my $obj;
        my $name = $class.$specify_type;
        eval {
            $obj = $class->create(
                                  name => $name,
                                  %params,
                                  ($specify_type ? (type_name => $specify_type) : ())
                              );
        };
        if (should_fail($class, $specify_type)) {
            ok(!$obj, "Object failed to create as expected for class: $class, type name: $specify_type");
            my @ppsr = Genome::ProcessingProfile::ReferenceAlignment->get(name => $name);
            is(scalar(@ppsr),0,'Expected no subclassed profiles since creation should fail');
            next;
        }
        else {
            ok($obj, "Object creation successful for class: $class, type name: $specify_type") or next;
            ok($obj->isa('Genome::ProcessingProfile::ReferenceAlignment'), 'Object is properly subclassed.');
            is($obj->type_name,'reference alignment','Type_name has been properly set.');
            my @ppsr = Genome::ProcessingProfile::ReferenceAlignment->get(name => $name);
            is(scalar(@ppsr),1,'Expected one subclasses profile.');
        }
    }
}

# Test to ensure that processing profile creation will fail when invalid values
# are supplied to params we are verifying have modules in place
my %module_test_params = %good_params;
$module_test_params{profile_name} = 'module_test';
$module_test_params{indel_finder_name} = 'bogus_indel_finder';
$module_test_params{genotyper_name} = 'bogus genotyper';
$module_test_params{read_aligner_name} = 'bogus read aligner';
my $create_pp_command_fail = Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment->create(%module_test_params);

# check and create the processing profile
isa_ok($create_pp_command_fail,'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
diag('Some errors will follow since this should fail');
ok(!$create_pp_command_fail->execute(), 
    'failed to execute processing profile create as expected');     
my @ppfailed = Genome::ProcessingProfile::ReferenceAlignment->get(name => $module_test_params{profile_name});
is(scalar(@ppfailed),0,'Expected no subclassed profiles since creation should fail');

my %dna_type_test_params = %good_params;
$dna_type_test_params{dna_type} = 'not cdna or genomic dna';
$dna_type_test_params{profile_name} = 'testing-bad-dna-type';
# Test to make sure invalid dna_type supplied makes create fail
my $create_pp_command_dna_type_fail = Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment->create(%dna_type_test_params);

isa_ok($create_pp_command_dna_type_fail,'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
diag('Some errors will follow since this should fail');
ok(!$create_pp_command_dna_type_fail->execute(), 
    'failed to execute processing profile create as expected');
my @pp_dna_type_failed = Genome::ProcessingProfile::ReferenceAlignment->get(name => $dna_type_test_params{profile_name});
is(scalar(@pp_dna_type_failed),0,'Expected no subclassed profiles since creation should fail');


# Should the combination of class and type_name provided fail to create a proper
# subclass
sub should_fail {
    my ($class, $specify_type) = @_;

    if ($class eq 'Genome::ProcessingProfile') {
            return 1;
    }
    # Should fail if conflicting type name and reference alignment specified
    if (($class eq 'Genome::ProcessingProfile::ReferenceAlignment')&&($specify_type eq 'bogus')) {
        return 1;
    }

    return 0;
}


