#!/gsc/bin/perl

# This tests processing profile short reads creation
# The test also contains checks to ensure the code-level name uniqueness and
# functional uniqueness constraints are working as well as the subclassing

use strict;
use warnings;

use Data::Dumper;
use above "Genome";
use Command;
use Test::More tests => 45;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

my $indel_finder = 'maq0_6_3';
my $sample = 'H_GV-933124G-skin1-9017g';
my $dna_type = 'genomic dna';
my $align_dist_threshold = '0';
my $reference_sequence = 'refseq-for-test';
my $genotyper = 'maq0_6_3';
my $read_aligner = 'maq0_6_3';
my $pp_name = 'testing';
my $sequencing_platform = 'solexa';


my $create_pp_command = Genome::Model::Command::Create::ProcessingProfile::ShortRead->create(
     indel_finder          => $indel_finder,
     dna_type              => $dna_type,
     align_dist_threshold  => $align_dist_threshold,
     reference_sequence    => $reference_sequence,
     genotyper             => $genotyper ,
     read_aligner          => $read_aligner, 
	 profile_name		   => $pp_name,
     sequencing_platform   => $sequencing_platform,   
     bare_args => [],
 );

# check and create the processing profile
isa_ok($create_pp_command,'Genome::Model::Command::Create::ProcessingProfile::ShortRead');
ok($create_pp_command->execute(), 'execute processing profile create');     

# Get it and make sure there is one
my @processing_profiles = Genome::ProcessingProfile::ShortRead->get(name => $pp_name);
is(scalar(@processing_profiles),1,'expected one processing profile');

# check the type
my $pp = $processing_profiles[0];
isa_ok($pp ,'Genome::ProcessingProfile::ShortRead');

# Test the properties were set and the accessors functionality
is($pp->indel_finder_name,$indel_finder,'indel_finder accessor');
is($pp->dna_type,$dna_type,'dna_type accessor');
is($pp->align_dist_threshold,$align_dist_threshold,'align_dist_threshold accessor');
is($pp->reference_sequence_name,$reference_sequence,'reference_sequence accessor');
is($pp->genotyper_name,$genotyper,'genotyper accessor');
is($pp->read_aligner_name,$read_aligner,'read_aligner accessor');
is($pp->sequencing_platform,$sequencing_platform,'sequencing_platform accessor');
is($pp->name,$pp_name,'name accessor');
is($pp->type_name,'short read','type name accessor');

######## Test enforced name uniqueness ########
$genotyper = 'maq0_6_4';
$read_aligner = 'maq0_6_4';
my $create_pp_command_name_unique= Genome::Model::Command::Create::ProcessingProfile::ShortRead->create(
     indel_finder          => $indel_finder,
     dna_type              => $dna_type,
     align_dist_threshold  => $align_dist_threshold,
     reference_sequence    => $reference_sequence,
     genotyper             => $genotyper ,
     read_aligner          => $read_aligner,
	 profile_name		   => $pp_name,	
     bare_args => [],
 );

# Check to make sure a processing profile with the same name exists already
@processing_profiles = Genome::ProcessingProfile::ShortRead->get(name => $pp_name);
is(scalar(@processing_profiles),1,'expected one processing profile before attempted dupe creation');

# Attempt to create a processing profile with the same name but a different
# quality, we expect this to fail due to enforced name uniqueness
isa_ok($create_pp_command_name_unique,'Genome::Model::Command::Create::ProcessingProfile::ShortRead');
diag('');
diag('Should see two error lines below since we cannot create a processing profile with the same name as an existing one.');
diag('');
ok(!$create_pp_command_name_unique->execute(), 'Create execution fails due to code level name uniqueness constraints');     

# Check to make sure that after attempted duplicate name creation exactly one processing profile still exists
@processing_profiles = Genome::ProcessingProfile::ShortRead->get(name => $pp_name);
is(scalar(@processing_profiles),1,'expected one processing profile after attempted dupe creation');


######## Test enforced functional uniqueness ########
$genotyper = 'maq0_6_3';
$read_aligner = 'maq0_6_3';
$pp_name = 'testing_again';
my $create_pp_command_functional_unique= Genome::Model::Command::Create::ProcessingProfile::ShortRead->create(
     indel_finder          => $indel_finder,
     dna_type              => $dna_type,
     align_dist_threshold  => $align_dist_threshold,
     reference_sequence    => $reference_sequence,
     genotyper             => $genotyper ,
     read_aligner          => $read_aligner,
	 profile_name		   => $pp_name,	
     bare_args => [],
 );

# Check to make sure a processing profile with the same parameters exists already
my %get_params = 
(
	indel_finder_name          	=> $indel_finder,
    dna_type              		=> $dna_type,
    align_dist_threshold  		=> $align_dist_threshold,
    reference_sequence_name    	=> $reference_sequence,
    genotyper_name             	=> $genotyper ,
    read_aligner_name          	=> $read_aligner,
);
@processing_profiles = Genome::ProcessingProfile::ShortRead->get(%get_params);
is(scalar(@processing_profiles),1,'expected one processing profile before attempted dupe creation');

# We expect this to fail due to enforced functional uniqueness
isa_ok($create_pp_command_functional_unique,'Genome::Model::Command::Create::ProcessingProfile::ShortRead');
diag('');
diag('Should see two error lines below since we cannot create a processing profile with the same functionality as an existing one.');
diag('');
ok(!$create_pp_command_functional_unique->execute(), 'Create execution fails due to code level functional uniqueness constraints');     


# Check to make sure a processing profile with the same parameters still exists 
@processing_profiles = Genome::ProcessingProfile::ShortRead->get(%get_params);
is(scalar(@processing_profiles),1,'expected one processing profile after attempted dupe creation');

################################################
diag('Subclassing tests...');

my %params = (indel_finder_name         => $indel_finder,
              dna_type                  => $dna_type,
              align_dist_threshold      => $align_dist_threshold,
              reference_sequence_name   => $reference_sequence,
              genotyper_name            => $genotyper ,
              read_aligner_name         => $read_aligner,
);

# For the parent class and the subclass, test create/get for all three cases of
# providing a type_name, not providing a type_name and providing a bad type_name
for my $class ( qw/Genome::ProcessingProfile Genome::ProcessingProfile::ShortRead/) {
    for my $specify_type ('short read','','bogus') {
        my $obj;
        my $name = $class.$specify_type;
        if ($class eq "Genome::ProcessingProfile::ShortRead") {
           eval {
                $obj = $class->create(
                    name => $name,
                    %params,
                    ($specify_type ? (type_name => $specify_type) : ())
                );
            };
        }
        # Do not supply subclass parameters if creating the parent class
        else {
            eval {
            $obj = $class->create(
                    name => $name,
                    ($specify_type ? (type_name => $specify_type) : ())
            );
        };
        }
        if (should_fail($class, $specify_type)) {
            ok(!$obj, "Object failed to create as expected for class: $class, type name: $specify_type");
            my @ppsr = Genome::ProcessingProfile::ShortRead->get(name => $name);
            is(scalar(@ppsr),0,'Expected no subclassed profiles since creation should fail');
            next;
        }
        else {
            ok($obj, "Object creation successful for class: $class, type name: $specify_type") or next;
            ok($obj->isa('Genome::ProcessingProfile::ShortRead'), 'Object is properly subclassed.');
            is($obj->type_name,'short read','Type_name has been properly set.');
            my @ppsr = Genome::ProcessingProfile::ShortRead->get(name => $name);
            is(scalar(@ppsr),1,'Expected one subclasses profile.');
        }
    }
}

# Test to ensure that processing profile creation will fail when invalid values
# are supplied to params we are verifying have modules in place
my $create_pp_command_fail = Genome::Model::Command::Create::ProcessingProfile::ShortRead->create(
     indel_finder          => 'bogus_indel_finder',
     dna_type              => $dna_type,
     align_dist_threshold  => $align_dist_threshold,
     reference_sequence    => $reference_sequence,
     genotyper             => 'bogus genotyper' ,
     read_aligner          => 'bogus read aligner', 
	 profile_name		   => $pp_name,
     bare_args => [],
 );

# check and create the processing profile
isa_ok($create_pp_command_fail,'Genome::Model::Command::Create::ProcessingProfile::ShortRead');
diag('Some errors will follow since this should fail');
ok(!$create_pp_command_fail->execute(), 
    'failed to execute processing profile create as expected');     
my @ppfailed = Genome::ProcessingProfile::ShortRead->get(name => $pp_name);
is(scalar(@ppfailed),0,'Expected no subclassed profiles since creation should fail');

# Test to make sure invalid dna_type supplied makes create fail
my $create_pp_command_dna_type_fail = Genome::Model::Command::Create::ProcessingProfile::ShortRead->create(
    indel_finder          => $indel_finder,
    dna_type              => 'not cdna or genomic dna',
    align_dist_threshold  => $align_dist_threshold,
    reference_sequence    => $reference_sequence,
    genotyper             => $genotyper ,
    read_aligner          => $read_aligner, 
    profile_name		  => 'testing-bad-dna-type',
    sequencing_platform   => $sequencing_platform,   
    bare_args => [],
    );

isa_ok($create_pp_command_dna_type_fail,'Genome::Model::Command::Create::ProcessingProfile::ShortRead');
diag('Some errors will follow since this should fail');
ok(!$create_pp_command_dna_type_fail->execute(), 
    'failed to execute processing profile create as expected');     
my @pp_dna_type_failed = Genome::ProcessingProfile::ShortRead->get(name => $pp_name);
is(scalar(@pp_dna_type_failed),0,'Expected no subclassed profiles since creation should fail');


# Should the combination of class and type_name provided fail to create a proper
# subclass
sub should_fail {
    my ($class, $specify_type) = @_;
    
    # Should fail if no or bad type name supplied and generic class create called
    if ($class eq 'Genome::ProcessingProfile') {
        unless ($specify_type eq 'short read') {
            return 1;
        }
    }

    # Should fail if conflicting type name and short read specified
    if (($class eq 'Genome::ProcessingProfile::ShortRead')&&($specify_type eq 'bogus')) {
        return 1;
    }

    return 0;
}


