#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";

use Test::More tests => 56;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    use_ok('Genome::Model::Command::Create::ProcessingProfile');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::MetaGenomicComposition');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::Assembly');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::MicroArrayAffymetrix');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::MicroArrayIllumina');
}

my %pp_params = (
                 'Genome::Model::Command::Create::ProcessingProfile::MetaGenomicComposition' => {
                                                                                               profile_name => 'test_meta_genomic_composition',
                                                                                               sequencing_platform => '454',
                                                                                               assembler => 'newbler',
                                                                                               sequencing_center => 'gsc',
                                                                                               assembly_size => 12345,
                                                                                               ribosomal_subunit => 16,
                                                                                               subject_location => 'ocean',
                                                                                           },
                 'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment' => {
                                                                                             profile_name => 'test_reference_alignment',
                                                                                             sequencing_platform => 'solexa',
                                                                                             read_aligner_name => 'maq0_6_8',
                                                                                             reference_sequence_name => 'refseq-for-test',
                                                                                             dna_type => 'genomic dna',
                                                                                         },
                 'Genome::Model::Command::Create::ProcessingProfile::Assembly' => {
                                                                                   profile_name => 'test_assembly',
                                                                                   sequencing_platform => '454',
                                                                                   assembler_name => 'newbler',
                                                                                   assembler_params => 'test',
                                                                               },
                 'Genome::Model::Command::Create::ProcessingProfile::MicroArrayAffymetrix' => {
                                                                                                  profile_name => 'test_micro_array_affymetrix',
                                                                                              },
                 'Genome::Model::Command::Create::ProcessingProfile::MicroArrayIllumina' => {
                                                                                                profile_name => 'test_micro_array_illumina',
                                                                                            },
             );

# create the processing profile
for my $class (keys %pp_params) {
    $pp_params{$class}{bare_args} = [];
    my $create_command = $class->create($pp_params{$class});
    isa_ok($create_command,$class);
    ok($create_command->execute,'execute '. $class->command_name);
}

# try to create an exact duplicate pp
for my $class (keys %pp_params) {
    $pp_params{$class}{bare_args} = [];
    my $create_command = $class->create($pp_params{$class});
    isa_ok($create_command,$class);
    $create_command->dump_error_messages(0);
    $create_command->queue_error_messages(1);

    ok(!$create_command->execute,'exact duplicate failed to execute '. $class->command_name);

    my @error_messages = $create_command->error_messages();
    ok(scalar(@error_messages), 'Failed execution did emit some error_messages');
    is($error_messages[0], 'Processing profile already exists with the same name:', 'Error complains about duplicate name');
}

# try to create a pp with the same params
for my $class (keys %pp_params) {
    $pp_params{$class}{bare_args} = [];
    my $name = $pp_params{profile_name};
    $name .= '_duplicate';
    $pp_params{profile_name} = $name;
    my $create_command = $class->create($pp_params{$class});
    isa_ok($create_command,$class);

    $create_command->dump_error_messages(0);
    $create_command->queue_error_messages(1);
    ok(!$create_command->execute,'duplicate params failed to execute '. $class->command_name);

    my @error_messages = $create_command->error_messages();
    ok(scalar(@error_messages), 'Failed execution did emit some error_messages');
    is($error_messages[0], 'Processing profile already exists with the same name:', 'Error messages complains about non-unique name');
}

exit;
