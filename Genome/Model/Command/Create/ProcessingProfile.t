#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";

use Test::More tests => 36;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    use_ok('Genome::Model::Command::Create::ProcessingProfile');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::MetaGenomicComposition');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::Assembly');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::MicroArrayAffymetrix');
    use_ok('Genome::Model::Command::Create::ProcessingProfile::MicroArrayIllumina');
}

my $data_dir = '/gsc/var/cache/testsuite/data/Genome-Model-Command-Create-ProcessingProfile';
my $genotype_submission_file = $data_dir .'/test_genotype_submission.tsv';
my $watson_test_data = $data_dir .'/test_watson.tsv';
my $venter_test_data = $data_dir .'/test_venter.tsv';

my %pp_params = (
                 'Genome::Model::Command::Create::ProcessingProfile::MetaGenomicComposition' => {
                                                                                               profile_name => 'test_meta_genomic_composition',
                                                                                               sequencing_platform => '454',
                                                                                               assembler => 'newbler',
                                                                                               sequencing_center => 'gsc',
                                                                                           },
                 'Genome::Model::Command::Create::ProcessingProfile::ReferenceAlignment' => {
                                                                                             profile_name => 'test_reference_alignment',
                                                                                             sequencing_platform => 'Solexa',
                                                                                             read_aligner => 'maq0_6_8',
                                                                                             reference_sequence => 'refseq-for-test',
                                                                                             dna_type => 'genomic dna',
                                                                                         },
                 'Genome::Model::Command::Create::ProcessingProfile::Assembly' => {
                                                                                   profile_name => 'test_assembly',
                                                                                   sequencing_platform => '454',
                                                                                   assembler => 'newbler',
                                                                                   assembler_params => 'test',
                                                                               },
                 'Genome::Model::Command::Create::ProcessingProfile::MicroArrayAffymetrix' => {
                                                                                                  profile_name => 'test_micro_array_affymetrix',
                                                                                                  instrument_data => $genotype_submission_file,
                                                                                              },
                 'Genome::Model::Command::Create::ProcessingProfile::MicroArrayIllumina' => {
                                                                                                profile_name => 'test_micro_array_illumina',
                                                                                                instrument_data => $genotype_submission_file,
                                                                                            },
             );

# create the processing profile
for my $class (keys %pp_params) {
    $pp_params{$class}{bare_args} = [];
    my $create_command = $class->create($pp_params{$class});
    isa_ok($create_command,$class);
    ok($create_command->execute,'execute '. $class->command_name);
}

# try to create an exact duplicate pp
for my $class (keys %pp_params) {
    $pp_params{$class}{bare_args} = [];
    my $create_command = $class->create($pp_params{$class});
    isa_ok($create_command,$class);
    ok(!$create_command->execute,'exact duplicate failed to execute '. $class->command_name);
}

# try to create a pp with the same params
for my $class (keys %pp_params) {
    $pp_params{$class}{bare_args} = [];
    my $name = $pp_params{profile_name};
    $name .= '_duplicate';
    $pp_params{profile_name} = $name;
    my $create_command = $class->create($pp_params{$class});
    isa_ok($create_command,$class);
    ok(!$create_command->execute,'duplicate params failed to execute '. $class->command_name);
}

exit;
