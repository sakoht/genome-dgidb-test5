###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::Test;

use strict;
use warnings;

use base 'Test::Class';

use Test::More;
require File::Path;

use Data::Dumper 'Dumper';

sub import { # set ENVs
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

    return 1;
}

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly';
}

sub _mock_model {
    my $self = shift;

    unless ( $self->{_mock_model} ) {
        $self->{_mock_model} = Genome::Model::AmpliconAssembly::Test->create_mock_model
            or die "Can't create mock amplicon assembly model\n";
    }

    return $self->{_mock_model};
}

sub _main_event {
    my ($self, $event) = @_;

    $self->{_main_event} = $event if $event;

    return $self->{_main_event};
}

sub test01_use : Test(6) {
    my $self = shift;

    use_ok('Genome::Model::AmpliconAssembly');
    use_ok('Genome::Model::AmpliconAssembly::Test');
    use_ok('Genome::ProcessingProfile::AmpliconAssembly');
    use_ok('Genome::Model::Build::AmpliconAssembly');
    use_ok('Genome::Model::Command::Build');

    ok($self->_mock_model, 'Got mock model');

    return 1;
}

sub test02_create : Test(5) {
    my $self = shift;

    my $model = $self->_mock_model;
    my $build_event = Genome::Model::Command::Build->create(
        model_id => $model->id,
        auto_execute => 0,
    );
    ok($build_event, 'Create build');
    isa_ok($build_event, 'Genome::Model::Command::Build');

    $build_event->queue_error_messages(1);
    $build_event->queue_warning_messages(1);

    ok($build_event->execute,'Execute build_event');

    is($build_event->warning_messages, undef, 'No warning messages for build_event');
    $build_event->dump_warning_messages(1);
    is($build_event->error_messages, undef, 'No error messages for build_event');
    $build_event->dump_error_messages(1);

    $self->_main_event($build_event);

    return 1;
}

sub test03_verify : Tests {
    my $self = shift;

    my $build_event = $self->_main_event;
    my $model = $self->_mock_model;
    my @events = sort { $b->genome_model_event_id <=> $a->genome_model_event_id } Genome::Model::Event->get(
        model_id => $model->id,
        build_id => $build_event->build_id,
        event_status => 'Scheduled',
    );
    my $expected_event_count = 8;
    is(@events, $expected_event_count, "Scheduled $expected_event_count events");

    # The execution of these events are tested via the unit tests...but you may wanna make sure it works and see the results
    #  of the system running together
    if ( 0 ) {  
        for my $event ( @events ) {
            ok($event->execute, sprintf('Executed event (%s %s)', $event->id, $event->event_type))
                or die; # if one of these fails just die
        }
        print $build_event->build->data_directory,"\n##### HIT RETURN TO CONTINUE #####\n"; <STDIN>;
    }

    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::TestBase;

use strict;
use warnings;

use base 'Genome::Utility::TestBase';

use Data::Dumper 'Dumper';
use Genome::Model::AmpliconAssembly::Test; # necessary cuz mock objects are in here
use Test::More;

sub params_for_test_class {
    my $self = shift;
    my $model = $self->mock_model;
    return (
        model => $model,
        build => $model->latest_complete_build,
    );
}

sub required_attrs { return; }

sub mock_model {
    my $self = shift;

    unless ( $self->{_mock_model} ) {
        $self->{_mock_model} = Genome::Model::AmpliconAssembly::Test->create_mock_model
            or die "Can't create mock amplicon assembly model\n";
    }

    return $self->{_mock_model};
}

sub build {
    return $_[0]->mock_model->latest_complete_build;
}

sub amplicons {
    return $_[0]->build->get_amplicons;
}

sub should_link_instrument_data { 1 }
sub should_copy_edit_dir { 1 }
sub _pre_execute { 1 }

sub test_01_copy_data : Test(2) {
    my $self = shift;

    my $model = $self->mock_model;
    ok($model, 'Got mock amplicon assembly model');

    my $build = $model->latest_complete_build;
    ok($build, 'Got build from model');

    if ( $self->should_link_instrument_data ) {
        $build->link_instrument_data( $model->instrument_data )
            or die "Can't link traces\n";
    }

    if ( $self->should_copy_edit_dir ) {
        Genome::Model::AmpliconAssembly::Test->copy_test_dir(
            'edit_dir',
            $build->edit_dir,
        )
            or die "Can't copy test data\n";
    }

    return 1;
}

sub test_02_execute : Test(2) {
    my $self = shift;

    #print Dumper({event_id=>$self->{_object}->id});
    ok($self->_pre_execute, 'Pre Execute')
        or die "Failed method _pre_execute\n";

    ok($self->{_object}->execute, "Execute");
    #print $self->build->data_directory,"\n"; <STDIN>;

    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::VerifyInstrumentDataTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::VerifyInstrumentData';
}

sub should_link_instrument_data { 0 }
sub should_copy_edit_dir { 0 }

sub test_03_verify : Test(1) {
    my $self = shift;

    my $amplicons = $self->amplicons;
    ok(@$amplicons, 'Verified linking of instrument data');
    
    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::AssembleTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::Assemble';
}

sub should_copy_edit_dir { 0 }

sub test_03_verify : Test(1) {
    my $self = shift;

    my $amplicons = $self->amplicons;
    my $ace_cnt = grep { -s $_->ace_file } @$amplicons;
    is($ace_cnt, @$amplicons, 'Verified - Created an acefile for each amplicon');
    
    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::ClassifyTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::Classify';
}

sub _pre_execute {
    my $self = shift;

    my $amplicons = $self->amplicons;
    for my $amplicon ( @$amplicons ) {
        my $class_file = $amplicon->classification_file;
        unlink $class_file if -e $class_file;
    }

    my $cnt = grep { -s $_->classification_file } @$amplicons;
    die "Could not remove classification files\n" if $cnt;

    return 1;
}

sub test_03_verify : Test(1) {
    my $self = shift;

    my $amplicons = $self->amplicons;
    my $cnt = grep { -s $_->classification_file } @$amplicons;
    is($cnt, @$amplicons, 'Verified - Created classification for each amplicon');
    
    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::OrientTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::Orient';
}

sub _pre_execute {
    my $self = shift;

    my $amplicons = $self->amplicons;
    for my $amplicon ( @$amplicons ) {
        my $ori_fasta = $amplicon->oriented_fasta_file;
        unlink $ori_fasta if -e $ori_fasta;
        my $ori_qual = $amplicon->oriented_qual_file;
        unlink $ori_qual if -e $ori_qual;
    }

    my $cnt = grep { -s $_->oriented_fasta_file } @$amplicons;
    die "Did not remove oriented fastas\n" if $cnt;

    return 1;
}

sub test_03_verify : Test(2) {
    my $self = shift;

    my $amplicons = $self->amplicons;
    my $fasta_cnt = grep { -s $_->oriented_fasta_file } @$amplicons;
    is($fasta_cnt, @$amplicons, 'Verified - Created oriented fasta for each amplicon');
    my $qual_cnt = grep { -s $_->oriented_qual_file } @$amplicons;
    is($qual_cnt, @$amplicons, 'Verified - Created oriented qual for each amplicon');
    
    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::CollateTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::Collate';
}

sub test_03_verify : Test(2) {
    my $self = shift;

    my $build = $self->build;
    my @types = $build->amplicon_fasta_types;
    my $fasta_cnt = grep { -s $build->fasta_file_for_type($_) } @types;
    is($fasta_cnt, @types, 'Verified - Created a fasta for each type');
    my $qual_cnt = grep { -s $build->qual_file_for_type($_) } @types;
    is($qual_cnt, @types, 'Verified - Created a qual for each type');
    
    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::CleanUpTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::CleanUp';
}

sub test_03_verify : Test(1) {
    my $self = shift;

    my @files_remaining = glob($self->build->edit_dir.'/*');
    is(@files_remaining, 50, "Removed correct number of files");

    return 1;
}

###########################################################################

package Genome::Model::Command::Build::AmpliconAssembly::ReportsTest;

use strict;
use warnings;

use base 'Genome::Model::Command::Build::AmpliconAssembly::TestBase';

use Data::Dumper 'Dumper';
use Test::More;

sub test_class {
    return 'Genome::Model::Command::Build::AmpliconAssembly::Reports';
}

sub test_03_verify : Test(1) {
    my $self = shift;

    my @files_remaining = glob($self->build->resolve_reports_directory.'/*');
    is(@files_remaining, 1, "Created reports ");

    return 1;
}

1;

=pod

=head1 Tests

=head1 Disclaimer

 Copyright (C) 2006 Washington University Genome Sequencing Center

 This script is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY or the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 License for more details.

=head1 Author(s)

 Eddie Belter <ebelter@watson.wustl.edu>

=cut

#$HeadURL: svn+ssh://svn/srv/svn/gscpan/perl_modules/trunk/Genome/Model/Command/Build/AmpliconAssembly/Orient.t $
#$Id: Orient.t 45038 2009-03-25 18:00:17Z ebelter $

