#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";
use Test::More tests => 22;
require File::Path;

use Data::Dumper;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

my $turn_on_messages = 0;

use_ok( 'Genome::Model::AmpliconAssembly');
use_ok( 'Genome::ProcessingProfile::AmpliconAssembly');
use_ok( 'Genome::Model::Command::Build::AmpliconAssembly' );

my %pp_params = (
    id => -5000,
    name => '16S Composition-Test 27F to 1391R [AB] (907R)',
    type_name => 'amplicon assembly',
    assembler => 'phredphrap',
    assembly_size => '1364',
    primer_amp_forward => '27F:AGAGTTTGATCCTGGCTCAG',
    primer_amp_reverse => '1391R:GACGGGCGGTGWGTRCA',
    primer_seq_reverse => '907R:CCGTCAATTCCTTTRAGTTT',
    purpose => 'composition',
    region_of_interest => '16S',
    sequencing_center => 'gsc',
    sequencing_platform => 'sanger',
);
my $pp = Genome::ProcessingProfile::AmpliconAssembly->create(%pp_params);
ok($pp, 'Created a processing profile');
isa_ok($pp, 'Genome::ProcessingProfile::AmpliconAssembly');
is($pp->name, $pp_params{name}, "Processing profile is named '$pp_params{name}'");
is($pp->type_name, $pp_params{type_name}, "Processing profile is for '$pp_params{type_name}'");

my %model_params = (
    id => -5000,
    genome_model_id => -5000,
    name => 'test_model_name',
    subject_name => '155DA1b',
    subject_type => 'dna_resource_item_name',
    processing_profile_id => $pp->id,
    data_directory => '/gsc/var/cache/testsuite/data/Genome-Model-Command-Build-Amplicon-Assembly/-5000',
);
my $model = Genome::Model::AmpliconAssembly->create(%model_params);
ok($model, 'Created a model');
isa_ok($model,'Genome::Model::AmpliconAssembly');
is($pp->name, $pp_params{name}, "Model is named '$model_params{name}'");
is($pp->type_name, $pp_params{type_name}, "Model is a '$pp_params{type_name}'");

# Remove previous test dirs
File::Path::rmtree($model->edit_dir) if -e $model->edit_dir;
File::Path::rmtree($model->phd_dir) if -e $model->phd_dir;

my $builder = Genome::Model::Command::Build::AmpliconAssembly->create(
    model_id => $model->id,
    auto_execute => 0,
);
isa_ok($builder, 'Genome::Model::Command::Build::AmpliconAssembly');
$builder->queue_error_messages(1);
$builder->queue_warning_messages(1);
ok($builder->execute,'Execute builder');
is($builder->warning_messages, undef, 'No warning messages for builder');
$builder->dump_warning_messages(1);
is($builder->error_messages, undef, 'No error messages for builder');
$builder->dump_error_messages(1);

my @events = sort { $b->genome_model_event_id <=> $a->genome_model_event_id } Genome::Model::Event->get(
    model_id => $model->id,
    parent_event_id => $builder->genome_model_event_id,
    event_status => 'Scheduled',
);
my $expected_event_count = 6;
is(@events, 6, "Scheduled $expected_event_count events");

for my $event ( @events ) {
    ok($event->execute, sprintf('Executed event (%s %s)', $event->id, $event->event_type));
}

exit;

#$HeadURL$
#$Id$
