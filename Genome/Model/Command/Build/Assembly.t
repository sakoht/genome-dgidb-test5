#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Path;


$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    my $archos = `uname -a`;
    if ($archos !~ /64/) {
        plan skip_all => "Must run from 64-bit machine";
    }
    plan tests => 99;
    use_ok( 'Genome::RunChunk::454');
    use_ok( 'Genome::Model::Assembly');
    use_ok( 'Genome::ProcessingProfile::Assembly');
    use_ok( 'Genome::Model::Command::Create::Model' );
    use_ok( 'Genome::Model::Command::Create::ProcessingProfile' );
    use_ok( 'Genome::Model::Command::Create::ProcessingProfile::Assembly' );
    use_ok( 'Genome::Model::Command::Build::Assembly' );
    use_ok( 'Genome::Model::Command::Build::Assembly::AssignReadSetToModel' );
    use_ok( 'Genome::Model::Command::Build::Assembly::AssignReadSetToModel::454' );
    use_ok( 'Genome::Model::Command::Build::Assembly::FilterReadSet' );
    use_ok( 'Genome::Model::Command::Build::Assembly::FilterReadSet::Seqclean' );
    use_ok( 'Genome::Model::Command::Build::Assembly::TrimReadSet' );
    use_ok( 'Genome::Model::Command::Build::Assembly::TrimReadSet::Sfffile' );
    use_ok( 'Genome::Model::Command::Build::Assembly::AddReadSetToProject' );
    use_ok( 'Genome::Model::Command::Build::Assembly::AddReadSetToProject::Newbler' );
    use_ok( 'Genome::Model::Command::Build::Assembly::Assemble' );
    use_ok( 'Genome::Model::Command::Build::Assembly::Assemble::Newbler' );
};

my %pp_1_params = (
                 name => 'test_assembly_processing_profile_1',
                 assembler => 'newbler',
                 assembler_params => '-a 0',
                 read_filter => 'seqclean',
                 read_trimmer => 'sfffile',
                 sequencing_platform => '454',
             );

my %pp_2_params = (
                 name => 'test_assembly_processing_profile_2',
                 assembler => 'newbler',
                 assembler_params => '-a 0',
                 sequencing_platform => '454',
             );
my @pp_params = (\%pp_1_params,\%pp_2_params);

my $model_name = 'test_assembly_model';
my $subject_name = 'TSP_Round1-4_Normal_Amplicon_Pool';

for my $pp_params (@pp_params) {
    my %pp_params = %{$pp_params};
    my $pp = Genome::ProcessingProfile::Assembly->create(%pp_params);

    ok($pp, 'creation worked assembly processing profile');
    isa_ok($pp ,'Genome::ProcessingProfile::Assembly');
    for my $key (keys %pp_params) {
        is($pp->$key,$pp_params{$key},"$key accessor");
    }
    my $model = Genome::Model::Assembly->create(
                                                processing_profile_id => $pp->id,
                                                name => $model_name,
                                                subject_name => $subject_name,
                                            );
    isa_ok($model,'Genome::Model::Assembly');
    is($model->subject_name,$subject_name,'subject_name accessor');
    is($model->name,$model_name,'name accessor');
    my $add_reads_command = Genome::Model::Command::AddReads->create(
                                                                     model_id => $model->id,
                                                                     all => 1,
                                                                 );
    isa_ok($add_reads_command,'Genome::Model::Command::AddReads');
    ok($add_reads_command->execute(),'execute genome-model add-reads');
    my $assembly_builder = Genome::Model::Command::Build::Assembly->create(
                                                                           model_id => $model->id,
                                                                           auto_execute => 0,
                                                                       );
    isa_ok($assembly_builder,'Genome::Model::Command::Build::Assembly');
    ok($assembly_builder->execute,'execute assembly builder');
    for my $class ($assembly_builder->stage1_job_classes) {
        my @events = $class->get(model_id => $model->id);
        for my $event (@events) {
            ok($event->execute,"execute $class event");
        }
    }
    my @assemble_events = Genome::Model::Command::Build::Assembly::Assemble->get(model_id => $model->id);
    is(scalar(@assemble_events),1,'one assemble event for project');
    my $assemble = $assemble_events[0];
    isa_ok($assemble,'Genome::Model::Command::Build::Assembly::Assemble');
  SKIP: {
        skip "assemble takes a long time", 1;
        ok($assemble->execute,'execute assemble project');
    }
    rmtree($model->data_directory);
}
exit;
