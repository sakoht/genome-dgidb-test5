#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";
use Test::More tests => 37;
use File::Path;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

my $pp_name = 'test_assembly_processing_profile';
my $model_name = 'test_assembly_model';
my $sample_name = 'TSP_Round1-4_Normal_Amplicon_Pool';

BEGIN {
    use_ok( 'Genome::RunChunk::454');
    use_ok( 'Genome::Model::Assembly');
    use_ok( 'Genome::ProcessingProfile::Assembly');
    use_ok( 'Genome::Model::Command::Create::Model' );
    use_ok( 'Genome::Model::Command::Create::ProcessingProfile' );
    use_ok( 'Genome::Model::Command::Create::ProcessingProfile::Assembly' );
    use_ok( 'Genome::Model::Command::Build::Assembly' );
    use_ok( 'Genome::Model::Command::Build::Assembly::AssignReadSetToModel' );
    use_ok( 'Genome::Model::Command::Build::Assembly::AddReadSetToProject' );
    use_ok( 'Genome::Model::Command::Build::Assembly::Assemble' );
};

my $pp = Genome::ProcessingProfile::Assembly->create(
                                                     name => $pp_name,
                                                 );
UR::Context->_sync_databases();
ok($pp, 'creation worked assembly processing profile');
isa_ok($pp ,'Genome::ProcessingProfile::Assembly');
is($pp->name,$pp_name,'name accessor');
my $model = Genome::Model::Assembly->create(
                                            processing_profile_id => $pp->id,
                                            name => $model_name,
                                            sample_name => $sample_name,
                                        );
UR::Context->_sync_databases();
isa_ok($model,'Genome::Model::Assembly');
is($model->sample_name,$sample_name,'sample_name accessor');
is($model->name,$model_name,'name accessor');

my $assembly_builder = Genome::Model::Command::Build::Assembly->create(model_id => $model->id);
isa_ok($assembly_builder,'Genome::Model::Command::Build::Assembly');
ok($assembly_builder->execute,'execute assembly builder');
UR::Context->_sync_databases();

my @assign_events = Genome::Model::Command::Build::Assembly::AssignReadSetToModel->get(model_id => $model->id);
for my $event (@assign_events) {
    ok($event->execute,'execute assign read set event');
    UR::Context->_sync_databases();
}

my @add_events = Genome::Model::Command::Build::Assembly::AddReadSetToProject->get(model_id => $model->id);
for my $event (@add_events) {
    ok($event->execute,'execute add read set event');
    UR::Context->_sync_databases();
}
my @assemble_events = Genome::Model::Command::Build::Assembly::Assemble->get(model_id => $model->id);
is(scalar(@assemble_events),1,'one assemble event for project');
my $assemble = $assemble_events[0];
isa_ok($assemble,'Genome::Model::Command::Build::Assembly::Assemble');

SKIP: {
    skip "assemble takes a long time", 1;
    ok($assemble->execute,'execute assemble project');
}
UR::Context->_sync_databases();

rmtree($model->data_directory);
exit;
