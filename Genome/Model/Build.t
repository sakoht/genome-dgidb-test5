#!/gsc/bin/perl

use strict;
use warnings;

use above 'Genome';

use Test::More tests => 14;
use Genome::Utility::TestBase;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    use_ok('Genome::Model::Build');
}

my $temp_dir = File::Temp::tempdir(CLEANUP => 1);
my $pp = Genome::ProcessingProfile->create_mock(
    id => UR::DataSource->next_dummy_autogenerated_id,
    type_name => 'imported reference sequence',
);

my $model_id = UR::DataSource->next_dummy_autogenerated_id;
my $model = Genome::Model->create_mock(
    name => 'test_model_name',
    id => $model_id,
    genome_model_id => $model_id,
    processing_profile_id => $pp->id,
    subject_name => 'test_subject_name',
    subject_type => 'test_subject_type',
    data_directory => $temp_dir,
    type_name => $pp->type_name,
);
Genome::Utility::TestBase->mock_methods(
    $model,
    'Genome::Model', 
    (qw/ 
        builds running_builds completed_builds
        last_complete_build last_complete_build_id 
        current_running_build current_running_build_id 
        /),
);
my $build = Genome::Model::Build->create(
    model_id => $model->id,
);
isa_ok($build, 'Genome::Model::Build');
is($build->data_directory,$temp_dir .'/build'. $build->id, 'build directory resolved');
is($build->model->id,$model->id, 'indirect model accessor');

#< Build Event >#
my $event_id = UR::DataSource->next_dummy_autogenerated_id;
my $event = Genome::Model::Command::Build->create_mock(
    id => $event_id,
    genome_model_event_id => $event_id,
    event_type => 'genome model build',
    event_status => 'Scheduled',
    user_name => $ENV{USER},
    model_id => $model->id,
    build_id => $build->id,
    date_scheduled => UR::Time->now,
);
ok($build->build_event, 'Build event');

#< Initialize, Fail, Success >#
my $gss_report = *Genome::Model::Build::generate_send_and_save_report; # do not send the report
no warnings 'redefine';
*Genome::Model::Build::generate_send_and_save_report = sub{ return 1; };
use warnings;
ok($build->initialize, 'Initialize');
is($build->build_status, 'Running', 'Status is Running');
is($model->current_running_build_id, $build->id, 'Current running build id set to build id in initialize');
ok($build->fail([]), 'Fail');
is($build->build_status, 'Failed', 'Status is Failed');
ok($build->success, 'Success');
is($build->build_status, 'Succeeded', 'Status is Succeeded');
ok(!$model->current_running_build_id, 'Current running build id set to undef in success');
is($model->last_complete_build_id, $build->id, 'Last complete build id set to build id in success');
no warnings 'redefine';
*Genome::Model::Build::generate_send_and_save_report = $gss_report;
use warnings;

exit;

#$HeadURL$
#$Id$
