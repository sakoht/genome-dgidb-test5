#!/gsc/bin/perl
use strict;
use warnings;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

use above "Genome";
use Test::More tests => 12;

use_ok('Genome::ModelGroup');

my $model_group = Genome::ModelGroup->create(
  id => -12345,
  name => 'Testsuite ModelGroup',
);

ok($model_group, 'Got a model_group');

my $convergence_model = $model_group->convergence_model;
ok($convergence_model, 'Generated associated Convergence model'); 
isa_ok($convergence_model, 'Genome::Model::Convergence');

$convergence_model->auto_build_alignments(0);
ok(! $convergence_model->auto_build_alignments, 'Alignment auto-build disabled');

my $test_model = Genome::Model->create_mock(
    genome_model_id => -1234567,
    name => 'Test ModelGroup Member Model',
    processing_profile_id => -1,
    subject_name => 'ModelGroup Test Subject',
    subject_type => 'Fake',
    id => -1234567,
);
$test_model->set_always('type_name', 'fake type you would have to be pathologically messing with this test to use in production !@#$%^&*()_+');

my $test_build = Genome::Model::Build->create_mock(
    id => -9,
    build_id => -9,
    model_id => -1234567,
);

#Fake out some UR underpinnings
my $test_meta = UR::Object::Type->create_mock(
    is => 'UR::Object',
    meta_class_name => 'UR::Object',
    type_name => 'object',
    id => -1000000,
);
$test_meta->set_always('get_composite_id_resolver', sub { return $_[0]; });
Test::MockObject->set_always('__meta__', $test_meta);
my $objects = { $test_model->id => $test_model, $test_build->id => $test_build };
Test::MockObject->mock('get', sub { my $class = shift; my $id = shift; return $objects->{$id}; });

$test_build->set_always('status', 'succeeded');
$test_build->set_always('date_completed', '2010-01-02 12:34:56');
$test_build->set_always('__meta__', $test_meta);

$test_model->set_always('last_succeeded_build', $test_build);
$test_model->set_always('last_complete_build', $test_build);
$test_model->set_always('builds', $test_build);

my $test_model_two = Genome::Model->create_mock(
    genome_model_id => -76543210,
    name => 'Test ModelGroup Member Model Two',
    processing_profile_id => -1,
    subject_name => 'ModelGroup Test Subject Two',
    subject_type => 'Fake',
    id => -76543210,
);

my $test_build_two = Genome::Model::Build->create_mock(
    id => -10,
    build_id => -10,
    model_id => -76543210,
);
$test_build_two->set_always('status', 'scheduled');
$test_build_two->set_always('date_completed', undef);

$test_model_two->set_always('last_succeeded_build', undef);
$test_model_two->set_always('last_complete_build', undef);
$test_model_two->set_always('builds', $test_build_two);


my $add_command = Genome::ModelGroup::Command::Member::Add->create(
    model_group_id => $model_group->id,
    model_ids => join(',', $test_model->id, $test_model_two->id),
);

ok($add_command, 'created member add command');
ok($add_command->execute(), 'executed member add command');

my @builds = $convergence_model->builds;
is(scalar @builds, 0, 'did not launch auto-build');

my $convergence_build = Genome::Model::Build::Convergence->create(
    model_id => $convergence_model->id,
    data_directory => '/dev/null', #Don't create an allocation, please
);

ok($convergence_build, 'created convergence build');
isa_ok($convergence_build, 'Genome::Model::Build::Convergence');

my @members = $convergence_build->members;
is(scalar @members, 1, 'build has one completed member');
is($members[0]->id, $test_build->id, 'that member is the expected member');
