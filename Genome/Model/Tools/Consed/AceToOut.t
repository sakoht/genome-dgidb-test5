#! /gsc/bin/perl

use strict;
use warnings;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

use above 'Genome';

use File::Compare;
use Test::More tests => 17;

use_ok('Genome::Model::Tools::Consed::AceToOut')
    or die;

my $dir = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-Consed-AceToOut';
my $acefile = $dir.'/M_BB0392D19.ace';
ok(-s $acefile, "Acefile ($acefile) exists");

my $ace2out;
# FASTA
my $all_fasta = $dir.'/all.fasta';
unlink $all_fasta if -e $all_fasta;
my $all_exp_fasta = $dir.'/all.expected.fasta';
$ace2out = Genome::Model::Tools::Consed::AceToOut->create(
    acefile => $acefile,
    format => 'fasta',
    output_file => $all_fasta,
);
ok($ace2out, 'Created AceToOut for fasta');
ok($ace2out->execute, 'Executed AceToOut');
is(compare($all_fasta, $all_exp_fasta), 0, 'Expected and generated fasta match');

#< QUAL >#
my $all_qual = $dir.'/all.qual';
unlink $all_qual if -e $all_qual;
my $all_exp_qual = $dir.'/all.expected.qual';
$ace2out = Genome::Model::Tools::Consed::AceToOut->create(
    acefile => $acefile,
    format => 'qual',
    output_file => $all_qual,
);
ok($ace2out, 'Created AceToOut for qual');
ok($ace2out->execute, 'Executed AceToOut');
is(compare($all_qual, $all_exp_qual), 0, 'Expected and generated qual match');

#< READ NAMES >#
my $all_reads = $dir.'/all.reads';
unlink $all_reads if -e $all_reads;
my $all_exp_reads = $dir.'/all.expected.reads';
$ace2out = Genome::Model::Tools::Consed::AceToOut->create(
    acefile => $acefile,
    format => 'read_names',
    output_file => $all_reads,
);
ok($ace2out, 'Created AceToOut for read names');
ok($ace2out->execute, 'Executed AceToOut');
is(compare($all_reads, $all_exp_reads), 0, 'Expected and generated read names match');

# part 
my $part_reads = $dir.'/part.reads';
unlink $part_reads if -e $part_reads;
$ace2out = Genome::Model::Tools::Consed::AceToOut->create(
    acefile => $acefile,
    format => 'read_names',
    output_file => $part_reads,
    ctgs => 'Contig12,Contig21=4800to5099'
);
ok($ace2out, 'Created AceToOut for read names');
ok($ace2out->execute, 'Executed AceToOut');
my $part_reads_fh = IO::File->new($part_reads, 'r')
    or die "Can't open $part_reads\n";
my @reads = sort { $a cmp $b } grep { chomp } $part_reads_fh->getlines;
$part_reads_fh->close;
my $part_exp_reads = $dir.'/part.expected.reads';
my $part_exp_reads_fh = IO::File->new($part_exp_reads, 'r')
    or die "Can't open $part_exp_reads\n";
my @exp_reads = sort { $a cmp $b } grep { chomp } $part_exp_reads_fh->getlines;
$part_exp_reads_fh->close;
is_deeply(\@reads, \@exp_reads, 'Expected and generated read names match');

# CONTIG NAMES
my $all_ctgs = $dir.'/all.ctgs';
unlink $all_ctgs if -e $all_ctgs;
my $all_exp_ctgs = $dir.'/all.expected.ctgs';
$ace2out = Genome::Model::Tools::Consed::AceToOut->create(
    acefile => $acefile,
    format => 'contig_names',
    output_file => $all_ctgs,
);
ok($ace2out, 'Created AceToOut for read names');
ok($ace2out->execute, 'Executed AceToOut');
is(compare($all_ctgs, $all_exp_ctgs), 0, 'Expected and generated ctg names match');

exit;

=pod

=head1 Tests

=head1 Disclaimer

 Copyright (C) 2006 Washington University Genome Sequencing Center

 This script is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY or the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
 License for more details.

=head1 Author(s)

 Eddie Belter <ebelter@watson.wustl.edu>

=cut

#$HeadURL$
#$Id$
