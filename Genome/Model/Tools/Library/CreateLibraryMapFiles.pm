package Genome::Model::Tools::Library::CreateLibraryMapFiles;

use strict;
use warnings;

use Genome;
use Command;
use IO::File;

class Genome::Model::Tools::Library::CreateLibraryMapFiles {
    is => 'Command',
    has => [
    model_id => 
    { 
        type => 'String',
        is_optional => 0,
        doc => "model id of the model to dump per library map files for",
    },
    ]
};


sub execute {
    my $self=shift;
    $DB::single = 1;
    my $model_id = $self->model_id;
    
    my $model = Genome::Model->get($model_id);
    unless(defined($model)) {
        $self->error_message("Unable to find model $model_id");
        return;
    }

    #Grab all alignment events so we can filter out ones that are still running or are abandoned
    my @events = Genome::Model::Event->get(event_type => 
        {operator => 'like', value => '%align-reads%'},
        model_id => $model_id,
        event_status => 'Succeeded'
    );
    #Convert events to ReadSet objects
    my @readsets = map {Genome::Model::ReadSet->get(read_set_id => $_->read_set_id)} @events;

    
    my %map_files;
    #Completely undeprecated loop over the readsets
    foreach my $read_set_link (@readsets) {
        my @files = $read_set_link->alignment_file_paths; #this should work now, and will include things aligned to non-chromosomal references 
        push @{$map_files{$read_set_link->library_name}}, @files;
    }

    foreach my $library (keys %map_files) {
        my @fof = @{$map_files{$library}};
        
        unless(@fof && defined($fof[0])) {
            delete $map_files{$library}; #remove libraries where there were no map files, shouldn't happen
            next;
        }
        
        @fof = grep {!-z $_} @fof; #recommended by the great and powerful Chris Harris

        unless(@fof) {
            delete $map_files{$library}; #unhappy with repeating this, but check may be needed
            next;
        }

        #dump out the map file paths into a file
        my $fh = new IO::File "${model_id}_${library}_readsets.fof","w";
        if(defined($fh)) {
            print $fh join("\n",@fof), "\n"; #must end in a new-line or the vmerge tool will hang horribly
        }
    }

    #That's right I'm dynamically generating a bash script 
    #deal with it
    #At some point this will need to be moved to a file or something in order to avoid truncation by bash
    
    my $i;
    my $bash_script = "case \$LSB_JOBINDEX in\n";
    my @libraries = keys %map_files;
    
    unless(@libraries) {
        $self->error_message("No libraries with data found for model $model_id");
        return;
    }
    
    my $num_libraries = scalar @libraries;
    for($i = 0; $i < $num_libraries; ++$i) {
        $bash_script .= sprintf "\t%d)\nLIBRARY=%s\nexport LIBRARY\n;;\n",$i+1, $libraries[$i];
    }
    $bash_script .= "esac\n";

    my $commands = <<"COMMANDS";
gt maq vmerge --maplist ${model_id}_\${LIBRARY}_readsets.fof --pipe /tmp/${model_id}_\${LIBRARY}.map & 
sleep 5
mkdir -p -m a+rw \${LIBRARY}
cp -f /tmp/${model_id}_\${LIBRARY}.map \${LIBRARY}/\${LIBRARY}.map
COMMANDS


#now we have all the files, send out the jobs
    system("bsub -N -u \${USER}\@watson.wustl.edu -R 'select[type==LINUX64]' -J '${model_id}_library_vmerge[1-$num_libraries]' -oo 'stdout.\%I' -eo 'stderr.\%I' '$bash_script$commands'");

    return 1;
}


1;

sub help_brief {
    "Merges all runs into a single map file for each library of a model and puts them in their own directories"
}

sub help_detail {
    <<'HELP';
This script uses the Genome Model API to grab out all alignment events for a model and produce a maq .map file for each library in the model. Only runs which have the status 'Succeeded' are used. The script wraps the vmerge tool and will produce an fof file containing the paths to the per-run map files generated by the pipeline for each library in the working directory. It also creates directories for each library name found (inside the current working directory), and places a single .map file for the library inside the directory. User will receive an email indicating when the vmerge events complete. Expect one email for each library.
HELP
}
