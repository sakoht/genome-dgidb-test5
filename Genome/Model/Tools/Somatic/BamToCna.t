#!/gsc/bin/perl

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Compare;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    my $archos = `uname -a`;
    if ($archos !~ /64/) {
        plan skip_all => "Must run from 64-bit machine";
    } else {
        plan tests => 6;
    }
};

use_ok( 'Genome::Model::Tools::Somatic::BamToCna');

my $test_input_dir  = '/gsc/var/cache/testsuite/data/Genome-Model-Tools-Somatic-BamToCna/';

my $tumor_bam_file  = $test_input_dir . 'tumor.sparse.bam';
my $normal_bam_file = $test_input_dir . 'normal.sparse.bam';

my $expected_output_file = $test_input_dir . 'cna.expected';

my $test_output_dir = File::Temp::tempdir('Genome-Model-Tools-Somatic-BamToCna-XXXXX', DIR => '/gsc/var/cache/testsuite/running_testsuites', CLEANUP => 1);
$test_output_dir .= '/';

my $output_file     = $test_output_dir . 'cna.out';

#This window size and ratio are atypical, but allow the test to generate data given a sparse BAM file.
my $bam_to_cna = Genome::Model::Tools::Somatic::BamToCna->create(
    tumor_bam_file  => $tumor_bam_file,
    normal_bam_file => $normal_bam_file,
    output_file     => $output_file,
    window_size     => 10000000,
    ratio           => 4/1
);

ok($bam_to_cna, 'created BamToCna object');
ok($bam_to_cna->execute(), 'executed BamToCna object');

ok(-s $output_file, 'generated output file');
is(compare($output_file, $expected_output_file), 0, 'output matched expected results');

ok(-s $output_file . ".png", 'generated copy number graphs');
