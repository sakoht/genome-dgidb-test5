package Genome::Model::Tools::PooledBac::Run;

use strict;
use warnings;

use DateTime;
use Genome;
use Genome::Model::Tools::Pcap::Assemble;
use Bio::SeqIO;
use PP::LSF;
use Data::Dumper;
class Genome::Model::Tools::PooledBac::Run {
    is => 'Command',
    has => 
    [        
        project_dir =>
        {
            type => 'String',
            is_optional => 1,
            doc => "location of the finished pooled BAC projects"        
        },
        pooled_bac_dir =>
        {
            type => 'String',
            is_optional => 1,
            doc => "location of the input pooled BAC assembly"        
        },
        ref_seq_file =>
        {
            type => 'String',
            is_optional => 1,
            doc => "location of the reference sequence"        
        },
        ace_file_name =>
        {
            type => 'String',
            is_optional => 1,
            doc => "location of the finished pooled BAC projects"        
        },
        phd_ball_name =>
        {
            type => 'String',
            is_optional => 1,
            doc => "location of the finished pooled BAC projects"        
        },
        sff_files =>
        {
            type => 'String',
            is_optional => 1,
            doc => "location of sff_files used in the original 454 assembly",
        },
        queue_type =>        
        {
            type => 'String',
            is_optional => 1,
            doc => "can be either short, big_mem, or long, default is long",     
            valid_values => ['long','bigmem','short']   
        },
        retry_count =>
        {
            type => 'String',
            is_optional => 1,
            doc => "This is the number of retries for a failed job.  The default is 1.",        
        },       
        no_reference_sequence =>
        {
            type => 'Boolean',
            is_optional => 1,
            doc => "Use this option to determine whether fake reads generated from reference sequence are included in assemblies generated by create-bac-projects",
        },
        ref_qual_value =>
        {
            type => 'String',
            is_optional => 1,
            doc => "This is the quality value that is used when creating reference .qual files, the default is 37",        
        },
        percent_overlap => 
        {
            type => 'String',
            is_optional => 1,
            doc => "this is the percent overlap, default is 50%",
        },
        percent_identity =>
        {
            type => 'String',
            is_optional => 1,
            doc => "this is the percent identity, default is 85%",
        },
        blast_params =>
        {
            type => 'String',
            is_optional => 1,
            doc => "Use this option to override the default blast params, the default param string is:\n M=1 N=-3 R=3 Q=3 W=30 wordmask=seg lcmask hspsepsmax=1000 golmax=0 B=1 V=1 topcomboN=1 -errors -notes -warnings -cpus 4 2>/dev/null",        
        }, 
        params_file => 
        {
            type => 'String',
            is_optional => 1,
            doc => "Use this option toe specify the path to a params file, a file containing preset options to run the pipeline with",
        }, 
        newbler_params =>
        {
            type => 'String',
            is_optional => 1,
            doc => "This is an optional param string to feed to newbler, this will over-ride the default param string.",
        },
        bsub_mem_usage =>
        {
            type => 'Integer',
            is_optional => 1,
            doc => "This designates the amount of RAM in Gigabytes that is used per newbler job.  The default is 16",
        },
        use_new_pipeline =>        
        {
            type => 'Boolean',
            is_optional => 1,
            doc => "Use this option to determine whether to use the new pipelien or revert to the old one, the default is to use the old pipeline",     
        },

    ]
};

sub help_brief {
    "Run Pooled BAC Pipeline"
}

sub help_synopsis { 
    return;
}
sub help_detail {
    return <<EOS 
    Assemble Pooled BAC Reads
EOS
}

sub save_params
{
    my ($self, $file_name) = @_;
    my $params = $self->create_params_hash;    

    my $fh = IO::File->new(">$file_name");
    
    print $fh Dumper($params);

    return;
}

sub create_params_hash
{
    my ($self, $file_name) = @_;
    my $params = 
    { 
        project_dir => $self->project_dir,
        pooled_bac_dir => $self->pooled_bac_dir,
        ace_file_name => $self->ace_file_name,
        ref_seq_file => $self->ref_seq_file,
        phd_ball => $self->phd_ball_name,
        sff_files => $self->sff_files,
        queue_type => $self->queue_type,
        retry_count => $self->retry_count,
        no_reference_sequence => $self->no_reference_sequence,
        ref_qual_value => $self->ref_qual_value,
        percent_overlap => $self->percent_overlap,
        percent_identity => $self->percent_identity,
        blast_params => $self->blast_params,
        newbler_params => $self->newbler_params,
        bsub_mem_usage => $self->bsub_mem_usage,
    };

    return $params;
}

sub params_are_equal
{
    my ($self,$params1, $params2) = @_;
    foreach my $key (keys %{$params1})
    {
        return 0 if (defined $params1->{$key} && defined $params2->{$key} &&($params1->{$key} ne $params2->{$key}));
    }

    return 1;
}

sub get_params
{
    my ($self,$param_file) = @_;
    my $VAR1;
    my $params = eval `cat $param_file`;
    return $params;    
}
############################################################
sub execute { 
    my ($self) = @_;
$DB::single =1;
    unless (`uname -m` =~ /64/) {
        $self->error_message('Pooled bac pipeline must be run from a 64-bit architecture');
        return;
    }
        
    my $params = {};
    $params = $self->get_params($self->params_file) if(defined $self->params_file &&    -e $self->params_file);
    my $project_dir = $self->project_dir || $self->project_dir($params->{project_dir});
    my $pooled_bac_dir = $self->pooled_bac_dir || $self->pooled_bac_dir($params->{pooled_bac_dir});
    my $ace_file_name = $self->ace_file_name || $self->ace_file_name($params->{ace_file_name} ||'Pcap.454Contigs.ace.1');
    my $ref_seq_coords_file = $self->ref_seq_file || $self->ref_seq_file($params->{ref_seq_file});
    my $phd_ball = $self->phd_ball_name || $self->phd_ball_name($params->{phd_ball});
    my $sff_files = $self->sff_files || $self->sff_files($params->{sff_files});
    my $queue_type = $self->queue_type || $self->queue_type($params->{queue_type});
    my $retry_count = $self->retry_count || $self->retry_count($params->{retry_count});
    #my $contig_map = $self->contig_map_file;
    my $no_reference_sequence = $self->no_reference_sequence || $self->no_reference_sequence($params->{no_reference_sequence});
    my $ref_qual_value = $self->ref_qual_value || $self->ref_qual_value($params->{ref_qual_value});
    my $percent_overlap = $self->percent_overlap || $self->percent_overlap($params->{percent_overlap});
    my $percent_identity = $self->percent_identity || $self->percent_identity($params->{percent_identity});
    my $blast_params = $self->blast_params || $self->blast_params($params->{blast_params});
    my $newbler_params = $self->newbler_params || $self->newbler_params($params->{newbler_params});
    my $bsub_mem_usage = $self->bsub_mem_usage || $self->bsub_mem_usage($params->{bsub_mem_usage});
    my $use_new_pipeline = $self->use_new_pipeline;


    $self->error_message("The pipeline needs for the project_dir to be specified in either the params file or on the command line in order to run.\n") and return if(!defined $project_dir);
    $self->error_message("The pipeline needs for the pooled_bac_dir to be specified in either the params file or on the command line in order to run.\n") and return if(!defined $pooled_bac_dir);
    $self->error_message("The pipeline needs for the ref_seq_file to be specified in either the params file or on the command line in order to run.\n") and return if(!defined $ref_seq_coords_file);
        
    $self->error_message("Error creating directory $project_dir") and die unless Genome::Utility::FileSystem->create_directory($project_dir);
    my $dt = DateTime->now(time_zone => "America/Chicago");
    if($self->params_file && -e $self->params_file)
    {
        my $current_params = $self->create_params_hash;
        $self->save_params("$project_dir/params.".$dt->strftime("%y%m%d.%I%M\n")) unless ($self->params_are_equal($params,$current_params));
    }
    else
    {
        $self->save_params("$project_dir/params.".$dt->strftime("%y%m%d.%I%M\n"));
    }

    $self->error_message("Error running run-blast")  and die unless
    Genome::Model::Tools::PooledBac::RunBlast->execute(ref_sequence=>$ref_seq_coords_file, ref_qual_value => $ref_qual_value, pooled_bac_dir=>$pooled_bac_dir,pooled_bac_ace_file => $ace_file_name, project_dir => $project_dir, blast_params => $blast_params);

    $self->error_message("Error running map-contigs-to-assembly")  and die unless
    Genome::Model::Tools::PooledBac::MapContigsToAssembly->execute(pooled_bac_dir=>$pooled_bac_dir,ace_file_name => $ace_file_name, project_dir => $project_dir, percent_overlap => $percent_overlap, percent_identity => $percent_identity);

    $self->error_message("Error running add-linking-contigs")  and die unless
    Genome::Model::Tools::PooledBac::AddLinkingContigs->execute( project_dir => $project_dir);

    $self->error_message("Error generating reports")  and die unless
    Genome::Model::Tools::PooledBac::GenerateReports->execute( project_dir => $project_dir);

    $self->error_message("Error creating project directories")  and die unless
    Genome::Model::Tools::PooledBac::CreateProjectDirectoriesNew->execute(pooled_bac_dir=>$pooled_bac_dir,ace_file_name => $ace_file_name,phd_file_name_or_dir => $phd_ball, project_dir => $project_dir);

    $self->error_message("Error generating post assembly reports")  and die unless
    Genome::Model::Tools::PooledBac::GeneratePostAssemblyReports->execute( project_dir => $project_dir);

#    $self->error_message("Error updating seqmgr") unless
#    Genome::Model::Tools::PooledBac::UpdateSeqMgr->execute(project_dir => $project_dir);
    return 1;
}


1;
