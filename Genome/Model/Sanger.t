#!/gsc/bin/perl

use strict;
use warnings;
use Data::Dumper;
use above "Genome";
#use Test::More skip_all => 'not ready', 'no_plan';
use Test::More 'no_plan';
use File::Basename;

use MG::IO::Polyscan;

use FindBin qw($Bin);

my $delete = shift @ARGV;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
my $data_index = 0;
my @sample_data =( 
    [
    {
        chromosome => 3,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'reference_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo1',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'T' ,
        allele2_type => 'variant_allele',
        genotype => 'AT',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo2',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 1,
        start => 25,
        stop => 25,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo4',
        read_count => 2, 
        sample_name => "A",
    },
    ],
    [
    {
        chromosome => 2,
        start => 60,
        stop => 60,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo11',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 1,
        start => 88,
        stop => 88,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo13',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 5,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo14',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 6,
        start => 70,
        stop => 70,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo15',
        read_count => 2, 
        sample_name => "A",
    },
    ],
    [
    {
        chromosome => 3,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo1',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'T' ,
        allele2_type => 'variant_allele',
        genotype => 'AT',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo2',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo3',
        read_count => 1, 
        sample_name => "A",
    },
    ],
    [
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'T' ,
        allele2_type => 'variant_allele',
        genotype => 'AT',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo12',
        read_count => 1, 
        sample_name => "A",
    },
    {
        chromosome => 1,
        start => 88,
        stop => 88,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo13',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 6,
        start => 70,
        stop => 70,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo15',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 6,
        start => 70,
        stop => 70,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'C' ,
        allele2_type => 'variant_allele',
        genotype => 'AC',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo16',
        read_count => 1, 
        sample_name => "A",
    },
    ],
    # Begin duplicate data for lq
    [
    {
        chromosome => 3,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'reference_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo1',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'T' ,
        allele2_type => 'variant_allele',
        genotype => 'AT',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo2',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 1,
        start => 25,
        stop => 25,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo4',
        read_count => 2, 
        sample_name => "A",
    },
    ],
    [
    {
        chromosome => 2,
        start => 60,
        stop => 60,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo11',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 1,
        start => 88,
        stop => 88,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo13',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 5,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo14',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 6,
        start => 70,
        stop => 70,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo15',
        read_count => 2, 
        sample_name => "A",
    },
    ],
    [
    {
        chromosome => 3,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo1',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'T' ,
        allele2_type => 'variant_allele',
        genotype => 'AT',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo2',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo3',
        read_count => 1, 
        sample_name => "A",
    },
    ],
    [
    {
        chromosome => 1,
        start => 50,
        stop => 50,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'T' ,
        allele2_type => 'variant_allele',
        genotype => 'AT',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo12',
        read_count => 1, 
        sample_name => "A",
    },
    {
        chromosome => 1,
        start => 88,
        stop => 88,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo13',
        read_count => 2, 
        sample_name => "B",
    },
    {
        chromosome => 6,
        start => 70,
        stop => 70,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'G' ,
        allele2_type => 'variant_allele',
        genotype => 'AG',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo15',
        read_count => 2, 
        sample_name => "A",
    },
    {
        chromosome => 6,
        start => 70,
        stop => 70,
        variant_type=> "snp",
        allele1 => 'A',
        allele1_type => 'reference_allele',
        allele2 => 'C' ,
        allele2_type => 'variant_allele',
        genotype => 'AC',
        score => 75,
        hugo_symbol => 'hugo',
        pcr_product_name => 'foo16',
        read_count => 1, 
        sample_name => "A",
    },
    ],
);

my $hq_polyscan_model;
my $hq_polyphred_model;
my $lq_polyscan_model;
my $lq_polyphred_model;
my $composite_model;
my @command_models;

eval{
    $hq_polyscan_model = test_hq_polyscan();
    $hq_polyphred_model = test_hq_polyphred();
    $lq_polyscan_model = test_lq_polyscan();
    $lq_polyphred_model = test_lq_polyphred();
    $composite_model = test_composite($hq_polyscan_model, $hq_polyphred_model, $lq_polyscan_model, $lq_polyphred_model);
    #@command_models = test_command();
};

print $@ if $@;

eval{
    delete_model($hq_polyscan_model) if $hq_polyscan_model;
    delete_model($hq_polyphred_model) if $hq_polyphred_model;
    delete_model($lq_polyscan_model) if $lq_polyscan_model;
    delete_model($lq_polyphred_model) if $lq_polyphred_model;
    delete_model($composite_model) if $composite_model;
    foreach (@command_models){
        delete_model($_) if $_;
    }
};

sub test_hq_polyscan{
    return test_type('hq_polyscan');
}

sub test_hq_polyphred{
    return test_type('hq_polyphred');
}

sub test_lq_polyscan{
    return test_type('lq_polyscan');
}

sub test_lq_polyphred{
    return test_type('lq_polyphred');
}

sub test_type{
    my ($type) = @_;
    $type = lc $type;
    my $cap_type = ucfirst $type;
    my $pp_class = "Genome::ProcessingProfile::Sanger";
    my $profile = $pp_class->create(name => "$type");
    isa_ok($profile, $pp_class);

    my $model_class = "Genome::Model::Sanger";
    my $model = $model_class->create(
        subject_name => "test",
        sample_name => 'test',
        name => $type,
        processing_profile => $profile,
    );
    isa_ok($model, "Genome::Model::Sanger");


    my $model_directory = $model->model_directory;
    ok(-d $model_directory, "model_directory $model_directory exists");

    my $pcr_product_genotype_file = $model->pcr_product_genotype_file;

    my @genotypes = test_data();

    $model->add_pcr_product_genotypes(@genotypes);

    ok(-e $pcr_product_genotype_file, "pcr_product_genotype_file $pcr_product_genotype_file exists");
    ok(-s $pcr_product_genotype_file, "pcr_product_genotype_file $pcr_product_genotype_file has size");

    print "===================pcr1=================\n";
    system "cat $pcr_product_genotype_file";

    my @genotypes2 = test_data();
    $model->add_pcr_product_genotypes(@genotypes2);

    print "===================pcr2=================\n";
    system "cat $pcr_product_genotype_file";

    return $model;
}

sub test_composite{
    my (@chillun) = @_;

    my $hq_polyscan_model;
    my $hq_polyphred_model;
    my $lq_polyscan_model;
    my $lq_polyphred_model;
    foreach (@chillun){
        $hq_polyscan_model = $_ if $_->type eq 'hq_polyscan';
        $hq_polyphred_model = $_ if $_->type eq 'hq_polyphred';
        $lq_polyscan_model = $_ if $_->type eq 'lq_polyscan';
        $lq_polyphred_model = $_ if $_->type eq 'lq_polyphred';
    }

    my $pp = Genome::ProcessingProfile::CombineVariants->create(name => "composite_test");
    my $model = Genome::Model::CombineVariants->create(
        sample_name => "test",
        name => "composite_test_model",
        processing_profile => $pp,
    );
    isa_ok($model, 'Genome::Model::CombineVariants');

    $model->add_child_model($hq_polyscan_model);
    $model->add_child_model($hq_polyphred_model);
    $model->add_child_model($lq_polyscan_model);
    $model->add_child_model($lq_polyphred_model);

    my @bridges = $model->child_bridges;
    is(scalar(@bridges), scalar(@chillun), "Got the correct number of bridge table entries.");
    my @child_models = $model->child_models;
    is(scalar(@child_models), scalar(@chillun), "Got the correct number of child models.");

    #TODO fix these calls to tech_models
    my ($hq_ps_m) = $model->hq_polyscan_model;
    my ($hq_pf_m) = $model->hq_polyphred_model;
    my ($lq_ps_m) = $model->lq_polyscan_model;
    my ($lq_pf_m) = $model->lq_polyphred_model;
    is($hq_ps_m->id, $hq_polyscan_model->id, "polyscan model ids match");
    is($hq_pf_m->id, $hq_polyphred_model->id, "polyphred model ids match");
    is($lq_ps_m->id, $lq_polyscan_model->id, "polyscan model ids match");
    is($lq_pf_m->id, $lq_polyphred_model->id, "polyphred model ids match");

    my $hq_genotype_file = $model->hq_genotype_file;
    my $lq_genotype_file = $model->lq_genotype_file;
    $model->combine_variants unless $delete;
    ok(-e $hq_genotype_file,"hq genotype file created");
    ok(-e $lq_genotype_file,"lq genotype file created");

    print "===================hq_sample_genotype=================\n";
    system "cat $hq_genotype_file";

    print "===================lq_sample_genotype=================\n";
    system "cat $lq_genotype_file";

    return $model;
}

sub test_command{
    return 1;
    my $self = shift;
    $data_index = 0;
    my @sample_names = qw(command_test1 command_test2);
    my @data;
    for (1..4){
        push @data, test_data();
    }
    my %hash_phred;
    $hash_phred{$_} = [] foreach @sample_names;
    for (1..3){
        my $data = shift @data;
        push @{$hash_phred{command_test1}}, $data;
    }
    for (1..6){
        my $data = shift @data;
        push @{$hash_phred{command_test2}}, $data;
    }
    my %hash_scan;
    $hash_scan{$_} = [] foreach @sample_names;
    for (1..2){
        my $data = shift @data;
        push @{$hash_scan{command_test1}}, $data;
    }
    for (1..3){
        my $data = shift @data;
        push @{$hash_scan{command_test2}}, $data;
    }

    my $command1 = Genome::Model::Command::AddSampleGenotypeData->create(
        technology_type=> 'polyphred',
        process_param_set_id => 9999,
        input_data=> \%hash_scan,
    );
    $command1->execute;

    my $command2 = Genome::Model::Command::AddSampleGenotypeData->create(
        technology_type=> 'polyscan',
        process_param_set_id => 1000,
        input_data=> \%hash_phred,
    );
    $command2->execute;

    my $model1 = Genome::Model::SampleGenotype->get(name=>"command_test1.sample_genotype");
    my $model2 = Genome::Model::SampleGenotype->get(name=>"command_test2.sample_genotype");
    $model1->combine_variants;
    $model2->combine_variants;

    my @model1_chillun = $model1->child_models;
    foreach my $chile (@model1_chillun){
        my $type = $chile->type;
        my $pcr_file = $chile->pcr_product_genotype_file;
        print "============model 1 $type pcr============\n";
        system "cat $pcr_file";
        my $genotype_file = $chile->genotype_file;
        print "============model 1 $type genotype============\n";
        system "cat $genotype_file";
    }
    my $genotype1 = $model1->genotype_file;
    print "===============model 1 genotype=================\n";
    system "cat $genotype1";

    print "\n\n\n";

    my @model2_chillun = $model2->child_models;
    foreach my $chile (@model2_chillun){
        my $type = $chile->type;
        my $pcr_file = $chile->pcr_product_genotype_file;
        print "============model 2 $type pcr============\n";
        system "cat $pcr_file";
        my $genotype_file = $chile->genotype_file;
        print "============model 2 $type genotype============\n";
        system "cat $genotype_file";
    }
    my $genotype2 = $model2->genotype_file;
    print "===============model 2 genotype=================\n";
    system "cat $genotype2";


    return ($model1, $model2, @model1_chillun, @model2_chillun);

}

sub test_new_combine_variants{
    my $self = shift;
}

sub delete_model{
    my $model = shift;
    my $model_dir = $model->model_directory;
    undef $model;
    print("\nrm -rf:".system "rm -rf $model_dir/*");
    print("\nrmdir:".system "rmdir $model_dir");
}


sub test_data{
    my $ref = $sample_data[$data_index];
    $data_index++;
    return @$ref;
}

=pod

=head1 NAME
ScriptTemplate - template for new perl script

=head1 SYNOPSIS

=head1 DESCRIPTION 

=cut

#$HeadURL$
#$Id$


