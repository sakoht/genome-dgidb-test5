#!/gsc/bin/perl

use strict;
use warnings;
use Data::Dumper;
use above "Genome";
use Test::More 'no_plan';
use File::Basename;

use MG::IO::Polyscan;

use FindBin qw($Bin);
my $polyphred_out = "$Bin/t/test_polyphred.out";
my $polyscan_out = "$Bin/t/test_polyscan.out";

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

my $polyscan_model;
my $polyphred_model;
my $composite_model;

eval{
    $polyscan_model = test_polyscan();
    $polyphred_model = test_polyphred();
    #$composite_model = test_composite($polyscan_model, $polyphred_model);
};

print $@ if $@;

delete_model($polyscan_model) if $polyscan_model;
delete_model($polyphred_model) if $polyphred_model;
delete_model($composite_model) if $composite_model;

sub test_polyscan{
    return test_type('polyscan',$polyscan_out);
}

sub test_polyphred{
    return test_type('polyphred',$polyphred_out);
}

sub test_type{
    my ($type, $input_file) = @_;
    $type = lc $type;
    my $cap_type = ucfirst $type;
    my $pp_class = "Genome::ProcessingProfile::$cap_type";
    my $profile = $pp_class->create(name => "bar");
    isa_ok($profile, $pp_class);

    my $model_class = "Genome::Model::$cap_type";
    my $model = $model_class->create(
        subject_name => "test",
        sample_name => 'test',
        name => "$type.test",
        processing_profile => $profile,
    );
    isa_ok($model, "Genome::Model::$cap_type");
    

    my $model_directory = $model->model_directory;
    ok(-d $model_directory, "model_directory $model_directory exists");

    my $pcr_product_genotype_file = $model->pcr_product_genotype_file;

    my $genotype_file = $model->genotype_file;
    
    my @genotypes = test_data1();

    $model->add_pcr_product_genotypes(@genotypes);
    
    print "===================pcr1=================\n";
    system "cat $pcr_product_genotype_file";
    print "===================genotype1=================\n";
    system "cat $genotype_file";

    sleep 2;
    my @genotypes2 = test_data2();
    $model->add_pcr_product_genotypes(@genotypes2);

    print "===================pcr2=================\n";
    system "cat $pcr_product_genotype_file";
    print "===================genotype2=================\n";
    system "cat $genotype_file";
    
    return $model;
}

sub test_composite{
    my (@chillun) = @_;
    
    my $polyscan_model;
    my $polyphred_model;
    foreach (@chillun){
        $polyscan_model = $_ if $_->type eq 'polyscan';
        $polyphred_model = $_ if $_->type eq 'polyphred';
    }
    
    my $pp = Genome::ProcessingProfile::SangerComposite->create(name => "composite_test");
    my $model = Genome::Model::SangerComposite->create(
                                                        sample_name => "test",
                                                        name => "composite_test_model",
                                                        processing_profile => $pp,
                                                      );
    isa_ok($model, 'Genome::Model::SangerComposite');

    $model->add_child_model($polyscan_model);
    $model->add_child_model($polyphred_model);
    my @bridges = $model->child_bridges;
    is(scalar(@bridges), scalar(@chillun), "Got the correct number of bridge table entries.");
    my @child_models = $model->child_models;
    is(scalar(@child_models), scalar(@chillun), "Got the correct number of child models.");
    
    is($model->polyscan_model->id, $polyscan_model->id, "polyscan model ids match");
    is($model->polyphred_model->id, $polyphred_model->id, "polyphred model ids match");

    my $polyscan_file = $model->polyscan_model->data_file;
    my $polyphred_file = $model->polyphred_model->data_file;
    
    is($polyscan_file, $polyscan_model->data_file, "got same polyscan data via composite model and original model");
    is($polyphred_file, $polyphred_model->data_file, "got same polyphred data via composite model and original model");

    my $maf_file = $model->create_maf_file;
    ok(-e $maf_file, "maf file created!");
    ok(-s $maf_file, "maf file has size");
    
    my $filtered_file = $model->filtered_file;
    ok(-e $filtered_file, "filtered file created");
    ok(-s $filtered_file, "filtered file has size");
    
    my $indel_file = $model->indel_file;
    ok(-e $indel_file, "filtered file created");
    ok(-s $indel_file, "filtered file has size");
    
    my $pop_file = $model->pop_file;
    ok(-e $pop_file, "pop file created");
    ok(-s $pop_file, "pop file has size");

    my $filtered_file_handle = MG::IO::Polyphred->new(polyphred=> $filtered_file);
    
    print keys %$filtered_file_handle;

    return $model;
}

sub delete_model{
    my $model = shift;
    my $model_dir = $model->model_directory;
    undef $model;
    print("\nrm -rf:".system "rm -rf $model_dir/*");
    print("\nrmdir:".system "rmdir $model_dir");
}

sub test_data1{
    return (
        {
            chromosome => 3,
            start => 50,
            stop => 50,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo1',
        },
        {
            chromosome => 1,
            start => 50,
            stop => 50,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'T' ,
            allele2_type => 'ref',
            genotype => 'AT',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo2',
        },
        {
            chromosome => 1,
            start => 50,
            stop => 50,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo3',
        },
        {
            chromosome => 1,
            start => 25,
            stop => 25,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo4',
        },
    );
}

sub test_data2{
    return (
        {
            chromosome => 2,
            start => 60,
            stop => 60,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo11',
        },
        {
            chromosome => 1,
            start => 50,
            stop => 50,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'T' ,
            allele2_type => 'ref',
            genotype => 'AT',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo12',
        },
        {
            chromosome => 1,
            start => 88,
            stop => 88,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo13',
        },
        {
            chromosome => 5,
            start => 50,
            stop => 50,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo14',
        },
        {
            chromosome => 6,
            start => 70,
            stop => 70,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'G' ,
            allele2_type => 'ref',
            genotype => 'AG',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo15',
        },
        {
            chromosome => 6,
            start => 70,
            stop => 70,
            variant_type=> "snp",
            allele1 => 'A',
            allele1_type => 'ref',
            allele2 => 'C' ,
            allele2_type => 'ref',
            genotype => 'AC',
            score => 75,
            hugo_symbol => 'hugo',
            tumor_sample_barcode => 'tumor barcode',
            matched_norm_sample_barcode => 'matched barcode',
            pcr_product_name => 'foo16',
        },
,
    );

}

=pod

=head1 NAME
ScriptTemplate - template for new perl script

=head1 SYNOPSIS

=head1 DESCRIPTION 

=cut

#$HeadURL$
#$Id$


