#!/gsc/bin/perl

use strict;
use warnings;
use Data::Dumper;
use above "Genome";
use Genome::RunChunk;
use Test::More skip_all => 'not ready', 'no_plan';
#use Test::More 'no_plan';
use File::Basename;
use File::Copy "cp";

use MG::IO::Polyscan;

use FindBin qw($Bin);

my $delete = shift @ARGV;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

undef @ARGV;

#use GSCApp;
#App->init();

my $hq_polyscan_model;
my $hq_polyphred_model;
my $lq_polyscan_model;
my $lq_polyphred_model;
my $composite_model;
my @command_models;

eval{
    $hq_polyscan_model = test_hq_polyscan();
    $hq_polyphred_model = test_hq_polyphred();
    $lq_polyscan_model = test_lq_polyscan();
    $lq_polyphred_model = test_lq_polyphred();
    $composite_model = test_composite($hq_polyscan_model, $hq_polyphred_model, $lq_polyscan_model, $lq_polyphred_model);
    #@command_models = test_command();
};

print $@ if $@;

eval{
    delete_model($hq_polyscan_model) if $hq_polyscan_model;
    delete_model($hq_polyphred_model) if $hq_polyphred_model;
    delete_model($lq_polyscan_model) if $lq_polyscan_model;
    delete_model($lq_polyphred_model) if $lq_polyphred_model;
    delete_model($composite_model) if $composite_model;
    foreach (@command_models){
        delete_model($_) if $_;
    }
};

sub test_hq_polyscan{
    return test_type('high_polyscan');
}

sub test_hq_polyphred{
    return test_type('high_polyphred');
}

sub test_lq_polyscan{
    return test_type('low_polyscan');
}

sub test_lq_polyphred{
    return test_type('low_polyphred');
}

sub test_type{
    my $type = shift;
    $type = lc $type;

    my $research_project_name = "test_research_project";
    my ($sensitivity, $technology_type) = split ("_", $type);
    
    my $model = Genome::Model::PolyphredPolyscan->get_or_create(
        name => "$research_project_name.$technology_type.$sensitivity",
        research_project => $research_project_name,
        technology => $technology_type,
        sensitivity => $sensitivity,
    );
    
    $model = Genome::Model::PolyphredPolyscan->get(
        research_project => $research_project_name,
        technology => $technology_type,
        sensitivity => $sensitivity,
    );

    $model = Genome::Model::PolyphredPolyscan->get(
        name => "$research_project_name.$technology_type.$sensitivity",
    );
                                                    
    isa_ok($model, "Genome::Model::PolyphredPolyscan");
    
    my $file;
    if ($type eq 'high_polyphred') {
        $file = "$Bin/t/TCGA_Production_Set_1-0000199_00n-Ensembl-44_36f.polyphred.high";
    } elsif ($type eq 'low_polyphred') {
        $file = "$Bin/t/TCGA_Production_Set_1-0000199_00n-Ensembl-44_36f.polyphred.low";
    } elsif ($type eq 'high_polyscan') {
        $file = "$Bin/t/TCGA_Production_Set_1-0000199_00n-Ensembl-44_36f.polyscan.high";
    } elsif ($type eq 'low_polyscan') {
        $file = "$Bin/t/TCGA_Production_Set_1-0000199_00n-Ensembl-44_36f.polyscan.low";
    } else {
        print "Type: $type cannot be matched to a test input file.\n";
    }

    ok(-s $file, "Test file source exists");
    
    my $model_directory = $model->model_directory;
    ok(-d $model_directory, "model_directory $model_directory exists");

    my $pending_input_dir = $model->pending_instrument_data_dir;
    ok(-d $pending_input_dir, "pending input dir $pending_input_dir exists");

    my $file_basename = basename($file);
    my $destination = "$pending_input_dir/$file_basename";
    cp ($file,$destination);
    ok(-s "$pending_input_dir/$file_basename", "Test file successfully copied to '$pending_input_dir/$file_basename'");

    ok($model->build, "build succeeded");

    return $model;
}

sub test_composite{
    my (@chillun) = @_;

    my $hq_polyscan_model;
    my $hq_polyphred_model;
    my $lq_polyscan_model;
    my $lq_polyphred_model;
    foreach (@chillun){
        $hq_polyscan_model = $_ if $_->technology eq 'polyscan' and $_->sensitivity eq 'high';
        $lq_polyscan_model = $_ if $_->technology eq 'polyscan' and $_->sensitivity eq 'low';
        $hq_polyphred_model = $_ if $_->technology eq 'polyphred' and $_->sensitivity eq 'high';
        $lq_polyphred_model = $_ if $_->technology eq 'polyphred' and $_->sensitivity eq 'low';
    }

    my $pp = Genome::ProcessingProfile::CombineVariants->create(name => "composite_test");
    my $model = Genome::Model::CombineVariants->create(
        sample_name => "test",
        name => "composite_test_model",
        processing_profile => $pp,
    );
    isa_ok($model, 'Genome::Model::CombineVariants');

    $model->add_child_model($hq_polyscan_model);
    $model->add_child_model($hq_polyphred_model);
    $model->add_child_model($lq_polyscan_model);
    $model->add_child_model($lq_polyphred_model);

    my @bridges = $model->child_bridges;
    is(scalar(@bridges), scalar(@chillun), "Got the correct number of bridge table entries.");
    my @child_models = $model->child_models;
    is(scalar(@child_models), scalar(@chillun), "Got the correct number of child models.");

    #TODO fix these calls to tech_models
    my ($hq_ps_m) = $model->hq_polyscan_model;
    my ($hq_pf_m) = $model->hq_polyphred_model;
    my ($lq_ps_m) = $model->lq_polyscan_model;
    my ($lq_pf_m) = $model->lq_polyphred_model;
    is($hq_ps_m->id, $hq_polyscan_model->id, "polyscan model ids match");
    is($hq_pf_m->id, $hq_polyphred_model->id, "polyphred model ids match");
    is($lq_ps_m->id, $lq_polyscan_model->id, "polyscan model ids match");
    is($lq_pf_m->id, $lq_polyphred_model->id, "polyphred model ids match");

    my $hq_genotype_file = $model->hq_genotype_file;
    my $lq_genotype_file = $model->lq_genotype_file;
    $model->combine_variants unless $delete;
    ok(-e $hq_genotype_file,"hq genotype file created");
    ok(-e $lq_genotype_file,"lq genotype file created");

    print "===================hq_sample_genotype=================\n";
    system "cat $hq_genotype_file";

    print "===================lq_sample_genotype=================\n";
    system "cat $lq_genotype_file";

    return $model;
}

=cut
sub test_command{
    # TODO: Not run for now, until we replace this with the cron or whatever runs for the queue'd data
    return 1;
    my $self = shift;
    my @sample_names = qw(command_test1 command_test2);
    my @data;
    for (1..4){
        push @data, test_data();
    }
    my %hash_phred;
    $hash_phred{$_} = [] foreach @sample_names;
    for (1..3){
        my $data = shift @data;
        push @{$hash_phred{command_test1}}, $data;
    }
    for (1..6){
        my $data = shift @data;
        push @{$hash_phred{command_test2}}, $data;
    }
    my %hash_scan;
    $hash_scan{$_} = [] foreach @sample_names;
    for (1..2){
        my $data = shift @data;
        push @{$hash_scan{command_test1}}, $data;
    }
    for (1..3){
        my $data = shift @data;
        push @{$hash_scan{command_test2}}, $data;
    }

    my $command1 = Genome::Model::Command::AddSampleGenotypeData->create(
        technology_type=> 'polyphred',
        process_param_set_id => 9999,
        input_data=> \%hash_scan,
    );
    $command1->execute;

    my $command2 = Genome::Model::Command::AddSampleGenotypeData->create(
        technology_type=> 'polyscan',
        process_param_set_id => 1000,
        input_data=> \%hash_phred,
    );
    $command2->execute;

    my $model1 = Genome::Model::SampleGenotype->get(name=>"command_test1.sample_genotype");
    my $model2 = Genome::Model::SampleGenotype->get(name=>"command_test2.sample_genotype");
    $model1->combine_variants;
    $model2->combine_variants;

    my @model1_chillun = $model1->child_models;
    foreach my $chile (@model1_chillun){
        my $type = $chile->type;
        my $pcr_file = $chile->pcr_product_genotype_file;
        print "============model 1 $type pcr============\n";
        system "cat $pcr_file";
        my $genotype_file = $chile->genotype_file;
        print "============model 1 $type genotype============\n";
        system "cat $genotype_file";
    }
    my $genotype1 = $model1->genotype_file;
    print "===============model 1 genotype=================\n";
    system "cat $genotype1";

    print "\n\n\n";

    my @model2_chillun = $model2->child_models;
    foreach my $chile (@model2_chillun){
        my $type = $chile->type;
        my $pcr_file = $chile->pcr_product_genotype_file;
        print "============model 2 $type pcr============\n";
        system "cat $pcr_file";
        my $genotype_file = $chile->genotype_file;
        print "============model 2 $type genotype============\n";
        system "cat $genotype_file";
    }
    my $genotype2 = $model2->genotype_file;
    print "===============model 2 genotype=================\n";
    system "cat $genotype2";


    return ($model1, $model2, @model1_chillun, @model2_chillun);

}
=cut

sub delete_model{
    my $model = shift;
    my $model_dir = $model->model_directory;
    undef $model;
    print("\nrm -rf:".system "rm -rf $model_dir/*");
    print("\nrmdir:".system "rmdir $model_dir");
}

=pod

=head1 NAME
ScriptTemplate - template for new perl script

=head1 SYNOPSIS

=head1 DESCRIPTION 

=cut

#$HeadURL$
#$Id$


