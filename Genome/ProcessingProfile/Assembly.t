#!/gsc/bin/perl

use strict;
use warnings;

use above 'Genome';
use Data::Dumper;
use Test::More tests => 18;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
        use_ok('Genome::ProcessingProfile::Assembly');
}
my $mock_id = 0;
my %pp_params;
&fail_create('no name param',%pp_params);

$pp_params{name} = 'test_assembly_pp';
&fail_create('no assembler_version param',%pp_params);

$pp_params{assembler_version} = 'invalid';
&fail_create('invalid assembler_version param',%pp_params);

$pp_params{assembler_version} = '2.0.00.20-1';
&fail_create('no assembler_name param',%pp_params);

$pp_params{assembler_name} = 'invalid';
&fail_create('invalid assembler_name param',%pp_params);

$pp_params{assembler_name} = 'newbler';
&fail_create('no sequencing_platform param',%pp_params);

$pp_params{sequencing_platform} = 'invalid';
&fail_create('invalid sequencing_platform param',%pp_params);

$pp_params{sequencing_platform} = '454';
&fail_create('invalid version_subdirectory param'. %pp_params);

$pp_params{version_subdirectory} = 'offInstrumentApps';
&create_successfully(%pp_params);


exit;


sub fail_create {
    my $reason = shift;
    my %pp_params = @_;
    my $pp;
    eval {
        $pp = Genome::ProcessingProfile::Assembly->create(%pp_params);
    };
    ok(!$pp,$reason);
}

sub create_successfully {
    my %pp_params = @_;
    my $pp = Genome::ProcessingProfile::Assembly->create(%pp_params);
    isa_ok($pp,'Genome::ProcessingProfile::Assembly');

    $mock_id--;
    my $mock_model = Genome::Model::Assembly->create_mock(
        id => $mock_id,
        genome_model_id => $mock_id,
        name => $pp->name .'_model',
        subject_name => $pp->name .'_subject_name',
        subject_type => $pp->name .'_subject_type',
        subject_id => --$mock_id,
        subject_class_name => 'Test::MockObject',
        processing_profile_id => $pp->id,
    );
    $mock_id--;
    my $mock_build = Genome::Model::Build::Assembly->create_mock(
        id => $mock_id,
        build_id => $mock_id,
        model_id => $mock_model->id,
    );
    $mock_build->set_list('instrument_data', '1', '2', '3');
    $mock_model->set_list('builds', ( $mock_build ));

    my %known_classes_for_stage = (
        setup_project => 3,
        assemble => 1,
    );
    my %known_objects_for_stage = (
        setup_project => scalar($mock_build->instrument_data),
        assemble => 1,
    );
    my @stages = $pp->stages;
    is(scalar(@stages),2,'two stages');


    for my $stage ( @stages ) {
        my @classes = $pp->classes_for_stage($stage);
        my @objects = $pp->objects_for_stage($stage,$mock_model);
        is(scalar(@classes),$known_classes_for_stage{$stage},'Found '. $known_classes_for_stage{$stage} .' classes for stage '. $stage);
        is(scalar(@objects),$known_objects_for_stage{$stage},'Found '. $known_objects_for_stage{$stage} .' objects for stage '. $stage);
    }
    ok(!$pp->instrument_data_is_applicable('invalid_seq_platform',--$mock_id,$mock_model->subject_name),
        'instrument data with invalid data type is not applicable');
    ok($pp->instrument_data_is_applicable('454',--$mock_id,$mock_model->subject_name),
        'instrument data is applicable');
    ok($pp->instrument_data_is_applicable('454',--$mock_id,'invalid_subject_name'),
        'instrument data is applicable');
}
