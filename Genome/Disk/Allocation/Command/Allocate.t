#!/gsc/bin/perl

use strict;
use warnings;

use above 'Genome';

use File::Copy;
require Genome::Model::Test;
use String::Random;
use Test::More tests => 29;

use GSCApp;
App::DB->db_access_level('rw');
App::DB::TableRow->use_dummy_autogenerated_ids(1);
App::DBI->no_commit(1);
#App->init;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

use_ok('Genome::Disk::Allocation');
use_ok('Genome::Disk::Allocation::Command::Allocate');
use_ok('Genome::Disk::Allocation::Command::Reallocate');
use_ok('Genome::Disk::Allocation::Command::Deallocate');

my $known_base_filename = 'allocation_test_file.dat';
my $known_file = '/gsc/var/cache/testsuite/data/Genome-Disk-Allocation/'. $known_base_filename;

my $fake_mount_path = '/incorrect/mount/path';
my $allocation_path = '/testing/allocate';


my $mock_model = Genome::Model::Test->create_mock_model(
    type_name => 'tester',
    use_mock_dir => 0,
);
my ($mock_build) = $mock_model->builds;
my $mock_id = 0;

my $allocation;
# Test an incorrect mount path param
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create(mount_path => $fake_mount_path);
};
ok(scalar(grep { "Disk mount path '$fake_mount_path' is not an available disk mount path"} $@),'mount path not found');

# Test no params
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create();
};
ok(scalar(grep { 'Owner class name is required!' } $@),'owner class name is required');

# Test correct owner class name but missing owner id
my %allocate_params = (
                       owner_class_name => 'Genome::Model::Build',
                   );
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create(%allocate_params);
};
ok(scalar(grep { 'Owner id is required!' } $@),'owner id is required');

# Test incorrect owner id
$allocate_params{'owner_id'} = -1;
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create(%allocate_params);
};
ok(scalar(grep { 'Failed to get object of class Genome::Model::Build and id -1' } $@),'failed to get owner object');

# Test with out allocation path
$allocate_params{'owner_id'} = $mock_build->id;
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create(%allocate_params);
};
ok(scalar(grep { 'Allocation path is required!' } $@), 'allocation path is required');

$allocate_params{'allocation_path'} = $allocation_path;
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create(%allocate_params);
};
ok(scalar(grep { 'Kilobytes requested is required!'} $@), 'kilobytes requested is required');

$allocate_params{'mount_path'} = '/gscmnt/839';
$allocate_params{'kilobytes_requested'} = '2000';
$allocate_params{'local_confirm'} = 1;
eval {
    $allocation = Genome::Disk::Allocation::Command::Allocate->create(%allocate_params);
};
isa_ok($allocation,'Genome::Disk::Allocation::Command::Allocate');
is($allocation->disk_group_name,'info_apipe','got the default disk_group_name');
isa_ok($allocation->get_disk_group,'Genome::Disk::Group','got the default disk group object');
is($allocation->get_disk_group->subdirectory,'info/medseq','got the default group_subdirectory');

my $allocator = $allocation->allocator;
isa_ok($allocator,'GSC::PSE::AllocateDiskSpace');
# PSE has not been confirmed
ok($allocation->pse_not_complete($allocator),'pse is not complete');
ok(!$allocation->wait_for_pse_to_confirm(
                                         pse => $allocator,
                                         max_try => 1,
                                         block_sleep => 1,
                                     ),'pse has not been confirmed');

# Confirm locally since this is a test case
ok($allocation->execute,'execute allocate disk space');

#get object again since it had to be deleted for confirm checking
$allocator = $allocation->allocator;

# PSE should now be confirmed
ok(!$allocation->pse_not_complete($allocator),'pse is complete');
ok($allocation->wait_for_pse_to_confirm(
                                             pse => $allocator,
                                             max_try => 1,
                                             block_sleep => 1,
                                         ),'pse has been confirmed');

my $disk_allocation = $allocation->disk_allocation;

my $allocated_directory = $disk_allocation->absolute_path;
ok(Genome::Utility::FileSystem->create_directory($allocated_directory),'create directory '. $allocated_directory);

unless (copy($known_file,$allocated_directory .'/'. $known_base_filename)) {
    die $!;
}

my $reallocation = Genome::Disk::Allocation::Command::Reallocate->execute(allocator_id => $disk_allocation->allocator_id);
isa_ok($reallocation,'Genome::Disk::Allocation::Command::Reallocate');

my $reallocator = $reallocation->reallocator;
isa_ok($reallocator,'GSC::PSE::ReallocateDiskSpace');
ok(!$reallocation->pse_not_complete($reallocator),'pse is complete');

#$disk_allocation = $reallocation->disk_allocation;
my $gsc_disk_allocation = $reallocation->gsc_disk_allocation;

SKIP : {
    skip 'not sure what the actual usage is for the file'. $known_file, 1 if 1;
    is($gsc_disk_allocation->kilobytes_requested,23600,'kilobytes_requested matches expected amount');
}


my $deallocation = Genome::Disk::Allocation::Command::Deallocate->execute(allocator_id => $disk_allocation->allocator_id);

isa_ok($deallocation,'Genome::Disk::Allocation::Command::Deallocate');

my $deallocator = $deallocation->deallocator;
isa_ok($deallocator,'GSC::PSE::DeallocateDiskSpace');
ok(!$deallocation->pse_not_complete($deallocator),'pse is complete');

#$disk_allocation = $deallocation->disk_allocation;
$gsc_disk_allocation = $deallocation->gsc_disk_allocation;
ok(!$gsc_disk_allocation,'Disk allocation summary is undef');
exit;
